<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenGL</name>
    </assembly>
    <members>
        <member name="M:OpenGL.gl.CopyTexSubImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy a three-dimensional texture subimage.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_3D.
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number.</para>
            <para>Level 0 is the base image level. Level n is the nth mipmap reduction image. </para>
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array.
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array. 
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array. 
            </param>
            <param name="x">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. 
            </param>
            <param name="y">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawRangeElements(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            render primitives from array data.
            </summary>
            <param name="mode">
            <para>Specifies what kind of primitives to render.</para>
            <para>Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP,</para> 
            <para>GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted. </para>
            </param>
            <param name="start">
            Specifies the minimum array index contained in indices. 
            </param>
            <param name="end">
            Specifies the maximum array index contained in indices. 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
            <para>Specifies the type of the values in indices. </para>
            <para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.</para> 
            </param>
            <param name="indices">
            <para>Specifies a pointer to the location where the indices are stored. </para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a three-dimensional texture image.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D. 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number. </para>
            <para>Level 0 is the base image level. Level n is the n^th mipmap reduction image. </para>
            </param>
            <param name="internalFormat">
            <para>Specifies the number of color components in the texture. </para>
            <para>Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4,</para>
            <para>GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, </para>
            <para>GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA,</para>
            <para>GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA,</para>
            <para>GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4,</para>
            <para>GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, </para>
            <para>GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, </para>
            <para>GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12,</para>
            <para>GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB,</para>
            <para>GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8. </para>
            </param>
            <param name="width">
            <para>Specifies the width of the texture image including the border if any. </para>
            <para>If the GL version does not support non-power-of-two sizes,</para>
            <para>this value must be 2^n+2﻿(border) for some integer n. </para>
            <para>All implementations support 3D texture images that are at least 16 texels wide. </para>
            </param>
            <param name="height">
            <para>Specifies the height of the texture image including the border if any. </para>
            <para>If the GL version does not support non-power-of-two sizes, </para>
            <para>this value must be 2^m+2﻿(border) for some integer m. </para>
            <para>All implementations support 3D texture images that are at least 16 texels high. </para>
            </param>
            <param name="depth">
            <para>Specifies the depth of the texture image including the border if any. </para>
            <para>If the GL version does not support non-power-of-two sizes, </para>
            <para>this value must be 2^k+2﻿(border) for some integer k.</para>
            <para>All implementations support 3D texture images that are at least 16 texels deep. </para>
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
            <param name="format">
            <para>Specifies the format of the pixel data.</para>
            <para>The following symbolic values are accepted: </para>
            <para>GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.</para> 
            </param>
            <param name="type">
            <para>Specifies the data type of the pixel data. </para>
            <para>The following symbolic values are accepted: </para>
            <para>GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,</para>
            <para>GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5,</para> 
            <para>GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV,</para>
            <para>GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, </para>
            <para>GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV. </para>
            </param>
            <param name="pixels">
            <para>Specifies a pointer to the image data in memory. </para>
            <para>Yo can use the function GLAX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexSubImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a three-dimensional texture subimage.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_3D. 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number.</para>
            <para>Level 0 is the base image level. Level n is the nth mipmap reduction image. </para>
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array. 
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
            <param name="depth">
            Specifies the depth of the texture subimage. 
            </param>
            <param name="format">
            <para>Specifies the format of the pixel data. </para>
            <para>The following symbolic values are accepted: </para>
            <para>GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, </para>
            <para>GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA. </para>
            </param>
            <param name="type">
            <para>Specifies the data type of the pixel data. </para>
            <para>The following symbolic values are accepted: </para>
            <para>GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, </para>
            <para>GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5,</para>
            <para>GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV,</para>
            <para>GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8,</para>
            <para>GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV. </para>
            </param>
            <param name="pixels">
            <para>Specifies a pointer to the image data in memory. </para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.ActiveTexture(System.UInt32)">
            <summary>
            select active texture unit.
            </summary>
            <param name="texture">
            <para> Specifies which texture unit to make active.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>texture must be one of GL_TEXTUREi, where i ranges from 0 to the larger of (GL_MAX_TEXTURE_COORDS - 1) and (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1).</para>
            <para>The initial value is GL_TEXTURE0. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.ClientActiveTexture(System.UInt32)">
            <summary>
            select active texture unit.
            </summary>
            <param name="texture">
            <para>Specifies which texture unit to make active. </para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>texture must be one of GL_TEXTUREi,where i ranges from 0 to the value of GL_MAX_TEXTURE_COORDS - 1, which is an implementation-dependent value. </para>
            <para>The initial value is GL_TEXTURE0. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.CompressedTexImage1D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            specify a one-dimensional texture image in a compressed format.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D. 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number. </para>
            <para>Level 0 is the base image level. Level n is the nth mipmap reduction image. </para>
            </param>
            <param name="internalformat">
            Specifies the format of the compressed image data stored at address data. 
            </param>
            <param name="width">
            <para>Specifies the width of the texture image including the border if any. </para>
            <para>If the GL version does not support non-power-of-two sizes, this value must be 26n+2﻿(border) for some integer n. </para>
            <para>All implementations support texture images that are at least 64 texels wide. </para>
            <para>The height of the 1D texture image is 1. </para>
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data. 
            </param>
            <param name="data">
            <para>Specifies a pointer to the compressed image data in memory. </para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.CompressedTexImage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            specify a two-dimensional texture image in a compressed format.
            </summary>
            <param name="target">
            <para>Specifies the target texture. </para>
            <para>Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X,</para>
            <para>GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,</para>
            <para>GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP. </para>
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number.</para>
            <para>Level 0 is the base image level. Level n is the nth mipmap reduction image. </para>
            </param>
            <param name="internalformat">
            Specifies the format of the compressed image data stored at address data. 
            </param>
            <param name="width">
            <para>Specifies the width of the texture image including the border if any. </para>
            <para>If the GL version does not support non-power-of-two sizes, </para>
            <para>this value must be 2^n+2﻿(border) for some integer n. </para>
            <para>All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.</para> 
            </param>
            <param name="height">
            <para>Specifies the height of the texture image including the border if any. </para>
            <para>If the GL version does not support non-power-of-two sizes, </para>
            <para>this value must be Must be 2^n+2﻿(border) for some integer n. </para>
            <para>All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.</para> 
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </param>
            <param name="data">
            <para>Specifies a pointer to the compressed image data in memory. </para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.CompressedTexImage3D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
             <summary>
             specify a three-dimensional texture image in a compressed format.
             </summary>
             <param name="target">
             Specifies the target texture. Must be GL_TEXTURE_3D or GL_PROXY_TEXTURE_3D. 
             </param>
             <param name="level">
             <para>Specifies the level-of-detail number. </para>
             <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
             </param>
             <param name="internalformat">
             Specifies the format of the compressed image data stored at address data. 
             </param>
             <param name="width">
             <para>Specifies the width of the texture image including the border if any. </para>
             <para>If the GL version does not support non-power-of-two sizes, </para>
             <para>this value must be 2^n+2﻿(border) for some integer n. </para>       
             <para>All implementations support 3D texture images that are at least 16 texels wide.</para> 
             </param>
             <param name="height">
             <para>Specifies the height of the texture image including the border if any. </para>
             <para>If the GL version does not support non-power-of-two sizes, </para>
             <para>this value must be 2^n+2﻿(border) for some integer n. </para>
             <para>All implementations support 3D texture images that are at least 16 texels high. </para>
             </param>
             <param name="depth">
             <para>Specifies the depth of the texture image including the border if any.</para>
             <para>If the GL version does not support non-power-of-two sizes, </para>
            <para> this value must be 2^n+2﻿(border) for some integer n.</para>
             <para>All implementations support 3D texture images that are at least 16 texels deep. </para>
             </param>
             <param name="border">
             Specifies the width of the border. Must be either 0 or 1. 
             </param>
             <param name="imageSize">
             Specifies the number of unsigned bytes of image data starting at the address specified by data. 
             </param>
             <param name="data">
            <para> Specifies a pointer to the compressed image data in memory.</para>
             <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
             </param>
        </member>
        <member name="M:OpenGL.gl.CompressedTexSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            specify a one-dimensional texture subimage in a compressed format.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_1D. 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number. </para>
            <para>Level 0 is the base image level. Level n is the nth mipmap reduction image. </para>
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the compressed image data stored at address data. 
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data. 
            </param>
            <param name="data">
            <para>Specifies a pointer to the compressed image data in memory.</para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.CompressedTexSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            specify a two-dimensional texture subimage in a compressed format.
            </summary>
            <param name="target">
            <para>Specifies the target texture.</para>
            <para>Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,</para>
            <para>GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z,or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z. </para>
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number. </para>
            <para>Level 0 is the base image level. Level n is the nth mipmap reduction image. </para>
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage.
            </param>
            <param name="format">
            Specifies the format of the compressed image data stored at address data. 
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data. 
            </param>
            <param name="data">
            <para>Specifies a pointer to the compressed image data in memory. </para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.CompressedTexSubImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            specify a three-dimensional texture subimage in a compressed format.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_3D. 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number.</para>
            <para>Level 0 is the base image level. Level n is the nth mipmap reduction image. </para>
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array. 
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
            <param name="depth">
            Specifies the depth of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the compressed image data stored at address data. 
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data. 
            </param>
            <param name="data">
            <para>Specifies a pointer to the compressed image data in memory. </para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.GetCompressedTexImage(System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            return a compressed texture image.
            </summary>
            <param name="target">
            <para> Specifies which texture is to be obtained.</para>
            <para> GL_TEXTURE_1D, GL_TEXTURE_2D, and GL_TEXTURE_3DGL_TEXTURE_CUBE_MAP_POSITIVE_X,</para>
            <para>GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, </para>
            <para>GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted. </para>
            </param>
            <param name="lod">
            <para>Specifies the level-of-detail number of the desired image.</para>
            <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="img">
            <para>Returns the compressed texture image. </para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.LoadTransposeMatrix(System.Double[])">
            <summary>
            replace the current matrix with the specified row-major ordered matrix.
            </summary>
            <param name="matrix">
            Specifies an array of 16 consecutive values, which are used as the elements of a 4×4 row-major matrix. 
            </param>
        </member>
        <member name="M:OpenGL.gl.LoadTransposeMatrix(System.Single[])">
            <summary>
            replace the current matrix with the specified row-major ordered matrix.
            </summary>
            <param name="matrix">
            Specifies an array of 16 consecutive values, which are used as the elements of a 4×4 row-major matrix. 
            </param>
        </member>
        <member name="M:OpenGL.gl.MultTransposeMatrix(System.Double[])">
            <summary>
            multiply the current matrix with the specified row-major ordered matrix.
            </summary>
            <param name="matrix">
            Array of 16 consecutive values that are used as the elements of a 4×4 row-major matrix. 
            </param>
        </member>
        <member name="M:OpenGL.gl.MultTransposeMatrix(System.Single[])">
            <summary>
            multiply the current matrix with the specified row-major ordered matrix.
            </summary>
            <param name="matrix">
            Array of 16 consecutive values that are used as the elements of a 4×4 row-major matrix. 
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord1(System.UInt32,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord1(System.UInt32,System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of one element, which in turn specify the s texture coordinate.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord1(System.UInt32,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord1(System.UInt32,System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of one element, which in turn specify the s texture coordinate.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord1(System.UInt32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord1(System.UInt32,System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of one element, which in turn specify the s texture coordinate.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord1(System.UInt32,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord1(System.UInt32,System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of one element, which in turn specify the s texture coordinate.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord2(System.UInt32,System.Double,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord2(System.UInt32,System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of two elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord2(System.UInt32,System.Single,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord2(System.UInt32,System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of two elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord2(System.UInt32,System.Int32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord2(System.UInt32,System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of two elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord2(System.UInt32,System.Int16,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord2(System.UInt32,System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of two elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord3(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord3(System.UInt32,System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of three elements, which in turn specify the s,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord3(System.UInt32,System.Single,System.Single,System.Single)">
             <summary>
             set the current texture coordinates.
             </summary>
             <param name="target">
             <para>Specifies the texture unit whose coordinates should be modified.</para>
             <para>The number of texture units is implementation dependent, but must be at least two.</para>
             <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para> which is an implementation-dependent value. </para>
             </param>
             <param name="s">
             Specify s texture coordinates for target texture unit.
             </param>
             <param name="t">
             Specify t texture coordinates for target texture unit.
             </param>
             <param name="r">
             Specify r texture coordinates for target texture unit.
             </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord3(System.UInt32,System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of three elements, which in turn specify the s,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord3(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord3(System.UInt32,System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of three elements, which in turn specify the s,t and r texture coordinates.
            </param >
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord3(System.UInt32,System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para> which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord3(System.UInt32,System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para> 
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of three elements, which in turn specify the s,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord4(System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
            <param name="q">
            Specify q texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord4(System.UInt32,System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of four elements, which in turn specify the s,t,r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord4(System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
            <param name="q">
            Specify q texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord4(System.UInt32,System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1,</para> 
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of four elements, which in turn specify the s,t,r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord4(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
            <param name="q">
            Specify q texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord4(System.UInt32,System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of four elements, which in turn specify the s,t,r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord4(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two.</para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="s">
            Specify s texture coordinates for target texture unit.
            </param>
            <param name="t">
            Specify t texture coordinates for target texture unit.
            </param>
            <param name="r">
            Specify r texture coordinates for target texture unit.
            </param>
            <param name="q">
            Specify q texture coordinates for target texture unit.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiTexCoord4(System.UInt32,System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="target">
            <para>Specifies the texture unit whose coordinates should be modified.</para>
            <para>The number of texture units is implementation dependent, but must be at least two. </para>
            <para>Symbolic constant must be one of GL_TEXTUREi, where i ranges from 0 to GL_MAX_TEXTURE_COORDS - 1, </para>
            <para>which is an implementation-dependent value. </para>
            </param>
            <param name="v">
            Specifies  an array of four elements, which in turn specify the s,t,r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.SampleCoverage(System.Single,System.Boolean)">
            <summary>
            specify multisample coverage parameters.
            </summary>
            <param name="value">
            <para>Specify a sine floating-point sample coverage value. </para>
            <para>The value is clamped to the range [0,1]. The initial value is 1.0. </para>
            </param>
            <param name="invert">
            <para>Specify a sine boolean value representing if the coverage masks should be inverted. </para>
            <para>GL_TRUE and GL_FALSE are accepted. The initial value is GL_FALSE. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.BlendColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            set the blend color.
            </summary>
            <param name="red">
            specify the components of GL_BLEND_COLOR.
            </param>
            <param name="green">
            specify the components of GL_BLEND_COLOR.
            </param>
            <param name="blue">
            specify the components of GL_BLEND_COLOR.
            </param>
            <param name="alpha">
            specify the components of GL_BLEND_COLOR.
            </param>
        </member>
        <member name="M:OpenGL.gl.BlendEquation(System.UInt32)">
            <summary>
            specify the equation used for both the RGB blend equation and the Alpha blend equation.
            </summary>
            <param name="mode">
            <para>specifies how source and destination colors are combined. </para>
            <para>It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.BlendFuncSeparate(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            specify pixel arithmetic for RGB and alpha components separately
            </summary>
            <param name="sfactorRGB">
            <para>Specifies how the red, green, and blue blending factors are computed. </para>
            <para>The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, </para>
            <para>GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, </para>
            <para> GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR, </para>
            <para> GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, </para>
            <para>and GL_SRC_ALPHA_SATURATE. The initial value is GL_ONE.</para>
            </param>
            <param name="dfactorRGB">
            <para>Specifies how the red, green, and blue destination blending factors are computed.</para>
            <para>The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, </para>
            <para>GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, </para>
            <para>GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, </para>
            <para>GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO. </para>
            </param>
            <param name="sfactorAlpha">
            <para>Specified how the alpha source blending factor is computed. </para>
            <para>The same symbolic constants are accepted as for srcRGB. The initial value is _ONE. </para>
            </param>
            <param name="dfactorAlpha">
            <para>Specified how the alpha destination blending factor is computed. </para>
            <para>The same symbolic constants are accepted as for dstRGB. The initial value is _ZERO. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.FogCoordPointer(System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of fog coordinates.
            </summary>
            <param name="type">
            <para>Specifies the data type of each fog coordinate. </para>
            <para>Symbolic constants GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.</para>
            </param>
            <param name="stride">
            <para>Specifies the byte offset between consecutive fog coordinates. </para>
            <para>If stride is 0, the array elements are understood to be tightly packed. The initial value is 0. </para>
            </param>
            <param name="pointer">
            <para>Specifies a pointer to the first coordinate of the first fog coordinate in the array.</para>
            <para>The initial value is 0. </para>
            <para>You can use the function AUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.FogCoord(System.Double)">
            <summary>
            set the current fog coordinates.
            </summary>
            <param name="coord">
            Specify the fog distance. 
            </param>
        </member>
        <member name="M:OpenGL.gl.FogCoord(System.Double[])">
            <summary>
            set the current fog coordinates.
            </summary>
            <param name="coord">
            Specifies an array containing a sine value representing the fog distance. 
            </param>
        </member>
        <member name="M:OpenGL.gl.FogCoord(System.Single)">
            <summary>
            set the current fog coordinates.
            </summary>
            <param name="coord">
            Specify the fog distance. 
            </param>
        </member>
        <member name="M:OpenGL.gl.FogCoord(System.Single[])">
            <summary>
            set the current fog coordinates.
            </summary>
            <param name="coord">
            Specifies an array containing a sine value representing the fog distance. 
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiDrawArrays(System.UInt32,System.Int32[],System.Int32[],System.Int32)">
            <summary>
            render multiple sets of primitives from array data.
            </summary>
            <param name="mode">
            <para>Specifies what kind of primitives to render. </para>
            <para>Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANE_STRIP, </para>
            <para>GL_TRIANE_FAN, GL_TRIANES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted. </para>
            </param>
            <param name="first">
             An array of starting indices in the enabled arrays. 
            </param>
            <param name="count">
            An array of the number of indices to be rendered. 
            </param>
            <param name="drawcount">
            Specifies the size of the first and count .
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiDrawElements(System.UInt32,System.Int32[],System.UInt32,System.IntPtr[],System.Int32)">
            <summary>
            render multiple sets of primitives by specifying indices of array data elements.
            </summary>
            <param name="mode">
            <para>Specifies what kind of primitives to render. </para>
            <para>Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANE_STRIP, </para>
            <para>GL_TRIANE_FAN, GL_TRIANES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted.</para> 
            </param>
            <param name="count">
            An array of the elements counts. 
            </param>
            <param name="type">
            <para>Specifies the type of the values in indices. </para>
            <para>Must be one of GL_UNSIGNED_BYTE,GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. </para>
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored.
            </param>
            <param name="drawcount">
            Specifies the size of the count array.
            </param>
        </member>
        <member name="M:OpenGL.gl.PointParameter(System.UInt32,System.Single)">
            <summary>
            specify point parameters.
            </summary>
            <param name="pname">
            <para>Specifies a sine-valued point parameter. </para>
            <para>GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted. </para>
            </param>
            <param name="param">
            Specifies the value that pname will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PointParameter(System.UInt32,System.Single[])">
            <summary>
            specify point parameters.
            </summary>
            <param name="pname">
            <para>Specifies a point parameter.</para>
            <para>GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_DISTANCE_ATTENUATION, GL_POINT_FADE_THRESHOLD_SIZE,</para>
            <para>and GL_POINT_SPRITE_COORD_ORIGIN are accepted. </para>
            </param>
            <param name="Params">
            <para>Specifies the value or values to be assigned to pname. </para>
            <para>GL_POINT_DISTANCE_ATTENUATION requires an array of three values. </para>
            <para>All other parameters accept an array containing only a sine value.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.PointParameter(System.UInt32,System.Int32)">
            <summary>
            specify point parameters.
            </summary>
            <param name="pname">
            <para>Specifies a sine-valued point parameter. </para>
            <para>GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_FADE_THRESHOLD_SIZE, and GL_POINT_SPRITE_COORD_ORIGIN are accepted. </para>
            </param>
            <param name="param">
            Specifies the value that pname will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PointParameter(System.UInt32,System.Int32[])">
            <summary>
            specify point parameters.
            </summary>
            <param name="pname">
            <para>Specifies a point parameter.</para>
            <para>GL_POINT_SIZE_MIN, GL_POINT_SIZE_MAX, GL_POINT_DISTANCE_ATTENUATION, GL_POINT_FADE_THRESHOLD_SIZE,</para>
            <para>and GL_POINT_SPRITE_COORD_ORIGIN are accepted. </para>
            </param>
            <param name="Params">
            <para>Specifies the value or values to be assigned to pname. </para>
            <para>GL_POINT_DISTANCE_ATTENUATION requires an array of three values. </para>
            <para>All other parameters accept an array containing only a sine value. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.SByte,System.SByte,System.SByte)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.SByte[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.Double,System.Double,System.Double)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.Double[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.Single,System.Single,System.Single)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.Single[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.Int32[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.Int16[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.Byte,System.Byte,System.Byte)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.Byte[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.UInt32[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            set the current secondary color.
            </summary>
            <param name="red">
            Specify new red value for the current secondary color. 
            </param>
            <param name="green">
            Specify new green value for the current secondary color. 
            </param>
            <param name="blue">
            Specify new blue value for the current secondary color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColor3(System.UInt16[])">
            <summary>
            set the current secondary color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SecondaryColorPointer(System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of secondary colors.
            </summary>
            <param name="size">
            Specifies the number of components per color. Must be 3. 
            </param>
            <param name="type">
            <para>Specifies the data type of each color component in the array. </para>
            <para>Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, </para>
            <para>GL_UNSIGNED_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT. </para>
            </param>
            <param name="stride">
            <para>Specifies the byte offset between consecutive colors. </para>
            <para>If stride is 0, the colors are understood to be tightly packed in the array. The initial value is 0. </para>
            </param>
            <param name="pointer">
            <para>Specifies a pointer to the first component of the first color element in the array. </para>
            <para>The initial value is 0. </para>
            <para>You can use the function AUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos2(System.Double,System.Double)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos2(System.Double[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of two elements, specifying x, y coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos2(System.Single,System.Single)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos2(System.Single[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of two elements, specifying x, y coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos2(System.Int32,System.Int32)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos2(System.Int32[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of two elements, specifying x, y coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos2(System.Int16,System.Int16)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos2(System.Int16[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of two elements, specifying x, y coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos3(System.Double,System.Double,System.Double)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
            <param name="z">
            Specify the z coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos3(System.Double[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of three elements, specifying x, y and z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos3(System.Single,System.Single,System.Single)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
            <param name="z">
            Specify the z coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos3(System.Single[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of three elements, specifying x, y and z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos3(System.Int32,System.Int32,System.Int32)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
            <param name="z">
            Specify the z coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos3(System.Int32[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of three elements, specifying x, y and z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos3(System.Int16,System.Int16,System.Int16)">
            <summary>
            specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="x">
            Specify the x coordinate for the raster position. 
            </param>
            <param name="y">
            Specify the y coordinate for the raster position. 
            </param>
            <param name="z">
            Specify the z coordinate for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.gl.WindowPos3(System.Int16[])">
            <summary>
             specify the raster position in window coordinates for pixel operations.
            </summary>
            <param name="p">
            Specifies an array of three elements, specifying x, y and z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BeginQuery(System.UInt32,System.UInt32)">
            <summary>
            delimit the boundaries of a query object.
            </summary>
            <param name="target">
            <para>Specifies the target type of query object established between BeginQuery and the subsequent EndQuery.</para>
            <para>The symbolic constant must be GL_SAMPLES_PASSED.</para> 
            </param>
            <param name="id">
            Specifies the name of a query object. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindBuffer(System.UInt32,System.UInt32)">
            <summary>
            bind a named buffer object.
            </summary>
            <param name="target">
            <para>Specifies the target to which the buffer object is bound. </para>
            <para>The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, </para>
            <para>GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. </para>
            </param>
            <param name="buffer">
            Specifies the name of a buffer object. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BufferData(System.UInt32,System.Int32,System.IntPtr,System.UInt32)">
            <summary>
            creates and initializes a buffer object's data store.
            </summary>
            <param name="target">
            <para>Specifies the target buffer object. </para>
            <para>The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. </para>
            </param>
            <param name="size">
            Specifies the size in bytes of the buffer object's new data store.
            </param>
            <param name="data">
            <para>Specifies a pointer to data that will be copied into the data store for initialization,or NULL if no data is to be copied. </para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
            <param name="usage">
            <para>Specifies the expected usage pattern of the data store. </para>
            <para>The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY,</para>
            <para>GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.BufferSubData(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            updates a subset of a buffer object's data store.
            </summary>
            <param name="target">
            <para>Specifies the target buffer object. </para>
            <para>The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER,</para>
            <para>GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. </para>
            </param>
            <param name="offset">
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes. 
            </param>
            <param name="size">
            Specifies the size in bytes of the data store region being replaced. 
            </param>
            <param name="data">
            <para>Specifies a pointer to the new data that will be copied into the data store. </para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.DeleteBuffers(System.Int32,System.UInt32[])">
            <summary>
            delete named buffer objects.
            </summary>
            <param name="n">
            Specifies the number of buffer objects to be deleted.
            </param>
            <param name="buffers">
            Specifies an array of buffer objects to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DeleteQueries(System.Int32,System.UInt32[])">
            <summary>
            delete named query objects.
            </summary>
            <param name="n">
            Specifies the number of query objects to be deleted. 
            </param>
            <param name="ids">
            Specifies an array of query objects to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.gl.EndQuery(System.UInt32)">
            <summary>
            delimit the boundaries of a query object.
            </summary>
            <param name="target">
            <para>Specifies the target type of query object to be concluded.</para>
            <para>The symbolic constant must be GL_SAMPLES_PASSED. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.GenBuffers(System.Int32,System.UInt32[])">
            <summary>
            generate buffer object names.
            </summary>
            <param name="n">
            Specifies the number of buffer object names to be generated. 
            </param>
            <param name="buffers">
            Specifies an array in which the generated buffer object names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GenQueries(System.Int32,System.UInt32[])">
            <summary>
            generate query object names.
            </summary>
            <param name="n">
            Specifies the number of query object names to be generated. 
            </param>
            <param name="ids">
            Specifies an array in which the generated query object names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetBufferParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return parameters of a buffer object.
            </summary>
            <param name="target">
            <para>Specifies the target buffer object. </para>
            <para>The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. </para>
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a buffer object parameter. </para>
            <para>Accepted values are GL_BUFFER_ACCESS, GL_BUFFER_MAPPED, GL_BUFFER_SIZE, or GL_BUFFER_USAGE. </para>
            </param>
            <param name="Params">
            Returns the requested parameter.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetBufferPointer(System.UInt32,System.UInt32,System.IntPtr[])">
            <summary>
            return the pointer to a mapped buffer object's data store.
            </summary>
            <param name="target">
            <para>Specifies the target buffer object. </para>
            <para>The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. </para>
            </param>
            <param name="pname">
            Specifies the pointer to be returned. The symbolic constant must be GL_BUFFER_MAP_POINTER. 
            </param>
            <param name="Params">
            Returns the pointer value specified by pname. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetBufferSubData(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            returns a subset of a buffer object's data store.
            </summary>
            <param name="target">
            <para>Specifies the target buffer object.</para>
            <para>The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. </para>
            </param>
            <param name="offset">
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes. 
            </param>
            <param name="size">
            Specifies the size in bytes of the data store region being returned. 
            </param>
            <param name="data">
            <para>Specifies a pointer to the location where buffer object data is returned.</para>
            <para>You can use the function LAUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.GetQueryObject(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return parameters of a query object.
            </summary>
            <param name="id">
            Specifies the name of a query object. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a query object parameter.</para>
            <para>Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE. </para>
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetQueryObject(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            return parameters of a query object.
            </summary>
            <param name="id">
            Specifies the name of a query object. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a query object parameter.</para>
            <para>Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE. </para>
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetQuery(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return parameters of a query object target.
            </summary>
            <param name="target">
            Specifies a query object target. Must be GL_SAMPLES_PASSED. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a query object target parameter. </para>
            <para>Accepted values are GL_CURRENT_QUERY or GL_QUERY_COUNTER_BITS. </para>
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.IsBuffer(System.UInt32)">
            <summary>
            determine if a name corresponds to a buffer object.
            </summary>
            <param name="buffer">
            Specifies a value that may be the name of a buffer object. 
            </param>
            <returns>
            <para>IsBuffer returns GL_TRUE if buffer is currently the name of a buffer object. </para>
            <para>If buffer is zero, or is a non-zero value that is not currently the name of a buffer object, </para>      
            <para>or if an error occurs, IsBuffer returns GL_FALSE. </para>
            </returns>
        </member>
        <member name="M:OpenGL.gl.IsQuery(System.UInt32)">
             <summary>
             determine if a name corresponds to a query object.
             </summary>
             <param name="id">
             Specifies a value that may be the name of a query object. 
             </param>
             <returns>
             <para>IsQuery returns GL_TRUE if id is currently the name of a query object.</para>
             <para>If id is zero, or is a non-zero value that is not currently the name of a query object, </para>
            <para> or if an error occurs, IsQuery returns GL_FALSE. </para>
             </returns>
        </member>
        <member name="M:OpenGL.gl.MapBuffer(System.UInt32,System.UInt32)">
            <summary>
            map a buffer object's data store.
            </summary>
            <param name="target">
            <para>Specifies the target buffer object being mapped. </para>
            <para>The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. </para>
            </param>
            <param name="access">
            <para>Specifies the access policy, indicating whether it will be possible to read from, write to, </para>
            <para>or both read from and write to the buffer object's mapped data store. </para>
            <para>The symbolic constant must be GL_READ_ONLY, GL_WRITE_ONLY, or GL_READ_WRITE. </para>
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.gl.UnmapBuffer(System.UInt32)">
            <summary>
            unmap a buffer object's data store
            </summary>
            <param name="target">
            <para>Specifies the target buffer object being unmapped. </para>
            <para>The symbolic constant must be GL_ARRAY_BUFFER, GL_ELEMENT_ARRAY_BUFFER, GL_PIXEL_PACK_BUFFER, or GL_PIXEL_UNPACK_BUFFER. </para>
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.AttachShader(System.UInt32,System.UInt32)">
            <summary>
            Attaches a shader object to a program object.
            </summary>
            <param name="program">
            Specifies the program object to which a shader object will be attached.
            </param>
            <param name="shader">
            Specifies the shader object that is to be attached.
            </param>
        </member>
        <member name="M:OpenGL.gl.BindAttribLocation(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Associates a generic vertex attribute index with a named attribute variable.
            </summary>
            <param name="program">
            Specifies the handle of the program object in which the association is to be made.
            </param>
            <param name="index">
            Specifies the index of the generic vertex attribute to be bound.
            </param>
            <param name="name">
            Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
            </param>
        </member>
        <member name="M:OpenGL.gl.BlendEquationSeparate(System.UInt32,System.UInt32)">
            <summary>
            set the RGB blend equation and the alpha blend equation separately.
            </summary>
            <param name="modeRGB">
            <para>specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined.</para>
            <para>It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX. </para>
            </param>
            <param name="modeAlpha">
            <para>specifies the alpha blend equation, how the alpha component of the source and destination colors are combined.</para> 
            <para>It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.CompileShader(System.UInt32)">
            <summary>
            Compiles a shader object.
            </summary>
            <param name="shader">
            Specifies the shader object to be compiled.
            </param>
        </member>
        <member name="M:OpenGL.gl.CreateProgram">
            <summary>
            Creates a program object.
            </summary>
            <returns>
            returns a non-zero value by which it can be referenced.
            </returns>
        </member>
        <member name="M:OpenGL.gl.CreateShader(System.UInt32)">
            <summary>
            Creates a shader object.
            </summary>
            <param name="type">
            Specifies the type of shader to be created. Must be either GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.
            </param>
            <returns>
            returns a non-zero value by which it can be referenced.
            </returns>
        </member>
        <member name="M:OpenGL.gl.DeleteProgram(System.UInt32)">
            <summary>
            Deletes a program object.
            </summary>
            <param name="program">
            Specifies the program object to be deleted.
            </param>
        </member>
        <member name="M:OpenGL.gl.DeleteShader(System.UInt32)">
            <summary>
            Deletes a shader object.
            </summary>
            <param name="shader">
            Specifies the shader object to be deleted.
            </param>
        </member>
        <member name="M:OpenGL.gl.DetachShader(System.UInt32,System.UInt32)">
            <summary>
            Detaches a shader object from a program object to which it is attached.
            </summary>
            <param name="program">
            Specifies the program object from which to detach the shader object.
            </param>
            <param name="shader">
            Specifies the shader object to be detached.
            </param>
        </member>
        <member name="M:OpenGL.gl.DisableVertexAttribArray(System.UInt32)">
            <summary>
            Disable a generic vertex attribute array
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be disabled.
            </param>
        </member>
        <member name="M:OpenGL.gl.EnableVertexAttribArray(System.UInt32)">
            <summary>
            Enable  a generic vertex attribute array
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be enabled .
            </param>
        </member>
        <member name="M:OpenGL.gl.GetActiveAttrib(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,System.UInt32@,System.Byte[])">
            <summary>
            Returns information about an active attribute variable for the specified program object.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="index">
            Specifies the index of the attribute variable to be queried.
            </param>
            <param name="maxLength">
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </param>
            <param name="length">
            Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than NULL is passed.
            </param>
            <param name="size">
            Returns the size of the attribute variable.
            </param>
            <param name="type">
            Returns the data type of the attribute variable.
            </param>
            <param name="name">
            Returns a null terminated string containing the name of the attribute variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetActiveUniform(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,System.UInt32@,System.Byte[])">
            <summary>
            Returns information about an active uniform variable for the specified program object.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="index">
            Specifies the index of the uniform variable to be queried.
            </param>
            <param name="maxLength">
            Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
            </param>
            <param name="length">
            <para>Returns the number of characters actually written by OpenGL in the string </para>
            <para>indicated by name (excluding the null terminator) if a value other than NULL is passed.</para>
            </param>
            <param name="size">
            Returns the size of the uniform variable.
            </param>
            <param name="type">
            Returns the data type of the uniform variable.
            </param>
            <param name="name">
            Returns a null terminated string containing the name of the uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetAttachedShaders(System.UInt32,System.Int32,System.Int32@,System.UInt32[])">
            <summary>
            Returns the handles of the shader objects attached to a program object.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="maxCount">
            Specifies the size of the array for storing the returned object names.
            </param>
            <param name="count">
            Returns the number of names actually returned in shaders.
            </param>
            <param name="shaders">
            Specifies an array that is used to return the names of attached shader objects.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetAttribLocation(System.UInt32,System.Byte[])">
            <summary>
            Returns the location of an attribute variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="name">
            Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.gl.GetProgramInfoLog(System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            Returns the information log for a program object.
            </summary>
            <param name="program">
            Specifies the program object whose information log is to be queried.
            </param>
            <param name="bufSize">
            Specifies the size of the character buffer for storing the returned information log.
            </param>
            <param name="length">
            Returns the length of the string returned in infoLog (excluding the null terminator).
            </param>
            <param name="infoLog">
            Specifies an array of characters that is used to return the information log.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetProgram(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Returns a parameter from a program object.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="pname">
            <para>Specifies the object parameter.</para>
            <para>Accepted symbolic names are GL_DELETE_STATUS, GL_LINK_STATUS, GL_VALIDATE_STATUS,</para>
            <para>GL_INFO_LOG_LENGTH, GL_ATTACHED_SHADERS, GL_ACTIVE_ATTRIBUTES, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH,GL_ACTIVE_UNIFORMS, GL_ACTIVE_UNIFORM_MAX_LENGTH.</para>
            </param>
            <param name="Params">
            Returns the requested object parameter.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetShaderInfoLog(System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            Returns the information log for a shader object.
            </summary>
            <param name="shader">
            Specifies the shader object whose information log is to be queried.
            </param>
            <param name="bufSize">
            Specifies the size of the character buffer for storing the returned information log.
            </param>
            <param name="length">
            Returns the length of the string returned in infoLog (excluding the null terminator).
            </param>
            <param name="infoLog">
            Specifies an array of characters that is used to return the information log.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetShaderSource(System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
             Returns the source code string from a shader object.
            </summary>
            <param name="obj">
            Specifies the shader object to be queried.
            </param>
            <param name="maxLength">
            Specifies the size of the character buffer for storing the returned source code string.
            </param>
            <param name="length">
            Returns the length of the string returned in source (excluding the null terminator).
            </param>
            <param name="source">
            Specifies an array of characters that is used to return the source code string.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetShader(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Returns a parameter from a shader object.
            </summary>
            <param name="shader">
            Specifies the shader object to be queried.
            </param>
            <param name="pname">
            <para>Specifies the object parameter. </para>
            <para>Accepted symbolic names are GL_SHADER_TYPE, GL_DELETE_STATUS, GL_COMPILE_STATUS,</para>
            <para>GL_INFO_LOG_LENGTH, GL_SHADER_SOURCE_LENGTH.</para>
            </param>
            <param name="Params">
            Returns the requested object parameter.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetUniformLocation(System.UInt32,System.Byte[])">
            <summary>
            Returns the location of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="name">
            Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.gl.GetUniform(System.UInt32,System.Int32,System.Single[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetUniform(System.UInt32,System.Int32,System.Int32[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetVertexAttribPointer(System.UInt32,System.UInt32,System.IntPtr[])">
            <summary>
            return the address of the specified generic vertex attribute pointer.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be returned.
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of the generic vertex attribute parameter to be returned.</para>
            <para>Must be GL_VERTEX_ATTRIB_ARRAY_POINTER.</para>
            </param>
            <param name="pointer">
            Returns the pointer value.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetVertexAttrib(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be queried.
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of the vertex attribute parameter to be queried. </para>
            <para>Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED,</para>
            <para> GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE,</para>
            <para>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.</para>
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetVertexAttrib(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be queried.
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of the vertex attribute parameter to be queried. </para>
            <para>Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED,</para>
            <para>GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE,</para>
            <para>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.</para>
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetVertexAttrib(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be queried.
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of the vertex attribute parameter to be queried. </para>
            <para>Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED,</para>
            <para>GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE,</para>
            <para>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, or GL_CURRENT_VERTEX_ATTRIB.</para>
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.IsProgram(System.UInt32)">
            <summary>
            Determines if a name corresponds to a program object.
            </summary>
            <param name="program">
            Specifies a potential program object.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.gl.IsShader(System.UInt32)">
            <summary>
            Determines if a name corresponds to a shader object.
            </summary>
            <param name="shader">
            Specifies a potential shader object.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.LinkProgram(System.UInt32)">
            <summary>
            Links a program object.
            </summary>
            <param name="program">
            Specifies the handle of the program object to be linked.
            </param>
        </member>
        <member name="M:OpenGL.gl.ShaderSource(System.UInt32,System.Int32,System.IntPtr[],System.IntPtr)">
            <summary>
            Replaces the source code in a shader object.
            </summary>
            <param name="shader">
            Specifies the handle of the shader object whose source code is to be replaced.
            </param>
            <param name="count">
            Specifies the number of elements in the string and length arrays.
            </param>
            <param name="str">
            <para>Specifies an array of pointers to strings containing the source code to be loaded into the shader.</para>
            <para>You can use the function GLAUX.GetArrayPointer to get the string pointer.</para>
            </param>
            <param name="length">
            <para>Specifies a pointer of an array of string lengths.</para>
            <para>you can use the function GLAUX.GetArrayPointer to get the array poiner.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.StencilFuncSeparate(System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            set front and/or back function and reference value for stencil testing.
            </summary>
            <param name="frontfunc">
            <para>Specifies whether front and/or back stencil state is updated.</para>
            <para>Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK. </para>
            </param>
            <param name="backfunc">
            <para>Specifies the test function. </para>
            <para>Eight symbolic constants are valid:</para>
            <para>GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS.</para>
            <para>The initial value is GL_ALWAYS. </para>
            </param>
            <param name="Ref">
            <para>Specifies the reference value for the stencil test. </para>
            <para>ref is clamped to the range [0,2^n−1], where n is the number of bitplanes in the stencil buffer. </para>
            <para>The initial value is 0. </para>
            </param>
            <param name="mask">
            <para>Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done.</para>
            <para>The initial value is all 1's. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.StencilMaskSeparate(System.UInt32,System.UInt32)">
            <summary>
            control the front and/or back writing of individual bits in the stencil planes.
            </summary>
            <param name="face">
            <para>Specifies whether the front and/or back stencil writemask is updated. </para>
            <para>Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK. </para>
            </param>
            <param name="mask">
            <para>Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. </para>
            <para>Initially, the mask is all 1's.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.StencilOpSeparate(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            set front and/or back stencil test actions.
            </summary>
            <param name="face">
            <para>Specifies whether front and/or back stencil state is updated.</para>
            <para>Three symbolic constants are valid: GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK. </para>
            </param>
            <param name="sfail">
            <para>Specifies the action to take when the stencil test fails. </para>
            <para>Eight symbolic constants are accepted: GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT.</para> 
            <para>The initial value is GL_KEEP. </para>
            </param>
            <param name="dpfail">
            <para>Specifies the stencil action when the stencil test passes, but the depth test fails.</para>
            <para>dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP. </para>
            </param>
            <param name="dppass">
            <para>Specifies the stencil action when both the stencil test and the depth test pass, </para>
            <para>or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. </para>
            <para>dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform1(System.Int32,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform1(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of elements that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.</para>
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform1(System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform1(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of elements that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.</para>
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform2(System.Int32,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v1">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform2(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of elements that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.</para>
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform2(System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v1">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform2(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of elements that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.</para>
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform3(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v1">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v2">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform3(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of elements that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.</para>
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform3(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v1">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v2">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform3(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of elements that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.</para>
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform4(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v1">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v2">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v3">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform4(System.Int32,System.Int32,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of elements that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.</para>
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform4(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v1">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v2">
            Specifies the new values to be used for the specified uniform variable.
            </param>
            <param name="v3">
            Specifies the new values to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform4(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of elements that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.</para>
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix2(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of matrices that are to be modified.</para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.</para>
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix3(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of matrices that are to be modified.</para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.</para>
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix4(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of matrices that are to be modified.</para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.</para>
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.UseProgram(System.UInt32)">
            <summary>
            Installs a program object as part of current rendering state.
            </summary>
            <param name="program">
            Specifies the handle of the program object whose executables are to be used as part of current rendering state.
            </param>
        </member>
        <member name="M:OpenGL.gl.ValidateProgram(System.UInt32)">
            <summary>
             Validates a program object.
            </summary>
            <param name="program">
            Specifies the handle of the program object to be validated.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib1(System.UInt32,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib1(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib1(System.UInt32,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib1(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib1(System.UInt32,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib1(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib2(System.UInt32,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib2(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib2(System.UInt32,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib2(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib2(System.UInt32,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib2(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib3(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib3(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib3(System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib3(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib3(System.UInt32,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib3(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4N(System.UInt32,System.SByte[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4N(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4N(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4N(System.UInt32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="w">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4N(System.UInt32,System.Byte[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4N(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4N(System.UInt32,System.UInt16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4(System.UInt32,System.SByte[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4(System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="w">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4(System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="w">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4(System.UInt32,System.Single[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4(System.UInt32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="y">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="z">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
            <param name="w">
            Specifies the new values to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4(System.UInt32,System.Byte[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttrib4(System.UInt32,System.UInt16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            Specifies a pointer to an array of values to be used for the generic vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribPointer(System.UInt32,System.Int32,System.UInt32,System.Boolean,System.Int32,System.IntPtr)">
            <summary>
             define an array of generic vertex attribute data.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="size">
            <para>Specifies the number of components per generic vertex attribute. </para>
            <para>Must be 1, 2, 3, or 4. The initial value is 4.</para>
            </param>
            <param name="type">
            <para>Specifies the data type of each component in the array. </para>
            <para>Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, </para>
            <para>GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT.</para>
            </param>
            <param name="normalized">
            <para>Specifies whether fixed-point data values should be normalized (GL_TRUE) </para>
            <para>or converted directly as fixed-point values (GL_FALSE) when they are accessed.</para>
            </param>
            <param name="stride">
            <para>Specifies the byte offset between consecutive generic vertex attributes. </para>
            <para>If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. </para>
            <para>The initial value is 0.</para>
            </param>
            <param name="pointer">
            Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawBuffers(System.Int32,System.UInt32[])">
            <summary>
            Specifies a list of color buffers to be drawn into.
            </summary>
            <param name="n">
            Specifies the number of buffers in bufs.
            </param>
            <param name="bufs">
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix2x3(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of matrices that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices,and 1 or more if it is an array of matrices.</para>
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix2x4(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of matrices that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.</para>
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix3x2(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of matrices that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.</para>
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix3x4(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of matrices that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.</para>
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix4x2(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of matrices that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.</para>
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix4x3(System.Int32,System.Int32,System.Boolean,System.Single[])">
            <summary>
            Specify the value of a uniform variable for the current program object
            </summary>
            <param name="location">
            Specifies the location of the uniform value to be modified.
            </param>
            <param name="count">
            <para>Specifies the number of matrices that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.</para>
            </param>
            <param name="transpose">
            Specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            Specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetInteger(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="target">
            Specifies the parameter value to be returned for indexed versions of Get. 
            The symbolic constants in the list below are accepted. 
            </param>
            <param name="index">
            Specifies the index of the particular element being queried. 
            </param>
            <param name="data">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindVertexArray(System.UInt32)">
            <summary>
            bind a vertex array object.
            </summary>
            <param name="array">
            Specifies the name of the vertex array to bind. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DeleteVertexArrays(System.Int32,System.UInt32[])">
            <summary>
            delete vertex array objects.
            </summary>
            <param name="n">
            Specifies the number of vertex array objects to be deleted. 
            </param>
            <param name="arrays">
            Specifies the address of an array containing the n names of the objects to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GenVertexArrays(System.Int32,System.UInt32[])">
            <summary>
            generate vertex array object names.
            </summary>
            <param name="n">
            Specifies the number of vertex array object names to generate.
            </param>
            <param name="arrays">
            Specifies an array in which the generated vertex array object names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.IsVertexArray(System.UInt32)">
            <summary>
            determine if a name corresponds to a vertex array object.
            </summary>
            <param name="array">
            Specifies a value that may be the name of a vertex array object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.BindBufferBase(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            bind a buffer object to an indexed buffer target
            </summary>
            <param name="target">
            Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, 
            GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER. 
            </param>
            <param name="index">
            Specify the index of the first binding point within the array specified by target. 
            </param>
            <param name="buffer">
            The name of a buffer object to bind to the specified binding point. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindBufferRange(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            bind a range within a buffer object to an indexed buffer target.
            </summary>
            <param name="target">
            Specify the target of the bind operation. target must be one of GL_ATOMIC_COUNTER_BUFFER, 
            GL_TRANSFORM_FEEDBACK_BUFFER, GL_UNIFORM_BUFFER, or GL_SHADER_STORAGE_BUFFER.
            </param>
            <param name="index">
            Specify the index of the binding point within the array specified by target. 
            </param>
            <param name="buffer">
            The name of a buffer object to bind to the specified binding point. 
            </param>
            <param name="offset">
            The starting offset in basic machine units into the buffer object buffer. 
            </param>
            <param name="size">
            The amount of data in machine units that can be read from the buffer object while used as an indexed target.
            </param>
        </member>
        <member name="M:OpenGL.gl.FlushMappedBufferRange(System.UInt32,System.Int32,System.Int32)">
            <summary>
            indicate modifications to a range of a mapped buffer.
            </summary>
            <param name="target">
            Specifies the target to which the buffer object is bound for FlushMappedBufferRange, 
            which must be one of the buffer binding targets in the following table: 
            GL_ARRAY_BUFFER ,GL_ATOMIC_COUNTER_BUFFER,GL_COPY_READ_BUFFER ,GL_COPY_WRITE_BUFFER ,
            GL_DISPATCH_INDIRECT_BUFFER ,GL_DRAW_INDIRECT_BUFFER ,GL_ELEMENT_ARRAY_BUFFER ,
            GL_PIXEL_PACK_BUFFER ,GL_PIXEL_UNPACK_BUFFER ,GL_QUERY_BUFFER ,GL_SHADER_STORAGE_BUFFER ,
            GL_TEXTURE_BUFFER ,GL_TRANSFORM_FEEDBACK_BUFFER ,GL_UNIFORM_BUFFER .
            </param>
            <param name="offset">
            Specifies the start of the buffer subrange, in basic machine units. 
            </param>
            <param name="length">
            Specifies the length of the buffer subrange, in basic machine units. 
            </param>
        </member>
        <member name="M:OpenGL.gl.MapBufferRange(System.UInt32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            map all or part of a buffer object's data store into the client's address space.
            </summary>
            <param name="target">
            Specifies the target to which the buffer object is bound for MapBufferRange, 
            which must be one of the buffer binding targets in the following table: 
            GL_ARRAY_BUFFER ,GL_ATOMIC_COUNTER_BUFFER ,GL_COPY_READ_BUFFER ,GL_COPY_WRITE_BUFFER,
            GL_DISPATCH_INDIRECT_BUFFER ,GL_DRAW_INDIRECT_BUFFER ,GL_ELEMENT_ARRAY_BUFFER ,
            GL_PIXEL_PACK_BUFFER ,GL_PIXEL_UNPACK_BUFFER ,GL_QUERY_BUFFER ,GL_SHADER_STORAGE_BUFFER ,
            GL_TEXTURE_BUFFER ,GL_TRANSFORM_FEEDBACK_BUFFER,GL_UNIFORM_BUFFER .
            </param>
            <param name="offset">
            Specifies the starting offset within the buffer of the range to be mapped.
            </param>
            <param name="length">
            Specifies the length of the range to be mapped.
            </param>
            <param name="access">
            Specifies a combination of access flags indicating the desired access to the mapped range.
            </param>
        </member>
        <member name="M:OpenGL.gl.CheckFramebufferStatus(System.UInt32)">
            <summary>
            check the completeness status of a framebuffer.
            </summary>
            <param name="target">
            Specify the target to which the framebuffer is bound for CheckFramebufferStatus, 
            and the target against which framebuffer completeness of framebuffer is checked for CheckNamedFramebufferStatus. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.DeleteFramebuffers(System.Int32,System.UInt32[])">
            <summary>
            delete framebuffer objects.
            </summary>
            <param name="n">
            Specifies the number of framebuffer objects to be deleted.
            </param>
            <param name="framebuffers">
             An array containing n framebuffer objects to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DeleteRenderbuffers(System.Int32,System.UInt32[])">
            <summary>
            delete renderbuffer objects.
            </summary>
            <param name="n">
            Specifies the number of renderbuffer objects to be deleted. 
            </param>
            <param name="renderbuffers">
            An array containing n renderbuffer objects to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.gl.FramebufferRenderbuffer(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            attach a renderbuffer as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer is bound for FramebufferRenderbuffer. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="renderbuffertarget">
            Specifies the name of the framebuffer object for NamedFramebufferRenderbuffer. 
            </param>
            <param name="renderbuffer">
            Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach. 
            </param>
        </member>
        <member name="M:OpenGL.gl.FramebufferTexture1D(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            attach a level of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer is bound for all commands except NamedFramebufferTexture. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="textarget">
            For FramebufferTexture1D, FramebufferTexture2D and FramebufferTexture3D, 
            specifies what type of texture is expected in the texture parameter, or for cube map textures, 
            which face is to be attached. 
            </param>
            <param name="texture">
            Specifies the name of an existing texture object to attach. 
            </param>
            <param name="level">
            Specifies the mipmap level of the texture object to attach. 
            </param>
        </member>
        <member name="M:OpenGL.gl.FramebufferTexture2D(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            attach a level of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer is bound for all commands except NamedFramebufferTexture. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="textarget">
            For FramebufferTexture1D, FramebufferTexture2D and FramebufferTexture3D, 
            specifies what type of texture is expected in the texture parameter, or for cube map textures, 
            which face is to be attached. 
            </param>
            <param name="texture">
            Specifies the name of an existing texture object to attach. 
            </param>
            <param name="level">
            Specifies the mipmap level of the texture object to attach. 
            </param>
        </member>
        <member name="M:OpenGL.gl.FramebufferTexture3D(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            attach a level of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer is bound for all commands except NamedFramebufferTexture. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="textarget">
            For FramebufferTexture1D, FramebufferTexture2D and FramebufferTexture3D, 
            specifies what type of texture is expected in the texture parameter, or for cube map textures, 
            which face is to be attached. 
            </param>
            <param name="texture">
            Specifies the name of an existing texture object to attach. 
            </param>
            <param name="level">
            Specifies the mipmap level of the texture object to attach. 
            </param>
            <param name="layer">
            layer specifies the layer of a 2-dimensional image within a 3-dimensional texture. 
            </param>
        </member>
        <member name="M:OpenGL.gl.FramebufferTextureLayer(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            attach a sine layer of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer is bound for FramebufferTextureLayer. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="texture">
            Specifies the name of an existing texture object to attach. 
            </param>
            <param name="level">
            Specifies the mipmap level of the texture object to attach. 
            </param>
            <param name="layer">
            Specifies the layer of the texture object to attach. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GenFramebuffers(System.Int32,System.UInt32[])">
            <summary>
            generate framebuffer object names.
            </summary>
            <param name="n">
            Specifies the number of framebuffer object names to generate. 
            </param>
            <param name="framebuffers">
            Specifies an array in which the generated framebuffer object names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GenRenderbuffers(System.Int32,System.UInt32[])">
            <summary>
            generate framebuffer object names.
            </summary>
            <param name="n">
            Specifies the number of framebuffer object names to generate.
            </param>
            <param name="renderbuffers">
            Specifies an array in which the generated framebuffer object names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GenerateMipmap(System.UInt32)">
            <summary>
            generate mipmaps for a specified texture object.
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for GenerateMipmap. 
            Must be one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, 
            GL_TEXTURE_2D_ARRAY, GL_TEXTURE_CUBE_MAP, or GL_TEXTURE_CUBE_MAP_ARRAY. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetFramebufferAttachmentParameter(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve information about attachments of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer object is bound for GetFramebufferAttachmentParameteriv.
            </param>
            <param name="attachment">
            Specifies the attachment of the framebuffer object to query. 
            </param>
            <param name="pname">
            Specifies the parameter of attachment to query. 
            </param>
            <param name="Params">
            Returns the value of parameter pname for attachment. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetRenderbufferParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
             query a named parameter of a renderbuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the renderbuffer object is bound for GetRenderbufferParameteriv.
            target must be GL_RENDERBUFFER. 
            </param>
            <param name="pname">
            Specifies the parameter of the renderbuffer object to query. 
            </param>
            <param name="Params">
            Returns the value of parameter pname for the renderbuffer object.
            </param>
        </member>
        <member name="M:OpenGL.gl.IsFramebuffer(System.UInt32)">
            <summary>
            determine if a name corresponds to a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies a value that may be the name of a framebuffer object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.IsRenderbuffer(System.UInt32)">
            <summary>
            determine if a name corresponds to a renderbuffer object.
            </summary>
            <param name="renderbuffer">
            Specifies a value that may be the name of a renderbuffer object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.RenderbufferStorage(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            establish data storage, format and dimensions of a renderbuffer object's image.
            </summary>
            <param name="target">
            Specifies a binding target of the allocation for RenderbufferStorage function. Must be GL_RENDERBUFFER.
            </param>
            <param name="internalformat">
            Specifies the internal format to use for the renderbuffer object's image.
            </param>
            <param name="width">
            Specifies the width of the renderbuffer, in pixels
            </param>
            <param name="height">
            Specifies the height of the renderbuffer, in pixels.
            </param>
        </member>
        <member name="M:OpenGL.gl.RenderbufferStorageMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            establish data storage, format, dimensions and sample count of a renderbuffer object's image.
            </summary>
            <param name="target">
            Specifies a binding target of the allocation for RenderbufferStorageMultisample function. 
            Must be GL_RENDERBUFFER.
            </param>
            <param name="samples">
            Specifies the number of samples to be used for the renderbuffer object's storage.
            </param>
            <param name="internalformat">
            Specifies the internal format to use for the renderbuffer object's image.
            </param>
            <param name="width">
            Specifies the width of the renderbuffer, in pixels.
            </param>
            <param name="height">
            Specifies the height of the renderbuffer, in pixels.
            </param>
        </member>
        <member name="M:OpenGL.gl.BlitFramebuffer(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            copy a block of pixels from one framebuffer object to another.
            </summary>
            <param name="srcX0">
            Specify the bounds of the source rectane within the read buffer of the read framebuffer. 
            </param>
            <param name="srcY0">
            Specify the bounds of the source rectane within the read buffer of the read framebuffer. 
            </param>
            <param name="srcX1">
            Specify the bounds of the source rectane within the read buffer of the read framebuffer. 
            </param>
            <param name="srcY1">
            Specify the bounds of the source rectane within the read buffer of the read framebuffer. 
            </param>
            <param name="dstX0">
            Specify the bounds of the destination rectane within the write buffer of the write framebuffer. 
            </param>
            <param name="dstY0">
            Specify the bounds of the destination rectane within the write buffer of the write framebuffer. 
            </param>
            <param name="dstX1">
            Specify the bounds of the destination rectane within the write buffer of the write framebuffer. 
            </param>
            <param name="dstY1">
            Specify the bounds of the destination rectane within the write buffer of the write framebuffer. 
            </param>
            <param name="mask">
            The bitwise OR of the flags indicating which buffers are to be copied.
            The allowed flags are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT. 
            </param>
            <param name="filter">
            Specifies the interpolation to be applied if the image is stretched. Must be GL_NEAREST or GL_LINEAR. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindRenderbuffer(System.UInt32,System.UInt32)">
            <summary>
            bind a renderbuffer to a renderbuffer target.
            </summary>
            <param name="target">
            Specifies the renderbuffer target of the binding operation. target must be GL_RENDERBUFFER. 
            </param>
            <param name="renderbuffer">
            Specifies the name of the renderbuffer object to bind. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindFramebuffer(System.UInt32,System.UInt32)">
            <summary>
            bind a named buffer object.
            </summary>
            <param name="target">
            Specifies the target to which the buffer object is bound, which must be one of the buffer binding targets in the following table: 
            GL_ARRAY_BUFFER ,GL_ATOMIC_COUNTER_BUFFER,GL_COPY_READ_BUFFER ,GL_COPY_WRITE_BUFFER ,GL_DISPATCH_INDIRECT_BUFFER ,
            GL_DRAW_INDIRECT_BUFFER,GL_DRAW_INDIRECT_BUFFER,GL_PIXEL_PACK_BUFFER ,GL_PIXEL_UNPACK_BUFFER,
            GL_QUERY_BUFFER,GL_SHADER_STORAGE_BUFFER,GL_TEXTURE_BUFFER ,GL_TRANSFORM_FEEDBACK_BUFFER ,GL_UNIFORM_BUFFER .
            </param>
            <param name="framebuffer">
            Specifies the name of a buffer object. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BeginConditionalRender(System.UInt32,System.UInt32)">
            <summary>
            start conditional rendering.
            </summary>
            <param name="id">
            Specifies the name of an occlusion query object whose results are used to determine if the rendering commands are discarded. 
            </param>
            <param name="mode">
            Specifies how BeginConditionalRender interprets the results of the occlusion query. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BeginTransformFeedback(System.UInt32)">
            <summary>
            start transform feedback operation.
            </summary>
            <param name="primitiveMode">
            Specify the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindFragDataLocation(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            bind a user-defined varying out variable to a fragment shader color number.
            </summary>
            <param name="program">
            The name of the program containing varying out variable whose binding to modify 
            </param>
            <param name="colorNumber">
            The color number to bind the user-defined varying out variable to 
            </param>
            <param name="name">
            The name of the user-defined varying out variable whose binding to modify 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClampColor(System.UInt32,System.UInt32)">
            <summary>
            specify whether data read via ReadPixels should be clamped.
            </summary>
            <param name="target">
            Target for color clamping. target must be GL_CLAMP_READ_COLOR. 
            </param>
            <param name="clamp">
            Specifies whether to apply color clamping. clamp must be GL_TRUE or GL_FALSE. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearBuffer(System.UInt32,System.Int32,System.Single,System.Int32)">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">
            Specify the buffer to clear. 
            </param>
            <param name="drawBuffer">
            Specify a particular draw buffer to clear. 
            </param>
            <param name="depth">
            The value to clear the depth buffer to. 
            </param>
            <param name="stencil">
            The value to clear the stencil buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearBuffer(System.UInt32,System.Int32,System.Single[])">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">
            Specify the buffer to clear. 
            </param>
            <param name="drawBuffer">
            Specify a particular draw buffer to clear. 
            </param>
            <param name="value">
            A pointer to the value or values to clear the buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearBuffer(System.UInt32,System.Int32,System.Int32[])">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">
            Specify the buffer to clear. 
            </param>
            <param name="drawBuffer">
            Specify a particular draw buffer to clear. 
            </param>
            <param name="value">
            A pointer to the value or values to clear the buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearBuffer(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="buffer">
            Specify the buffer to clear. 
            </param>
            <param name="drawBuffer">
            Specify a particular draw buffer to clear. 
            </param>
            <param name="value">
            A pointer to the value or values to clear the buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ColorMask(System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            enable and disable writing of frame buffer color components.
            </summary>
            <param name="buf">
            For ColorMaski, specifies the index of the draw buffer whose color mask to set. 
            </param>
            <param name="red">
            <para>Specify whether red is to be written into the frame buffer.</para>
            <para>The initial value is  GL_TRUE, indicating that the color component is written. </para>
            </param>
            <param name="green">
            <para>Specify whether green is to be written into the frame buffer.</para>
            <para>The initial value is  GL_TRUE, indicating that the color component is written. </para>
            </param>
            <param name="blue">
            <para>Specify whether blue is to be written into the frame buffer.</para>
            <para>The initial value is  GL_TRUE, indicating that the color component is written. </para>
            </param>
            <param name="alpha">
            <para>Specify whether alpha is to be written into the frame buffer.</para>
            <para>The initial value is  GL_TRUE, indicating that the color component is written. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.Disable(System.UInt32,System.UInt32)">
            <summary>
            disable server-side GL capabilities.
            </summary>
            <param name="cap">
            Specifies a symbolic constant indicating a GL capability
            </param>
            <param name="index">
            Specifies the index of the switch to disable (for Enablei and Disablei only). 
            </param>
        </member>
        <member name="M:OpenGL.gl.Enable(System.UInt32,System.UInt32)">
            <summary>
            enable server-side GL capabilities.
            </summary>
            <param name="cap">
            Specifies a symbolic constant indicating a GL capability
            </param>
            <param name="index">
            Specifies the index of the switch to enable (for Enablei and Disablei only). 
            </param>
        </member>
        <member name="M:OpenGL.gl.EndConditionalRender">
            <summary>
            end conditional rendering
            </summary>
        </member>
        <member name="M:OpenGL.gl.EndTransformFeedback">
            <summary>
            end transform feedback operation
            </summary>
        </member>
        <member name="M:OpenGL.gl.GetBoolean(System.UInt32,System.UInt32,System.Boolean[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="pname">
            <para> Specifies the parameter value to be returned for non-indexed versions of Get. </para>
            <para>The symbolic constants in the list below are accepted. </para>
            </param>
            <param name="index">
            Specifies the index of the particular element being queried. 
            </param>
            <param name="data">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetFragDataLocation(System.UInt32,System.Byte[])">
            <summary>
            query the bindings of color numbers to user-defined varying out variables.
            </summary>
            
            <param name="program">
            The name of the program containing varying out variable whose binding to query 
            </param>
            <param name="name">
            The name of the user-defined varying out variable whose binding to query 
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.gl.GetString(System.UInt32,System.UInt32)">
            <summary>
            return a string describing the current GL connection
            </summary>
            <param name="name">
            <para>Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, or GL_SHADING_LANGUAGE_VERSION. </para>
            <para>Additionally, GetStringi accepts the GL_EXTENSIONS token. </para>
            </param>
            <param name="index">
            For GetStringi, specifies the index of the string to return. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.GetTexParameterI(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="target">
            <para>Specifies the target to which the texture is bound for GetTexParameterfv, </para>
            <para>GetTexParameteriv, GetTexParameterIiv, and GetTexParameterIuiv functions. </para>
            <para>GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, </para>
            <para>GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_3D,</para>
            <para>GL_TEXTURE_CUBE_MAP, GL_TEXTURE_RECTANGLE, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.</para>
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a texture parameter.</para>
            <para>GL_DEPTH_STENCIL_TEXTURE_MODE, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, GL_TEXTURE_BASE_LEVEL,</para>
            <para>GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT,</para>
            <para>GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL,</para>
            <para>GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, </para>
            <para>GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, </para>
            <para>GL_TEXTURE_TARGET, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS,</para>
            <para>GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.</para>
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTexParameterI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="target">
            <para>Specifies the target to which the texture is bound for GetTexParameterfv, </para>
            <para>GetTexParameteriv, GetTexParameterIiv, and GetTexParameterIuiv functions. </para>
            <para>GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, </para>
            <para>GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_3D,</para>
            <para>GL_TEXTURE_CUBE_MAP, GL_TEXTURE_RECTANGLE, and GL_TEXTURE_CUBE_MAP_ARRAY are accepted.</para>
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a texture parameter.</para>
            <para>GL_DEPTH_STENCIL_TEXTURE_MODE, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, GL_TEXTURE_BASE_LEVEL,</para>
            <para>GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT,</para>
            <para>GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL,</para>
            <para>GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, </para>
            <para>GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, </para>
            <para>GL_TEXTURE_TARGET, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS,</para>
            <para>GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.</para>
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTransformFeedbackVarying(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,System.UInt32@,System.Byte[])">
            <summary>
            retrieve information about varying variables selected for transform feedback.
            </summary>
            <param name="program">
            The name of the target program object. 
            </param>
            <param name="index">
            The index of the varying variable whose information to retrieve. 
            </param>
            <param name="bufSize">
            The maximum number of characters, including the null terminator, that may be written into name. 
            </param>
            <param name="length">
            <para>The address of a variable which will receive the number of characters written into name, </para>
            <para>excluding the null-terminator.</para>
            <para>If length is NULL no length is returned. </para>
            </param>
            <param name="size">
            The address of a variable that will receive the size of the varying.
            </param>
            <param name="type">
            The address of a variable that will recieve the type of the varying. 
            </param>
            <param name="name">
            The address of a buffer into which will be written the name of the varying. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetUniform(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetVertexAttribI(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be queried.
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of the vertex attribute parameter to be queried.</para>
            <para>Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED,</para>
            <para>GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE,</para>
            <para>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR,or GL_CURRENT_VERTEX_ATTRIB.</para>
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetVertexAttribI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be queried.
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of the vertex attribute parameter to be queried.</para>
            <para>Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED,</para>
            <para>GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE,</para>
            <para>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.</para>
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.IsEnabled(System.UInt32,System.UInt32)">
            <summary>
            test whether a capability is enabled.
            </summary>
            <param name="cap">
            Specifies a symbolic constant indicating a GL capability. 
            </param>
            <param name="index">
            Specifies the index of the capability. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.TexParameterI(System.UInt32,System.UInt32,System.Int32[])">
             <summary>
             set texture parameters.
             </summary>
             <param name="target">
             <para>Specifies the target to which the texture is bound for TexParameter functions.</para>
             <para>Must be one of GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, </para>
             <para>GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP,</para>
             <para>GL_TEXTURE_CUBE_MAP_ARRAY, or GL_TEXTURE_RECTANGLE.</para>
             </param>
             <param name="pname">
             <para>Specifies the symbolic name of a sine-valued texture parameter.</para>
             <para>pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, </para>
             <para>GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER,</para>
             <para>GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, </para>
             <para>GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, </para>
            <para> GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.</para>
             </param>
             <param name="Params">
             For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
             </param>
        </member>
        <member name="M:OpenGL.gl.TexParameterI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            set texture parameters.
            </summary>
            <param name="target">
            <para>Specifies the target to which the texture is bound for TexParameter functions.</para>
            <para>Must be one of GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, </para>
            <para>GL_TEXTURE_2D_MULTISAMPLE, GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP,</para>
            <para>GL_TEXTURE_CUBE_MAP_ARRAY, or GL_TEXTURE_RECTANGLE.</para>
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a sine-valued texture parameter.</para>
            <para>pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, </para>
            <para>GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER,</para>
            <para>GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, </para>
            <para>GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, </para>
            <para>GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.</para>
            </param>
            <param name="Params">
            For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
            </param>
        </member>
        <member name="M:OpenGL.gl.TransformFeedbackVaryings(System.UInt32,System.Int32,System.IntPtr[],System.UInt32)">
            <summary>
            specify values to record in transform feedback buffers.
            </summary>
            <param name="program">
            The name of the target program object.
            </param>
            <param name="count">
            The number of varying variables used for transform feedback. 
            </param>
            <param name="varyings">  
            An array of count zero-terminated strings specifying the names of the varying variables to use for transform feedback.
            </param>
            <param name="bufferMode">
            <para>Identifies the mode used to capture the varying variables when transform feedback is active. </para>
            <para>bufferMode must be GL_INTERLEAVED_ATTRIBS or GL_SEPARATE_ATTRIBS. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform1(System.Int32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform1(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            <para>For the vector (Uniform*v) commands, specifies the number of elements that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. </para>
            <para>For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.</para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. </para>
            </param>
            <param name="value">
            <para>For the vector and matrix commands,</para>
            <para>specifies an array of count values that will be used to update the specified uniform variable. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform2(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform2(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            <para>For the vector (Uniform*v) commands, specifies the number of elements that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. </para>
            <para>For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.</para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. </para>
            </param>
            <param name="value">
            <para>For the vector and matrix commands,</para>
            <para>specifies an array of count values that will be used to update the specified uniform variable. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform3(System.Int32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
             For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="v1">
             For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="v2">
             For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform3(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            <para>For the vector (Uniform*v) commands, specifies the number of elements that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. </para>
            <para>For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.</para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. </para>
            </param>
            <param name="value">
            <para>For the vector and matrix commands,</para>
            <para>specifies an array of count values that will be used to update the specified uniform variable.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform4(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="v0">
             For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="v1">
             For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="v2">
             For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="v3">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform4(System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            <para>For the vector (Uniform*v) commands, specifies the number of elements that are to be modified. </para>
            <para>This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. </para>
            <para>For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.</para>
            <para>This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. </para>
            </param>
            <param name="value">
            <para>For the vector and matrix commands,</para>
            <para>specifies an array of count values that will be used to update the specified uniform variable. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI1(System.UInt32,System.Int32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI1(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI1(System.UInt32,System.UInt32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI1(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI2(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI2(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI2(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI2(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI3(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v2">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI3(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI3(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v2">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI3(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI4(System.UInt32,System.SByte[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI4(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v2">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v3">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI4(System.UInt32,System.Int32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI4(System.UInt32,System.Int16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI4(System.UInt32,System.Byte[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI4(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v1">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v2">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
            <param name="v3">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI4(System.UInt32,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribI4(System.UInt32,System.UInt16[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v0">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribIPointer(System.UInt32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of generic vertex attribute data.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="size">
            <para>Specifies the number of components per generic vertex attribute. </para>
            <para>Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by VertexAttribPointer. </para>
            <para>The initial value is 4.</para>
            </param>
            <param name="type">
            <para>Specifies the data type of each component in the array.</para>
            <para>The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, </para>
            <para>and GL_UNSIGNED_INT are accepted by VertexAttribPointer and VertexAttribIPointer. </para>
            <para>Additionally GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV, </para>
            <para>GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV are accepted by VertexAttribPointer. </para>
            <para>GL_DOUBLE is also accepted by VertexAttribLPointer and is the only token accepted by the type parameter for that function. </para>
            <para>The initial value is GL_FLOAT.</para>
            </param>
            <param name="stride">
            <para>Specifies the byte offset between consecutive generic vertex attributes.</para>
            <para>If stride is 0, the generic vertex attributes are understood to be tightly packed in the array.</para>
            <para>The initial value is 0.</para>
            </param>
            <param name="pointer">
            <para>Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target. </para>
            <para>The initial value is 0.</para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.GetActiveUniformBlockName(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            retrieve the name of an active uniform block.
            </summary>
            <param name="program">
            Specifies the name of a program containing the uniform block. 
            </param>
            <param name="uniformBlockIndex">
            Specifies the index of the uniform block within program. 
            </param>
            <param name="bufSize">
            Specifies the size of the buffer addressed by uniformBlockName. 
            </param>
            <param name="length">
            Specifies the address of a variable to receive the number of characters that were written to uniformBlockName. 
            </param>
            <param name="uniformBlockName">
            Specifies the address an array of characters to receive the name of the uniform block at uniformBlockIndex. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetActiveUniformBlock(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query information about an active uniform block.
            </summary>
            <param name="program">
            Specifies the name of a program containing the uniform block. 
            </param>
            <param name="uniformBlockIndex">
            Specifies the index of the uniform block within program.
            </param>
            <param name="pname">
            Specifies the name of the parameter to query.
            </param>
            <param name="Params">
            Specifies the address of a variable to receive the result of the query. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetActiveUniformName(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            query the name of an active uniform.
            </summary>
            <param name="program">
            Specifies the program containing the active uniform index uniformIndex. 
            </param>
            <param name="uniformIndex">
            Specifies the index of the active uniform whose name to query. 
            </param>
            <param name="bufSize">
            Specifies the size of the buffer, in units of GLchar, of the buffer whose address is specified in uniformName.
            </param>
            <param name="length">
            Specifies the address of a variable that will receive the number of characters that were or would have been written to the buffer addressed by uniformName. 
            </param>
            <param name="uniformName">
            Specifies the address of a buffer into which the GL will place the name of the active uniform at uniformIndex within program. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetActiveUniforms(System.UInt32,System.Int32,System.UInt32[],System.UInt32,System.Int32[])">
            <summary>
            Returns information about several active uniform variables for the specified program object.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="uniformCount">
            Specifies both the number of elements in the array of indices uniformIndices and the number of parameters written to params upon successful return.
            </param>
            <param name="uniformIndices">
            Specifies the address of an array of uniformCount integers containing the indices of uniforms within program whose parameter pname should be queried.
            </param>
            <param name="pname">
            Specifies the property of each uniform in uniformIndices that should be written into the corresponding element of params.
            </param>
            <param name="Params">
            Specifies the address of an array of uniformCount integers which are to receive the value of pname for each uniform in uniformIndices.
            </param>
        </member>
        <member name="M:OpenGL.gl.CopyBufferSubData(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy all or part of the data store of a buffer object to the data store of another buffer object.
            </summary>
            <param name="readtarget">
            Specifies the target to which the source buffer object is bound for CopyBufferSubData .
            </param>
            <param name="writetarget">
            Specifies the target to which the destination buffer object is bound for CopyBufferSubData. 
            </param>
            <param name="readoffset">
            Specifies the offset, in basic machine units, within the data store of the source buffer object at which data will be read. 
            </param>
            <param name="writeoffset">
            Specifies the offset, in basic machine units, within the data store of the destination buffer object at which data will be written. 
            </param>
            <param name="size">
            Specifies the size, in basic machine units, of the data to be copied from the source buffer object to the destination buffer object. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawArraysInstanced(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            draw multiple instances of a range of elements.
            </summary>
            <param name="mode">
            <para>Specifies what kind of primitives to render. </para>
            <para>Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP,</para>
            <para>GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, </para>
            <para>GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted. </para>
            </param>
            <param name="first">
            Specifies the starting index in the enabled arrays. 
            </param>
            <param name="count">
            Specifies the number of indices to be rendered. 
            </param>
            <param name="primcount">
            Specifies the number of instances of the specified range of indices to be rendered.
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawElementsInstanced(System.UInt32,System.Int32,System.UInt32,System.IntPtr,System.Int32)">
            <summary>
            draw multiple instances of a set of elements.
            </summary>
            <param name="mode">
            <para>Specifies what kind of primitives to render.</para>
            <para>Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, </para>
            <para>GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY,</para> 
            <para>GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted. </para>
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
             
            <para>Specifies the type of the values in indices.</para>
            <para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT.</para>
            </param>
            <param name="indices">
            <para>Specifies a pointer to the location where the indices are stored. </para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
            <param name="primcount">
            Specifies the number of instances of the specified range of indices to be rendered. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PrimitiveRestartIndex(System.UInt32)">
            <summary>
            specify the primitive restart index.
            </summary>
            <param name="buffer">
            Specifies the value to be interpreted as the primitive restart index. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexBuffer(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            attach a buffer object's data store to a buffer texture object.
            </summary>
            <param name="target">
            Specifies the target to which the texture is bound for TexBuffer. Must be GL_TEXTURE_BUFFER.
            </param>
            <param name="internalFormat">
            Specifies the internal format of the data in the store belonging to buffer. 
            </param>
            <param name="buffer">
            Specifies the name of the buffer object whose storage to attach to the active buffer texture. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetUniformIndices(System.UInt32,System.Int32,System.IntPtr[],System.UInt32[])">
            <summary>
            retrieve the index of a named uniform block.
            </summary>
            <param name="program">
            Specifies the name of a program containing uniforms whose indices to query. 
            </param>
            <param name="uniformCount">
             Specifies the number of uniforms whose indices to query.
            </param>
            <param name="uniformNames">
            Specifies the address of an array of pointers to buffers containing the names of the queried uniforms.
            </param>
            <param name="uniformIndices">
            Specifies the address of an array that will receive the indices of the uniforms. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetUniformBlockIndex(System.UInt32,System.Byte[])">
            <summary>
            retrieve the index of a named uniform block.
            </summary>
            <param name="program">
            Specifies the name of a program containing the uniform block. 
            </param>
            <param name="uniformBlockName">
            Specifies the address an array of characters to containing the name of the uniform block whose index to retrieve. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.UniformBlockBinding(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            assign a binding point to an active uniform block.
            </summary>
            <param name="program">
            The name of a program object containing the active uniform block whose binding to assign. 
            </param>
            <param name="uniformBlockIndex">
            The index of the active uniform block within program whose binding to assign. 
            </param>
            <param name="uniformBlockBinding">
            Specifies the binding point to which to bind the uniform block with index uniformBlockIndex within program.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetMultisample(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            retrieve the location of a sample.
            </summary>
            <param name="pname">
            Specifies the sample parameter name. pname must be GL_SAMPLE_POSITION. 
            </param>
            <param name="index">
            Specifies the index of the sample whose position to query. 
            </param>
            <param name="val">
            Specifies the address of an array to receive the position of the sample. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SampleMask(System.UInt32,System.UInt32)">
            <summary>
            set the value of a sub-word of the sample mask.
            </summary>
            <param name="index">
            Specifies which 32-bit sub-word of the sample mask to update. 
            </param>
            <param name="mask">
            Specifies the new value of the mask sub-word. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetInteger(System.UInt32,System.Int64[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="pname">
            Specifies the parameter value to be returned for non-indexed versions of Get. 
            The symbolic constants in the list below are accepted. 
            </param>
            <param name="Params">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetSync(System.IntPtr,System.UInt32,System.Int32,System.Int32@,System.Int32[])">
            <summary>
            query the properties of a sync object.
            </summary>
            <param name="GLsync">
            Specifies the sync object whose properties to query. 
            </param>
            <param name="pname">
            Specifies the parameter whose value to retrieve from the sync object specified in sync. 
            </param>
            <param name="bufSize">
            Specifies the size of the buffer whose address is given in values. 
            </param>
            <param name="length">
            Specifies the address of an variable to receive the number of integers placed in values. 
            </param>
            <param name="values">
            Specifies the address of an array to receive the values of the queried parameter. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawElementsBaseVertex(System.UInt32,System.Int32,System.UInt32,System.IntPtr,System.Int32)">
            <summary>
            render primitives from array data with a per-element offset.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, 
            GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, 
            GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted. 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
            Specifies the type of the values in indices. 
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            </param>
            <param name="basevertex">
            Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays. 
            </param>
        </member>
        <member name="M:OpenGL.gl.FramebufferTexture(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
             <summary>
             attach a level of a texture object as a logical buffer of a framebuffer object.
             </summary>
             <param name="target">
             Specifies the target to which the framebuffer is bound for all commands except NamedFramebufferTexture. 
             </param>
             <param name="attachment">
             Specifies the attachment point of the framebuffer. 
             </param>
             <param name="texture">  
            Specifies the name of an existing texture object to attach.
             </param>
             <param name="level">
             Specifies the mipmap level of the texture object to attach. 
             </param>
        </member>
        <member name="M:OpenGL.gl.GetBufferParameteri64(System.UInt32,System.UInt32,System.Int64[])">
            <summary>
            return parameters of a buffer object.
            </summary>
            <param name="target">
            <para>Specifies the target to which the buffer object is bound for GetBufferParameteriv and GetBufferParameteri64v. </para>
            <para>Must be:GL_ATOMIC_COUNTER_BUFFER ,GL_COPY_READ_BUFFER Buffer ,GL_COPY_WRITE_BUFFER Buffer ,GL_DISPATCH_INDIRECT_BUFFER,</para>
            <para>GL_DRAW_INDIRECT_BUFFER,GL_ELEMENT_ARRAY_BUFFER ,GL_PIXEL_PACK_BUFFER,GL_PIXEL_UNPACK_BUFFER ,GL_QUERY_BUFFER ,</para>
            <para>GL_SHADER_STORAGE_BUFFER,GL_TEXTURE_BUFFER ,GL_TRANSFORM_FEEDBACK_BUFFER ,GL_UNIFORM_BUFFER .</para>
            </param>
            <param name="value">
            Specifies the name of the buffer object parameter to query. 
            </param>
            <param name="data">
            Returns the requested parameter.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetInteger(System.UInt32,System.UInt32,System.Int64[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="pname">
            <para>Specifies the parameter value to be returned for non-indexed versions of Get.</para>
            <para>The symbolic constants in the list below are accepted. </para>
            </param>
            <param name="index">
            Specifies the index of the particular element being queried. 
            </param>
            <param name="data">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawRangeElementsBaseVertex(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32,System.IntPtr,System.Int32)">
            <summary>
            render primitives from array data with a per-element offset
            </summary>
            <param name="mode">
             Specifies what kind of primitives to render.
             Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, 
             GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY,
             GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.
            </param>
            <param name="start">
            Specifies the minimum array index contained in indices. 
            </param>
            <param name="end">
            Specifies the maximum array index contained in indices. 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
            Specifies the type of the values in indices. 
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            </param>
            <param name="basevertex">
            Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawElementsInstancedBaseVertex(System.UInt32,System.Int32,System.UInt32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays. 
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP, 
            GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY,
            GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted. 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
            Specifies the type of the values in indices. 
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            </param>
            <param name="primcount">
            Specifies the number of instances of the indexed geometry that should be drawn. 
            </param>
            <param name="basevertex">
            Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays. 
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiDrawElementsBaseVertex(System.UInt32,System.Int32[],System.UInt32,System.IntPtr[],System.Int32,System.Int32[])">
            <summary>
            render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, 
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY,
            GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted. 
            </param>
            <param name="count">
            Points to an array of the elements counts. 
            </param>
            <param name="type">
            Specifies the type of the values in indices.
            Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. 
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            </param>
            <param name="primcount">
            Specifies the size of the count, indices and basevertex arrays. 
            </param>
            <param name="basevertex">
            Specifies a pointer to the location where the base vertices are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProvokingVertex(System.UInt32)">
            <summary>
            specifiy the vertex to be used as the source of data for flat shaded varyings.
            </summary>
            <param name="mode">
            Specifies the vertex to be used as the source of data for flat shaded varyings. 
            </param>
        </member>
        <member name="M:OpenGL.gl.FenceSync(System.UInt32,System.UInt32)">
            <summary>
            create a new sync object and insert it into the GL command stream.
            </summary>
            <param name="condition">
            Specifies the condition that must be met to set the sync object's state to signaled.
            condition must be GL_SYNC_GPU_COMMANDS_COMPLETE. 
            </param>
            <param name="flags">
            Specifies a bitwise combination of flags controlling the behavior of the sync object. 
            No flags are presently defined for this operation and flags must be zero.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.IsSync(System.IntPtr)">
            <summary>
            determine if a name corresponds to a sync object.
            </summary>
            <param name="GLsync">
            Specifies a value that may be the name of a sync object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.DeleteSync(System.IntPtr)">
            <summary>
            delete a sync object.
            </summary>
            <param name="GLsync">
            The sync object to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClientWaitSync(System.IntPtr,System.UInt32,System.UInt64)">
            <summary>
            block and wait for a sync object to become signaled.
            </summary>
            <param name="GLsync">
            The sync object whose status to wait on.
            </param>
            <param name="flags">
            A bitfield controlling the command flushing behavior. flags may be GL_SYNC_FLUSH_COMMANDS_BIT. 
            </param>
            <param name="timeout">
            The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.WaitSync(System.IntPtr,System.UInt32,System.UInt64)">
            <summary>
            instruct the GL server to block until the specified sync object becomes signaled.
            </summary>
            <param name="GLsync">
            Specifies the sync object whose status to wait on. 
            </param>
            <param name="flags">
            A bitfield controlling the command flushing behavior. flags may be zero. 
            </param>
            <param name="timeout">
            Specifies the timeout that the server should wait before continuing. timeout must be GL_TIMEOUT_IGNORED. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexImage2DMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            establish the data storage, format, dimensions, and number of samples of a multisample texture's image.
            </summary>
            <param name="target">
            Specifies the target of the operation. target must be GL_TEXTURE_2D_MULTISAMPLE or GL_PROXY_TEXTURE_2D_MULTISAMPLE. 
            </param>
            <param name="samples">
            The number of samples in the multisample texture's image.
            </param>
            <param name="internalformat">
            The internal format to be used to store the multisample texture's image. 
            internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format.
            </param>
            <param name="width">
            The width of the multisample texture's image, in texels. 
            </param>
            <param name="height">
            The height of the multisample texture's image, in texels. 
            </param>
            <param name="fixedsamplelocations">
            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, 
            and the sample locations will not depend on the internal format or size of the image. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexImage3DMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            establish the data storage, format, dimensions, and number of samples of a multisample texture's image.
            </summary>
            <param name="target">
            Specifies the target of the operation. target must be GL_TEXTURE_2D_MULTISAMPLE_ARRAY or GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY. 
            </param>
            <param name="samples">
            The number of samples in the multisample texture's image. 
            </param>
            <param name="internalformat">
            The internal format to be used to store the multisample texture's image. 
            internalformat must specify a color-renderable, depth-renderable, or stencil-renderable format. 
            </param>
            <param name="width">
            The width of the multisample texture's image, in texels. 
            </param>
            <param name="height">
            The height of the multisample texture's image, in texels. 
            </param>
            <param name="depth">
            The depth of the multisample texture's image, in texels. 
            </param>
            <param name="fixedsamplelocations">
            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image,
            and the sample locations will not depend on the internal format or size of the image. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetQueryObjecti(System.UInt32,System.UInt32,System.Int64[])">
            <summary>
            return parameters of a query object.
            </summary>
            <param name="id">
            Specifies the name of a query object. 
            </param>
            <param name="pname">
             Specifies the symbolic name of a query object parameter.
             Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </param>
            <param name="Params">
            If a buffer is bound to the GL_QUERY_RESULT_BUFFER target,
            then params is treated as an offset to a location within that buffer's data store to receive the result of the query. 
            If no buffer is bound to GL_QUERY_RESULT_BUFFER, 
            then params is treated as an address in client memory of a variable to receive the resulting data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetQueryObject(System.UInt32,System.UInt32,System.UInt64[])">
            <summary>
            return parameters of a query object.
            </summary>
            <param name="id">
            Specifies the name of a query object. 
            </param>
            <param name="pname">
             Specifies the symbolic name of a query object parameter.
             Accepted values are GL_QUERY_RESULT or GL_QUERY_RESULT_AVAILABLE.
            </param>
            <param name="Params">
            If a buffer is bound to the GL_QUERY_RESULT_BUFFER target,
            then params is treated as an offset to a location within that buffer's data store to receive the result of the query. 
            If no buffer is bound to GL_QUERY_RESULT_BUFFER, 
            then params is treated as an address in client memory of a variable to receive the resulting data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetSamplerParameterI(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return sampler parameter values.
            </summary>
            <param name="sampler">
            Specifies name of the sampler object from which to retrieve parameters. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter. 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, 
            GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, 
            GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted. 
            </param>
            <param name="Params">
            Returns the sampler parameters. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetSamplerParameterI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            return sampler parameter values.
            </summary>
            <param name="sampler">
            Specifies name of the sampler object from which to retrieve parameters. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter. 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, 
            GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, 
            GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted. 
            </param>
            <param name="Params">
            Returns the sampler parameters. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetSamplerParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return sampler parameter values.
            </summary>
            <param name="sampler">
            Specifies name of the sampler object from which to retrieve parameters. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter. 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, 
            GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, 
            GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted. 
            </param>
            <param name="Params">
            Returns the sampler parameters. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetSamplerParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return sampler parameter values.
            </summary>
            <param name="sampler">
            Specifies name of the sampler object from which to retrieve parameters. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter. 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, 
            GL_TEXTURE_LOD_BIAS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, 
            GL_TEXTURE_COMPARE_MODE, and GL_TEXTURE_COMPARE_FUNC are accepted. 
            </param>
            <param name="Params">
            Returns the sampler parameters. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SamplerParameterIi(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set sampler parameters.
            </summary>
            <param name="sampler">
            Specifies the sampler object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter.
            pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R,
            GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC. 
            </param>
            <param name="Params">
            For the vector commands (SamplerParameter*v), specifies a pointer to an array where the value or values of pname are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SamplerParameterI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            set sampler parameters.
            </summary>
            <param name="sampler">
            Specifies the sampler object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter.
            pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R,
            GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC. 
            </param>
            <param name="Params">
            For the vector commands (SamplerParameter*v),
            specifies a pointer to an array where the value or values of pname are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SamplerParameter(System.UInt32,System.UInt32,System.Single)">
            <summary>
            set sampler parameters.
            </summary>
            <param name="sampler">
            Specifies the sampler object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter.
            pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R,
            GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.         /// </param>
            <param name="param">
            For the scalar commands, specifies the value of pname. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SamplerParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            set sampler parameters.
            </summary>
            <param name="sampler">
            Specifies the sampler object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter.
            pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R,
            GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC. 
            </param>
            <param name="Params">
            For the vector commands (SamplerParameter*v),
            specifies a pointer to an array where the value or values of pname are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SamplerParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set sampler parameters.
            </summary>
            <param name="sampler">
            Specifies the sampler object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter.
            pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R,
            GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC.         /// </param>
            <param name="param">
            For the scalar commands, specifies the value of pname. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SamplerParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set sampler parameters.
            </summary>
            <param name="sampler">
            Specifies the sampler object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the symbolic name of a sampler parameter.
            pname can be one of the following: GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R,
            GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_MIN_LOD, 
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_LOD_BIAS GL_TEXTURE_COMPARE_MODE, or GL_TEXTURE_COMPARE_FUNC. 
            </param>
            <param name="Params">
            For the vector commands (SamplerParameter*v),
            specifies a pointer to an array where the value or values of pname are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribDivisor(System.UInt32,System.UInt32)">
            <summary>
            modify the rate at which generic vertex attributes advance during instanced rendering.
            </summary>
            <param name="index">
            Specify the index of the generic vertex attribute. 
            </param>
            <param name="divisor">
            Specify the number of instances that will pass between updates of the generic attribute at slot index. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindFragDataLocationIndexed(System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            bind a user-defined varying out variable to a fragment shader color number and index.
            </summary>
            <param name="program">
            The name of the program containing varying out variable whose binding to modify .
            </param>
            <param name="colorNumber">
            The color number to bind the user-defined varying out variable to .
            </param>
            <param name="index">
            The index of the color input to bind the user-defined varying out variable to .
            </param>
            <param name="name">
            The name of the user-defined varying out variable whose binding to modify .
            </param>
        </member>
        <member name="M:OpenGL.gl.GetFragDataIndex(System.UInt32,System.Byte[])">
            <summary>
            query the bindings of color indices to user-defined varying out variables.
            </summary>
            <param name="program">
            The name of the program containing varying out variable whose binding to query .
            </param>
            <param name="name">
            The name of the user-defined varying out variable whose index to query .
            </param>
            <returns>
            color indices to user-defined varying out variables.
            </returns>
        </member>
        <member name="M:OpenGL.gl.GenSamplers(System.Int32,System.UInt32[])">
            <summary>
            generate sampler object names.
            </summary>
            <param name="count">
            Specifies the number of sampler object names to generate. 
            </param>
            <param name="samplers">
            Specifies an array in which the generated sampler object names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DeleteSamplers(System.Int32,System.UInt32[])">
            <summary>
            delete named sampler objects.
            </summary>
            <param name="count">
            Specifies the number of sampler objects to be deleted. 
            </param>
            <param name="samplers">
            Specifies an array of sampler objects to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.gl.IsSampler(System.UInt32)">
            <summary>
            determine if a name corresponds to a sampler object.
            </summary>
            <param name="sampler">
            Specifies a value that may be the name of a sampler object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.BindSampler(System.UInt32,System.UInt32)">
            <summary>
             bind a named sampler to a texturing target.
            </summary>
            <param name="unit">
            Specifies the index of the texture unit to which the sampler is bound. 
            </param>
            <param name="sampler">
            Specifies the name of a sampler. 
            </param>
        </member>
        <member name="M:OpenGL.gl.QueryCounter(System.UInt32,System.UInt32)">
            <summary>
            record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
            </summary>
            <param name="id">
            Specify the name of a query object into which to record the GL time.
            </param>
            <param name="target">
            Specify the counter to query. target must be GL_TIMESTAMP. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribP1(System.UInt32,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertexattribute to be modified.
            </param>
            <param name="type">
            <para>For the packed commands(glVertexAttribP*), specified the typeof packing used on the data. </para>
            <para>This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, tospecify signed or unsigned data, respectively, </para>
            <para>or GL_UNSIGNED_INT_10F_11F_11F_REV tospecify floating point data. </para>
            </param>
            <param name="normalized">
            <para>>For the packed commands, if GL_TRUE,then the values are to be converted to floating point valuesby normalizing.</para>
            <para>Otherwise, they are converted directly tofloating-point values. If typeindicates a floating-pont format, then normalized value must be GL_FALSE. </para>
            </param>
            <param name="value">
            For the packed commands, specifies the new packed value tobe used for the specified vertex attribute
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribP1(System.UInt32,System.UInt32,System.Boolean,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertexattribute to be modified.
            </param>
            <param name="type">
            <para>For the packed commands(glVertexAttribP*), specified the typeof packing used on the data. </para>
            <para>This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, tospecify signed or unsigned data, respectively, </para>
            <para>or GL_UNSIGNED_INT_10F_11F_11F_REV tospecify floating point data. </para>
            </param>
            <param name="normalized">
            <para>>For the packed commands, if GL_TRUE,then the values are to be converted to floating point valuesby normalizing.</para>
            <para>Otherwise, they are converted directly tofloating-point values. If typeindicates a floating-pont format, then normalized value must be GL_FALSE. </para>
            </param>
            <param name="value">
            For the packed commands, specifies the new packed value tobe used for the specified vertex attribute
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribP2(System.UInt32,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertexattribute to be modified.
            </param>
            <param name="type">
            <para>For the packed commands(glVertexAttribP*), specified the typeof packing used on the data. </para>
            <para>This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, tospecify signed or unsigned data, respectively, </para>
            <para>or GL_UNSIGNED_INT_10F_11F_11F_REV tospecify floating point data. </para>
            </param>
            <param name="normalized">
            <para>>For the packed commands, if GL_TRUE,then the values are to be converted to floating point valuesby normalizing.</para>
            <para>Otherwise, they are converted directly tofloating-point values. If typeindicates a floating-pont format, then normalized value must be GL_FALSE. </para>
            </param>
            <param name="value">
            For the packed commands, specifies the new packed value tobe used for the specified vertex attribute
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribP2(System.UInt32,System.UInt32,System.Boolean,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertexattribute to be modified.
            </param>
            <param name="type">
            <para>For the packed commands(glVertexAttribP*), specified the typeof packing used on the data. </para>
            <para>This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, tospecify signed or unsigned data, respectively, </para>
            <para>or GL_UNSIGNED_INT_10F_11F_11F_REV tospecify floating point data. </para>
            </param>
            <param name="normalized">
            <para>>For the packed commands, if GL_TRUE,then the values are to be converted to floating point valuesby normalizing.</para>
            <para>Otherwise, they are converted directly tofloating-point values. If typeindicates a floating-pont format, then normalized value must be GL_FALSE. </para>
            </param>
            <param name="value">
            For the packed commands, specifies the new packed value tobe used for the specified vertex attribute
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribP3(System.UInt32,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertexattribute to be modified.
            </param>
            <param name="type">
            <para>For the packed commands(glVertexAttribP*), specified the typeof packing used on the data. </para>
            <para>This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, tospecify signed or unsigned data, respectively, </para>
            <para>or GL_UNSIGNED_INT_10F_11F_11F_REV tospecify floating point data. </para>
            </param>
            <param name="normalized">
            <para>>For the packed commands, if GL_TRUE,then the values are to be converted to floating point valuesby normalizing.</para>
            <para>Otherwise, they are converted directly tofloating-point values. If typeindicates a floating-pont format, then normalized value must be GL_FALSE. </para>
            </param>
            <param name="value">
            For the packed commands, specifies the new packed value tobe used for the specified vertex attribute
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribP3(System.UInt32,System.UInt32,System.Boolean,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertexattribute to be modified.
            </param>
            <param name="type">
            <para>For the packed commands(glVertexAttribP*), specified the typeof packing used on the data. </para>
            <para>This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, tospecify signed or unsigned data, respectively, </para>
            <para>or GL_UNSIGNED_INT_10F_11F_11F_REV tospecify floating point data. </para>
            </param>
            <param name="normalized">
            <para>>For the packed commands, if GL_TRUE,then the values are to be converted to floating point valuesby normalizing.</para>
            <para>Otherwise, they are converted directly tofloating-point values. If typeindicates a floating-pont format, then normalized value must be GL_FALSE. </para>
            </param>
            <param name="value">
            For the packed commands, specifies the new packed value tobe used for the specified vertex attribute
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribP4(System.UInt32,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertexattribute to be modified.
            </param>
            <param name="type">
            <para>For the packed commands(glVertexAttribP*), specified the typeof packing used on the data. </para>
            <para>This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, tospecify signed or unsigned data, respectively, </para>
            <para>or GL_UNSIGNED_INT_10F_11F_11F_REV tospecify floating point data. </para>
            </param>
            <param name="normalized">
            <para>>For the packed commands, if GL_TRUE,then the values are to be converted to floating point valuesby normalizing.</para>
            <para>Otherwise, they are converted directly tofloating-point values. If typeindicates a floating-pont format, then normalized value must be GL_FALSE. </para>
            </param>
            <param name="value">
            For the packed commands, specifies the new packed value tobe used for the specified vertex attribute
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribP4(System.UInt32,System.UInt32,System.Boolean,System.UInt32[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertexattribute to be modified.
            </param>
            <param name="type">
            <para>For the packed commands(glVertexAttribP*), specified the typeof packing used on the data. </para>
            <para>This parameter must be GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV, tospecify signed or unsigned data, respectively, </para>
            <para>or GL_UNSIGNED_INT_10F_11F_11F_REV tospecify floating point data. </para>
            </param>
            <param name="normalized">
            <para>>For the packed commands, if GL_TRUE,then the values are to be converted to floating point valuesby normalizing.</para>
            <para>Otherwise, they are converted directly tofloating-point values. If typeindicates a floating-pont format, then normalized value must be GL_FALSE. </para>
            </param>
            <param name="value">
            For the packed commands, specifies the new packed value tobe used for the specified vertex attribute
            </param>
        </member>
        <member name="M:OpenGL.gl.GetQueryIndexed(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return parameters of an indexed query object target.
            </summary>
            <param name="target">
            Specifies a query object target.
            Must be GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED_CONSERVATIVE GL_PRIMITIVES_GENERATED,
            GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, GL_TIME_ELAPSED, or GL_TIMESTAMP. 
            </param>
            <param name="index">
            Specifies the index of the query object target. 
            </param>
            <param name="pname">
            Specifies the index of the query object target. 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PatchParameter(System.UInt32,System.Single[])">
            <summary>
            specifies the parameters for patch primitives.
            </summary>
            <param name="pname">
            Specifies the name of the parameter to set. 
            The symbolc constants GL_PATCH_VERTICES, GL_PATCH_DEFAULT_OUTER_LEVEL, and GL_PATCH_DEFAULT_INNER_LEVEL are accepted. 
            </param>
            <param name="values">
            Specifies the address of an array containing the new values for the parameter given by pname. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PatchParameter(System.UInt32,System.Int32)">
            <summary>
            specifies the parameters for patch primitives.
            </summary>
            <param name="pname">
            Specifies the name of the parameter to set. 
            The symbolc constants GL_PATCH_VERTICES, GL_PATCH_DEFAULT_OUTER_LEVEL, and GL_PATCH_DEFAULT_INNER_LEVEL are accepted. 
            </param>
            <param name="value">
             Specifies the new value for the parameter given by pname.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetActiveSubroutineName(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            query the name of an active shader subroutine.
            </summary>
            <param name="program">
            Specifies the name of the program containing the subroutine. 
            </param>
            <param name="shadertype">
            Specifies the shader stage from which to query the subroutine name. 
            </param>
            <param name="index">
            Specifies the index of the shader subroutine uniform. 
            </param>
            <param name="bufsize">
            Specifies the size of the buffer whose address is given in name. 
            </param>
            <param name="length">
            Specifies the address of a variable which is to receive the length of the shader subroutine uniform name. 
            </param>
            <param name="name">
            Specifies the address of an array into which the name of the shader subroutine uniform will be written. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetActiveSubroutineUniformName(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            query the name of an active shader subroutine uniform
            </summary>
            <param name="program">
            Specifies the name of the program containing the subroutine. 
            </param>
            <param name="shadertype">
            Specifies the shader stage from which to query for the subroutine parameter.
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER,
            GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="index">
            Specifies the index of the shader subroutine uniform. 
            </param>
            <param name="bufsize">
            Specifies the size of the buffer whose address is given in name.
            </param>
            <param name="length">
            Specifies the address of a variable into which is written the number of characters copied into name. 
            </param>
            <param name="name">
            Specifies the address of a buffer that will receive the name of the specified shader subroutine uniform. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetActiveSubroutineUniform(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query a property of an active shader subroutine uniform.
            </summary>
            <param name="program">
            Specifies the name of the program containing the subroutine.
            </param>
            <param name="shadertype">
            Specifies the shader stage from which to query for the subroutine parameter. 
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, 
            GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="index">
            Specifies the index of the shader subroutine uniform. 
            </param>
            <param name="pname">
            Specifies the parameter of the shader subroutine uniform to query. 
            pname must be GL_NUM_COMPATIBLE_SUBROUTINES, GL_COMPATIBLE_SUBROUTINES, GL_UNIFORM_SIZE or GL_UNIFORM_NAME_LENGTH. 
            </param>
            <param name="values">
            Specifies the address of a into which the queried value or values will be placed. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetProgramStage(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve properties of a program object corresponding to a specified shader stage.
            </summary>
            <param name="program">
            Specifies the name of the program containing shader stage.
            </param>
            <param name="shadertype">
            Specifies the shader stage from which to query for the subroutine parameter.
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER,
            GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="pname">
            Specifies the parameter of the shader to query. 
            pname must be GL_ACTIVE_SUBROUTINE_UNIFORMS, GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS, 
            GL_ACTIVE_SUBROUTINES, GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH, or GL_ACTIVE_SUBROUTINE_MAX_LENGTH. 
            </param>
            <param name="values">
            Specifies the address of a variable into which the queried value or values will be placed. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetUniformSubroutine(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            retrieve the value of a subroutine uniform of a given shader stage of the current program.
            </summary>
            <param name="shadertype">
            Specifies the shader stage from which to query for subroutine uniform index. 
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER,
            GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="location">
            Specifies the location of the subroutine uniform. 
            </param>
            <param name="Params">
            Specifies the address of a variable to receive the value or values of the subroutine uniform. 
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformSubroutines(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            load active subroutine uniforms.
            </summary>
            <param name="shadertype">
            Specifies the shader stage from which to query for subroutine uniform index. 
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER,
            GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="count">
             Specifies the number of uniform indices stored in indices.
            </param>
            <param name="indices">
            Specifies the address of an array holding the indices to load into the shader subroutine variables. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetUniform(System.UInt32,System.Int32,System.Double[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform1(System.Int32,System.Double)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform1(System.Int32,System.Int32,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the vector (Uniform*v) commands, specifies the number of elements that are to be modified.
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform2(System.Int32,System.Double,System.Double)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform2(System.Int32,System.Int32,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the vector (Uniform*v) commands, specifies the number of elements that are to be modified.
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform3(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform3(System.Int32,System.Int32,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the vector (Uniform*v) commands, specifies the number of elements that are to be modified.
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform4(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
            <param name="w">
            For the scalar commands, specifies the new value to be used for the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.Uniform4(System.Int32,System.Int32,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the vector (Uniform*v) commands, specifies the number of elements that are to be modified.
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix2(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix2x3(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix2x4(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix3(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix3x2(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix3x4(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix4(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix4x2(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.UniformMatrix4x3(System.Int32,System.Int32,System.Boolean,System.Double[])">
            <summary>
            Specify the value of a uniform variable for the current program object.
            </summary>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="count">
            For the matrix(UniformMatrix*) commands, specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable. 
            </param>
            <param name="value">
            For the vector and matrix commands,
            specifies a pointer to an array of count values that will be used to update the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawElementsIndirect(System.UInt32,System.UInt32,OpenGL.DrawElementsIndirectCommand@)">
            <summary>
            render indexed primitives from array data, taking parameters from memory
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY,
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, 
            GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted. 
            </param>
            <param name="type">
            Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding.
            </param>
            <param name="indirect">
            Specifies the address of a structure containing the draw parameters. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawArraysIndirect(System.UInt32,OpenGL.DrawArraysIndirectCommand@)">
            <summary>
            render primitives from array data, taking parameters from memory
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, 
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY,
            GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted. 
            </param>
            <param name="indirect">
            
            </param>
        </member>
        <member name="M:OpenGL.gl.BlendEquationSeparate(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            set the RGB blend equation and the alpha blend equation separately.
            </summary>
            <param name="buf">
            <para>for BlendEquationSeparatei, </para>
            <para>specifies the index of the draw buffer for which to set the blend equations. </para>
            </param>
            <param name="modeRGB">
            <para>specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined.</para>
            <para>It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX. </para>
            </param>
            <param name="modeAlpha">
            <para>specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. </para>
            <para>It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.BlendEquation(System.UInt32,System.UInt32)">
            <summary>
            specify the equation used for both the RGB blend equation and the Alpha blend equation.
            </summary>
            <param name="buf">
            for BlendEquationi, specifies the index of the draw buffer for which to set the blend equation. 
            </param>
            <param name="mode">
            <para> specifies how source and destination colors are combined.</para>
            <para>It must be GL_FUNC_ADD, GL_FUNC_SUBTRACT, GL_FUNC_REVERSE_SUBTRACT, GL_MIN, GL_MAX. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.BlendFuncSeparate(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            specify pixel arithmetic for RGB and alpha components separately.
            </summary>
            <param name="buf">
            For BlendFuncSeparatei, specifies the index of the draw buffer for which to set the blend functions. 
            </param>
            <param name="srcRGB">
            Specifies how the red, green, and blue blending factors are computed. The initial value is GL_ONE. 
            </param>
            <param name="dstRGB">
            <para>Specifies how the red, green, and blue destination blending factors are computed. </para>
            <para>The initial value is GL_ZERO. </para>
            </param>
            <param name="srcAlpha">
            Specified how the alpha source blending factor is computed. The initial value is GL_ONE.
            </param>
            <param name="dstAlpha">
            Specified how the alpha destination blending factor is computed. The initial value is GL_ZERO. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BlendFunc(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            specify pixel arithmetic.
            </summary>
            <param name="buf">
            For BlendFunci, specifies the index of the draw buffer for which to set the blend function.
            </param>
            <param name="src">
            <para>Specifies how the red, green, blue, and alpha source blending factors are computed. </para>
            <para>The initial value is GL_ONE. </para>
            </param>
            <param name="dst">
            <para>Specifies how the red, green, blue, and alpha destination blending factors are computed. </para>
            <para>The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR,</para>
            <para>GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA,</para>
            <para>GL_ONE_MINUS_DST_ALPHA. GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA,</para>
            <para>and GL_ONE_MINUS_CONSTANT_ALPHA. The initial value is GL_ZERO. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.MinSampleShading(System.Single)">
            <summary>
            specifies minimum rate at which sample shaing takes place.
            </summary>
            <param name="value">
            Specifies the rate at which samples are shaded within each covered pixel. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetSubroutineUniformLocation(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            retrieve the location of a subroutine uniform of a given shader stage within a program.
            </summary>
            <param name="program">
            Specifies the name of the program containing shader stage. 
            </param>
            <param name="shadertype">
            Specifies the shader stage from which to query for subroutine uniform index.
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, GL_TESS_EVALUATION_SHADER, 
            GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="name">
            Specifies the name of the subroutine uniform whose index to query. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.GetSubroutineIndex(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            retrieve the index of a subroutine uniform of a given shader stage within a program.
            </summary>
            <param name="program">
            Specifies the name of the program containing shader stage.
            </param>
            <param name="shadertype">
            Specifies the shader stage from which to query for subroutine uniform index. 
            shadertype must be one of GL_VERTEX_SHADER, GL_TESS_CONTROL_SHADER, 
            GL_TESS_EVALUATION_SHADER, GL_GEOMETRY_SHADER or GL_FRAGMENT_SHADER. 
            </param>
            <param name="name">
            Specifies the name of the subroutine uniform whose index to query. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.BindTransformFeedback(System.UInt32,System.UInt32)">
            <summary>
            bind a transform feedback object.
            </summary>
            <param name="target">
            Specifies the target to which to bind the transform feedback object id. target must be GL_TRANSFORM_FEEDBACK. 
            </param>
            <param name="id">
            Specifies the name of a transform feedback object reserved by GenTransformFeedbacks. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DeleteTransformFeedbacks(System.Int32,System.UInt32[])">
            <summary>
            delete transform feedback objects.
            </summary>
            <param name="n">
            Specifies the number of transform feedback objects to delete. 
            </param>
            <param name="ids">
            Specifies an array of names of transform feedback objects to delete. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GenTransformFeedbacks(System.Int32,System.UInt32[])">
            <summary>
            reserve transform feedback object names.
            </summary>
            <param name="n">
            Specifies the number of transform feedback object names to reserve. 
            </param>
            <param name="ids">
            Specifies an array of into which the reserved names will be written. 
            </param>
        </member>
        <member name="M:OpenGL.gl.IsTransformFeedback(System.UInt32)">
            <summary>
            determine if a name corresponds to a transform feedback object.
            </summary>
            <param name="id">
            Specifies a value that may be the name of a transform feedback object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.PauseTransformFeedback">
            <summary>
            pause transform feedback operations.
            </summary>
        </member>
        <member name="M:OpenGL.gl.ResumeTransformFeedback">
            <summary>
            resume transform feedback operations
            </summary>
        </member>
        <member name="M:OpenGL.gl.DrawTransformFeedbackStream(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            render primitives using a count derived from a specifed stream of a transform feedback object.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render.
            
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, 
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, 
            GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted. 
            </param>
            <param name="id">
            Specifies the name of a transform feedback object from which to retrieve a primitive count. 
            </param>
            <param name="stream">
            Specifies the index of the transform feedback stream from which to retrieve a primitive count. 
            </param>
        </member>
        <member name="M:OpenGL.gl.EndQueryIndexed(System.UInt32,System.UInt32)">
            <summary>
            delimit the boundaries of a query object on an indexed target
            </summary>
            <param name="target">
            Specifies the target type of query object established between BeginQueryIndexed and the subsequent EndQueryIndexed. 
            The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_PRIMITIVES_GENERATED, 
            GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED. 
            </param>
            <param name="index">
            Specifies the index of the query target upon which to begin the query. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BeginQueryIndexed(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            delimit the boundaries of a query object on an indexed target
            </summary>
            <param name="target">
            Specifies the target type of query object established between BeginQueryIndexed and the subsequent EndQueryIndexed. 
            The symbolic constant must be one of GL_SAMPLES_PASSED, GL_ANY_SAMPLES_PASSED, GL_PRIMITIVES_GENERATED, 
            GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN, or GL_TIME_ELAPSED. 
            </param>
            <param name="index">
            Specifies the index of the query target upon which to begin the query. 
            </param>
            <param name="id">
            Specifies the name of a query object. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawTransformFeedback(System.UInt32,System.UInt32)">
            <summary>
            render primitives using a count derived from a transform feedback object.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY,
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY,
            GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted. 
            </param>
            <param name="id">
            Specifies the name of a transform feedback object from which to retrieve a primitive count. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearDepth(System.Single)">
            <summary>
            specify the clear value for the depth buffer
            </summary>
            <param name="d">
            Specifies the depth value used when the depth buffer is cleared. Theinitial value is 1. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DepthRangeArray(System.UInt32,System.Int32,System.Double[])">
            <summary>
            specify mapping of depth values from normalized device coordinates to window coordinates for a specified set of viewports
            </summary>
            <param name="first">
            Specifies the index of the first viewport whose depth range to update. 
            </param>
            <param name="count">
            Specifies the number of viewports whose depth range to update. 
            </param>
            <param name="v">
            Specifies the address of an array containing the near and far values for the depth range of each modified viewport. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetDouble(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="target">
            Specifies the parameter value to be returned for indexed versions of Get. 
            The symbolic constants in the list below are accepted. 
            </param>
            <param name="index">
            Specifies the index of the particular element being queried. 
            </param>
            <param name="data">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetFloat(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="target">
            Specifies the parameter value to be returned for indexed versions of Get. 
            The symbolic constants in the list below are accepted. 
            </param>
            <param name="index">
            Specifies the index of the particular element being queried. 
            </param>
            <param name="data">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ScissorArray(System.UInt32,System.Int32,System.Int32[])">
            <summary>
            define the scissor box for multiple viewports.
            </summary>
            <param name="first">
            Specifies the index of the first viewport whose scissor box to modify. 
            </param>
            <param name="count">
            Specifies the number of scissor boxes to modify. 
            </param>
            <param name="v">
            Specifies the address of an array containing the left, bottom, width and height of each scissor box, in that order. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ScissorIndexed(System.UInt32,System.Int32[])">
            <summary>
            define the scissor box for a specific viewport.
            </summary>
            <param name="index">
            Specifies the index of the viewport whose scissor box to modify. 
            </param>
            <param name="v">
            For ScissorIndexedv, specifies the address of an array containing the left, 
            bottom, width and height of each scissor box, in that order. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ViewportArray(System.UInt32,System.Int32,System.Single[])">
            <summary>
            set multiple viewports.
            </summary>
            <param name="first">
            Specify the first viewport to set. 
            </param>
            <param name="count">
            Specify the number of viewports to set. 
            </param>
            <param name="v">
            Specify the address of an array containing the viewport parameters. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ViewportIndexed(System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            set a specified viewport.
            </summary>
            <param name="index">
            Specify the first viewport to set. 
            </param>
            <param name="x">
            For ViewportIndexedf, specifies the lower left corner of the viewport rectane, in pixels. 
            The initial value is (0,0). 
            </param>
            <param name="y">
            For ViewportIndexedf, specifies the lower left corner of the viewport rectane, in pixels. 
            The initial value is (0,0). 
            </param>
            <param name="w">
            For ViewportIndexedf, specifies the width and height of the viewport. 
            When a GL context is first attached to a window, width and height are set to the dimensions of that window. 
            </param>
            <param name="h">
            For ViewportIndexedf, specifies the width and height of the viewport. 
            When a GL context is first attached to a window, width and height are set to the dimensions of that window. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ViewportIndexed(System.UInt32,System.Single[])">
            <summary>
            set a specified viewport.
            </summary> 
            <param name="index">
            Specify the first viewport to set. 
            </param>
            <param name="v">
            For ViewportIndexedfv, specifies the address of an array containing the viewport parameters. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetVertexAttribL(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            Return a generic vertex attribute parameter.
            </summary>
            <param name="index">
            Specifies the generic vertex attribute parameter to be queried.
            </param>
            <param name="pname">
            Specifies the symbolic name of the vertex attribute parameter to be queried. 
            Accepted values are GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, GL_VERTEX_ATTRIB_ARRAY_ENABLED, 
            GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, GL_VERTEX_ATTRIB_ARRAY_TYPE, 
            GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_CURRENT_VERTEX_ATTRIB.
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribL1(System.UInt32,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribL1(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribL2(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribL3(System.UInt32,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
            <param name="z">
             For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribL3(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribL4(System.UInt32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
            <param name="z">
             For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
            <param name="w">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribL4(System.UInt32,System.Double[])">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="v">
            For the vector commands (VertexAttrib*v), specifies a pointer to an array of values to be used for the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CreateShaderProgram(System.UInt32,System.Int32,System.IntPtr[])">
            <summary>
            create a stand-alone program from an array of null-terminated source code strings.
            </summary>
            <param name="type">
            Specifies the type of shader to create. 
            </param>
            <param name="count">
            Specifies the number of source code strings in the array strings. 
            </param>
            <param name="strings">
            Specifies the address of an array of pointers to source code strings from which to create the program object. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.GetProgramPipelineInfoLog(System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            retrieve the info log string from a program pipeline object.
            </summary>
            <param name="pipeline">
            Specifies the name of a program pipeline object from which to retrieve the info log. 
            </param>
            <param name="bufSize">
            Specifies the maximum number of characters, including the null terminator, that may be written into infoLog. 
            </param>
            <param name="length">
            Specifies the address of a variable into which will be written the number of characters written into infoLog. 
            </param>
            <param name="infoLog">
            Specifies the address of an array of characters into which will be written the info log for pipeline. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetProgramPipeline(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve properties of a program pipeline object.
            </summary>
            <param name="pipeline">
            Specifies the name of a program pipeline object whose parameter retrieve. 
            </param>
            <param name="pname">
            Specifies the name of the parameter to retrieve. 
            </param>
            <param name="Params">
            Specifies the address of a variable into which will be written the value or values of pname for pipeline. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform1(System.UInt32,System.Int32,System.Double)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform1(System.UInt32,System.Int32,System.Int32,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform1(System.UInt32,System.Int32,System.Single)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform1(System.UInt32,System.Int32,System.Int32,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform1(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform1(System.UInt32,System.Int32,System.Int32,System.Int32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform1(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform1(System.UInt32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform2(System.UInt32,System.Int32,System.Double,System.Double)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform2(System.UInt32,System.Int32,System.Int32,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform2(System.UInt32,System.Int32,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform2(System.UInt32,System.Int32,System.Int32,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform2(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform2(System.UInt32,System.Int32,System.Int32,System.Int32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform2(System.UInt32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform2(System.UInt32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform3(System.UInt32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform3(System.UInt32,System.Int32,System.Int32,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform3(System.UInt32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform3(System.UInt32,System.Int32,System.Int32,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform3(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform3(System.UInt32,System.Int32,System.Int32,System.Int32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform3(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform3(System.UInt32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform4(System.UInt32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="w">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform4(System.UInt32,System.Int32,System.Int32,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform4(System.UInt32,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="w">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform4(System.UInt32,System.Int32,System.Int32,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform4(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="w">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform4(System.UInt32,System.Int32,System.Int32,System.Int32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform4(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Specify the value of a uniform variable for a specified program object.
            </summary>
            <param name="program">
            Specifies the handle of the program containing the uniform variable to be modified.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="z">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
            <param name="w">
            For the scalar commands, specifies the new value to be used for the specified uniform variable. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniform4(System.UInt32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the vector commands (ProgramUniform*v), specifies the number of elements that are to be modified. 
            This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array. 
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix2(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix2(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix2x3(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix2x3(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix2x4(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix2x4(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix3(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix3(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix3x2(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix3x2(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix3x4(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix3x4(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix4(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix4(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix4x2(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix4x2(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix4x3(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Double[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramUniformMatrix4x3(System.UInt32,System.Int32,System.Int32,System.Boolean,System.Single[])">
             <summary>
             Specify the value of a uniform variable for a specified program object.
             </summary>
             <param name="program">
             Specifies the handle of the program containing the uniform variable to be modified.
             </param>
             <param name="location">
             Specifies the location of the uniform variable to be modified.
             </param>
            <param name="count">
            For the matrix commands(ProgramUniformMatrix*), specifies the number of matrices that are to be modified.
            This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices. 
            </param>
            <param name="transpose">
            For the matrix commands, specifies whether to transpose the matrix as the values are loaded into the uniform variable.
            </param>
            <param name="value">
            For the vector and matrix commands, 
            specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            specify a parameter for a program object.
            </summary>
            <param name="program">
            Specifies the name of a program object whose parameter to modify. 
            </param>
            <param name="pname">
            Specifies the name of the parameter to modify. 
            </param>
            <param name="value">
            Specifies the new value of the parameter specified by pname for program. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ReleaseShaderCompiler">
            <summary>
            release resources consumed by the implementation's shader compiler
            </summary>
        </member>
        <member name="M:OpenGL.gl.GetShaderPrecisionFormat(System.UInt32,System.UInt32,System.Int32[],System.Int32@)">
            <summary>
            retrieve the range and precision for numeric formats supported by the shader compiler.
            </summary>
            <param name="shadertype">
            <para>Specifies the type of shader whose precision to query. </para>
            <para>shaderType must be GL_VERTEX_SHADER or GL_FRAGMENT_SHADER.</para>
            </param>
            <param name="precisiontype">
            Specifies the numeric format whose precision and range to query. 
            </param>
            <param name="range">
            Specifies the address of array of two integers into which encodings of the implementation's numeric range are returned. 
            </param>
            <param name="precision">
            Specifies the address of an integer into which the numeric precision of the implementation is written. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DepthRange(System.Single,System.Single)">
            <summary>
            specify mapping of depth values from normalized device coordinates to window coordinates.
            </summary>
            <param name="n">
            Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0. 
            </param>
            <param name="f">
            Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ShaderBinary(System.Int32,System.UInt32[],System.UInt32,System.IntPtr,System.Int32)">
            <summary>
            load pre-compiled shader binaries.
            </summary>
            <param name="count">
            Specifies the number of shader object handles contained in shaders. 
            </param>
            <param name="shaders">
            Specifies the address of an array of shader handles into which to load pre-compiled shader binaries.
            </param>
            <param name="binaryformat">
            Specifies the format of the shader binaries contained in binary. 
            </param>
            <param name="binary">
            <para> can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            <para>Specifies the address of an array of bytes containing pre-compiled binary shader code.</para>
            <para> can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
            <param name="length">
            Specifies the length of the array whose address is given in binary. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetProgramBinary(System.UInt32,System.Int32,System.Int32@,System.UInt32@,System.IntPtr)">
            <summary>
            return a binary representation of a program object's compiled and linked executable source.
            </summary>
            <param name="program">
            Specifies the name of a program object whose binary representation to retrieve. 
            </param>
            <param name="bufSize">
            Specifies the size of the buffer whose address is given by binary. 
            </param>
            <param name="length">
            Specifies the address of a variable to receive the number of bytes written into binary. 
            </param>
            <param name="binaryFormat">
            Specifies the address of a variable to receive a token indicating the format of the binary data returned by the GL. 
            </param>
            <param name="binary">
            Specifies the address an array into which the GL will return program's binary representation. 
            </param>
        </member>
        <member name="M:OpenGL.gl.UseProgramStages(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            bind stages of a program object to a program pipeline.
            </summary>
            <param name="pipeline">
            Specifies the program pipeline object to which to bind stages from program.
            </param>
            <param name="stages">
             Specifies a set of program stages to bind to the program pipeline object.
            </param>
            <param name="program">
            Specifies the program object containing the shader executables to use in pipeline. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ActiveShaderProgram(System.UInt32,System.UInt32)">
            <summary>
            set the active program object for a program pipeline object.
            </summary>
            <param name="pipeline">
            Specifies the program pipeline object to set the active program object for. 
            </param>
            <param name="program">
            Specifies the program object to set as the active program pipeline object pipeline. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindProgramPipeline(System.UInt32)">
            <summary>
            bind a program pipeline to the current context.
            </summary>
            <param name="pipeline">
            Specifies the name of the pipeline object to bind to the context. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DeleteProgramPipelines(System.Int32,System.UInt32[])">
            <summary>
            delete program pipeline objects.
            </summary>
            <param name="n">
            Specifies the number of program pipeline objects to delete.
            </param>
            <param name="pipelines">
            Specifies an array of names of program pipeline objects to delete. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GenProgramPipelines(System.Int32,System.UInt32[])">
            <summary>
            reserve program pipeline object names.
            </summary>
            <param name="n">
            Specifies the number of program pipeline object names to reserve. 
            </param>
            <param name="pipelines">
            Specifies an array of into which the reserved names will be written. 
            </param>
        </member>
        <member name="M:OpenGL.gl.IsProgramPipeline(System.UInt32)">
            <summary>
            determine if a name corresponds to a program pipeline object.
            </summary>
            <param name="pipeline">
            Specifies a value that may be the name of a program pipeline object.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.ValidateProgramPipeline(System.UInt32)">
            <summary>
            validate a program pipeline object against current GL state.
            </summary>
            <param name="pipeline">
            Specifies the name of a program pipeline object to validate. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribL2d(System.UInt32,System.Double,System.Double)">
            <summary>
            Specifies the value of a generic vertex attribute.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="x">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
            <param name="y">
            For the scalar commands, specifies the new value to be used for the specified vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribLPointer(System.UInt32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of generic vertex attribute data.
            </summary>
            <param name="index">
            Specifies the index of the generic vertex attribute to be modified.
            </param>
            <param name="size">
            Specifies the number of components per generic vertex attribute. 
            Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by VertexAttribPointer. 
            The initial value is 4.
            </param>
            <param name="type">
            Specifies the data type of each component in the array.
            The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT,
            and GL_UNSIGNED_INT are accepted by VertexAttribPointer and VertexAttribIPointer.
            </param>
            <param name="stride">
            Specifies the byte offset between consecutive generic vertex attributes. 
            If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. 
            The initial value is 0.
            </param>
            <param name="pointer">
            Specifies a offset of the first component of the first generic vertex attribute in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target.
            The initial value is 0.
            </param>
        </member>
        <member name="M:OpenGL.gl.ScissorIndexed(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            define the scissor box for a specific viewport.
            </summary>
            <param name="index">
            Specifies the index of the viewport whose scissor box to modify. 
            </param>
            <param name="left">
            Specify the coordinate of the bottom left corner of the scissor box, in pixels. 
            </param>
            <param name="bottom">
            Specify the coordinate of the bottom left corner of the scissor box, in pixels. 
            </param>
            <param name="width">
            Specify ths dimensions of the scissor box, in pixels. 
            </param>
            <param name="height">
            Specify ths dimensions of the scissor box, in pixels. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DepthRangeIndexed(System.UInt32,System.Double,System.Double)">
            <summary>
            specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport.
            </summary>
            <param name="index">
            Specifies the index of the viewport whose depth range to update. 
            </param>
            <param name="n">
            Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0. 
            </param>
            <param name="f">
            Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
            </param>
        </member>
        <member name="M:OpenGL.gl.ProgramBinary(System.UInt32,System.UInt32,System.IntPtr,System.Int32)">
            <summary>
            load a program object with a program binary.
            </summary>
            <param name="program">
             Specifies the name of a program object into which to load a program binary.
            </param>
            <param name="binaryFormat">
            Specifies the format of the binary data in binary. 
            </param>
            <param name="binary">
            Specifies the address an array containing the binary to be loaded into program. 
            </param>
            <param name="length">
            Specifies the number of bytes contained in binary. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetActiveAtomicCounterBuffer(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve information about the set of active atomic counter buffers for a program.
            </summary>
            <param name="program">
            The name of a program object from which to retrieve information. 
            </param>
            <param name="bufferIndex">
            Specifies index of an active atomic counter buffer. 
            </param>
            <param name="pname">
            Specifies which parameter of the atomic counter buffer to retrieve.
            </param>
            <param name="Params">
            Specifies the address of a variable into which to write the retrieved information.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetInternalformat(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32[])">
            <summary>
             retrieve information about implementation-dependent support for internal formats.
            </summary>
            <param name="target">
            Indicates the usage of the internal format. target must be GL_RENDERBUFFER.
            </param>
            <param name="internalformat">
            Specifies the internal format about which to retrieve information.
            </param>
            <param name="pname">
            Specifies the type of information to query.
            </param>
            <param name="bufSize">
            Specifies the maximum number of integers that may be written to params by the function.
            </param>
            <param name="Params">
            Specifies the address of a variable into which to write the retrieved information.
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawArraysInstancedBaseInstance(System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32)">
             <summary>
             draw multiple instances of a range of elements with offset applied to instanced attributes
             </summary>
             <param name="mode">
            <para>Specifies what kind of primitives to render.</para>
            <para>Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP,</para>
            <para>GL_TRIANGLE_FAN, GL_TRIANGLES GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, </para>
            <para>GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.</para>
             </param>
             <param name="first">
             Specifies the starting index in the enabled arrays. 
             </param>
             <param name="count">
             Specifies the number of indices to be rendered.
             </param>
             <param name="primcount">
             Specifies the number of instances of the specified range of indices to be rendered. 
             </param>
             <param name="baseinstance">
             Specifies the base instance for use in fetching instanced vertex attributes. 
             </param>
        </member>
        <member name="M:OpenGL.gl.DrawElementsInstancedBaseInstance(System.UInt32,System.Int32,System.UInt32,System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            draw multiple instances of a set of elements with offset applied to instanced attributes.
            </summary>
            <param name="mode">
            <para>Specifies what kind of primitives to render. </para>
            <para>Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, </para>
            <para>GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, </para>
            <para>GL_TRIANGLES_ADJACENCY and GL_PATCHES are accepted. </para>
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
            <para>Specifies the type of the values in indices.</para>
            <para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. </para>
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            </param>
            <param name="primcount">
            Specifies the number of instances of the specified range of indices to be rendered.
            </param>
            <param name="baseinstance">
            Specifies the base instance for use in fetching instanced vertex attributes. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawElementsInstancedBaseVertexBaseInstance(System.UInt32,System.Int32,System.UInt32,System.IntPtr,System.Int32,System.Int32,System.UInt32)">
            <summary>
            render multiple instances of a set of primitives from array data with a per-element offset.
            </summary>
            <param name="mode">
            <para>Specifies what kind of primitives to render. </para>
            <para>Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP,</para>
            <para>GL_TRIANGLE_FAN, GL_TRIANGLES, GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY,</para>
            <para>GL_TRIANGLE_STRIP_ADJACENCY and GL_PATCHES are accepted.</para>
            </param>
            <param name="count">
            Specifies the number of elements to be rendered. 
            </param>
            <param name="type">
            <para>Specifies the type of the values in indices. </para>
            <para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. </para>
            </param>
            <param name="indices">
            Specifies a pointer to the location where the indices are stored. 
            </param>
            <param name="primcount">
            Specifies the number of instances of the indexed geometry that should be drawn. 
            </param>
            <param name="basevertex">
            Specifies a constant that should be added to each element of indices when chosing elements from the enabled vertex arrays. 
            </param>
            <param name="baseinstance">
            Specifies the base instance for use in fetching instanced vertex attributes.
            </param>
        </member>
        <member name="M:OpenGL.gl.BindImageTextures(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            bind one or more named texture images to a sequence of consecutive image units.
            </summary>
            <param name="first">
            Specifies the first image unit to which a texture is to be bound. 
            </param>
            <param name="count">
            Specifies the number of textures to bind. 
            </param>
            <param name="textures">
            Specifies the address of an array of names of existing texture objects. 
            </param>
        </member>
        <member name="M:OpenGL.gl.MemoryBarrier(System.UInt32)">
            <summary>
            defines a barrier ordering memory transactions.
            </summary>
            <param name="barriers">
            Specifies the barriers to insert. 
            For MemoryBarrier, must be a bitwise combination of any of GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT,
            GL_ELEMENT_ARRAY_BARRIER_BIT, GL_UNIFORM_BARRIER_BIT, GL_TEXTURE_FETCH_BARRIER_BIT, 
            GL_SHADER_IMAGE_ACCESS_BARRIER_BIT, GL_COMMAND_BARRIER_BIT, GL_PIXEL_BUFFER_BARRIER_BIT, 
            GL_TEXTURE_UPDATE_BARRIER_BIT, GL_BUFFER_UPDATE_BARRIER_BIT, GL_FRAMEBUFFER_BARRIER_BIT, 
            GL_TRANSFORM_FEEDBACK_BARRIER_BIT, GL_ATOMIC_COUNTER_BARRIER_BIT, or GL_SHADER_STORAGE_BARRIER_BIT.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexStorage1D(System.UInt32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            simultaneously specify storage for all levels of a one-dimensional texture.
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for TexStorage1D.
            Must be one of GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D. 
            </param>
            <param name="levels">
            Specifies the texture object name for TextureStorage1D. 
            The effective target of texture must be one of the valid non-proxy target values above. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexStorage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture.
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for TexStorage2D.
            Must be one of GL_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_2D,
            GL_PROXY_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_RECTANGLE, or GL_PROXY_TEXTURE_CUBE_MAP. 
            </param>
            <param name="levels">
            Specify the number of texture levels. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexStorage3D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            simultaneously specify storage for all levels of a three-dimensional, 
            two-dimensional array or cube-map array texture
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for TexStorage3D. 
            Must be one of GL_TEXTURE_3D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_CUBE_MAP_ARRAY, GL_PROXY_TEXTURE_3D, 
            GL_PROXY_TEXTURE_2D_ARRAY or GL_PROXY_TEXTURE_CUBE_MAP_ARRAY. 
            </param>
            <param name="levels">
            Specify the number of texture levels. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels. 
            </param>
            <param name="depth">
            Specifies the depth of the texture, in texels. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindImageTexture(System.UInt32,System.UInt32,System.Int32,System.Boolean,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            bind a level of a texture to an image unit.
            </summary>
            <param name="unit">
            Specifies the index of the image unit to which to bind the texture .
            </param>
            <param name="texture">
            Specifies the name of the texture to bind to the image unit. 
            </param>
            <param name="level">
            Specifies the level of the texture that is to be bound. 
            </param>
            <param name="layered">
            Specifies whether a layered texture binding is to be established. 
            </param>
            <param name="layer">
            If layered is GL_FALSE, specifies the layer of texture to be bound to the image unit. Ignored otherwise. 
            </param>
            <param name="access">
            Specifies a token indicating the type of access that will be performed on the image.
            </param>
            <param name="format">
            Specifies the format that the elements of the image will be treated as for the purposes of formatted stores. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawTransformFeedbackInstanced(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            render multiple instances of primitives using a count derived from a transform feedback object
            </summary>
            <param name="mode">
            <para>Specifies what kind of primitives to render.Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, GL_LINES_ADJACENCY,</para>
            <para>GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHESare accepted.</para>
            </param>
            <param name="id">
            Specifies the name of a transform feedback object from which to retrieve a primitive count. 
            </param>
            <param name="instancecount">
            Specifies the number of instances of the geometry to render. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawTransformFeedbackStreamInstanced(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            render multiple instances of primitives using a count derived from a specifed stream of a transform feedback object
            </summary>
            <param name="mode">
            <para>Specifies what kind of primitives to render.Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, </para>
            <para>GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, GL_TRIANGLES_ADJACENCY, and GL_PATCHESare accepted. </para>
            </param>
            <param name="id">
            Specifies the name of a transform feedback object from which to retrieve a primitive count.
            </param>
            <param name="stream">
            Specifies the index of the transform feedback stream from which to retrieve a primitive count. 
            </param>
            <param name="instancecount">
            Specifies the number of instances of the geometry to render. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindVertexBuffer(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            bind a buffer to a vertex buffer bind point.
            </summary>
            <param name="bindingindex">
            The index of the vertex buffer binding point to which to bind the buffer.
            </param>
            <param name="buffer">
            The name of a buffer to bind to the vertex buffer binding point.
            </param>
            <param name="offset">
            The offset of the first element of the buffer.
            </param>
            <param name="stride">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexBufferRange(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            attach a range of a buffer object's data store to a buffer texture object.
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for TexBufferRange. Must be GL_TEXTURE_BUFFER. 
            </param>
            <param name="internalformat">
            Specifies the internal format of the data in the store belonging to buffer. 
            </param>
            <param name="buffer">
            Specifies the name of the buffer object whose storage to attach to the active buffer texture. 
            </param>
            <param name="offset">
            Specifies the offset of the start of the range of the buffer's data store to attach. 
            </param>
            <param name="size">
            Specifies the size of the range of the buffer's data store to attach. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetProgramResource(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32[],System.Int32,System.Int32@,System.Int32[])">
            <summary>
            retrieve values for multiple properties of a sine active resource within a program object.
            </summary>
            <param name="program">
            The name of a program object whose resources to query. 
            </param>
            <param name="programInterface">
            A token identifying the interface within program containing the resource named name. 
            </param>
            <param name="index">
            
            </param>
            <param name="propCount">
            
            </param>
            <param name="props">
            
            </param>
            <param name="bufSize">
            
            </param>
            <param name="length">
            
            </param>
            <param name="Params">
            
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiDrawArraysIndirect(System.UInt32,OpenGL.DrawArraysIndirectCommand@,System.Int32,System.Int32)">
            <summary>
            render multiple sets of primitives from array data, taking parameters from memory.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render. 
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY,
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, 
            GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted. 
            </param>
            <param name="indirect">
            Specifies the address of an array of structures containing the draw parameters. 
            </param>
            <param name="primcount">
            Specifies the the number of elements in the array of draw parameter structures. 
            </param>
            <param name="stride">
            Specifies the distance in basic machine units between elements of the draw parameter array.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultiDrawElementsIndirect(System.UInt32,System.UInt32,OpenGL.DrawElementsIndirectCommand@,System.Int32,System.Int32)">
            <summary>
            render indexed primitives from array data, taking parameters from memory.
            </summary>
            <param name="mode">
            Specifies what kind of primitives to render.
            Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_LINE_STRIP_ADJACENCY, 
            GL_LINES_ADJACENCY, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_TRIANGLE_STRIP_ADJACENCY, 
            GL_TRIANGLES_ADJACENCY, and GL_PATCHES are accepted.
            </param>
            <param name="type">
            Specifies the type of data in the buffer bound to the GL_ELEMENT_ARRAY_BUFFER binding. 
            </param>
            <param name="indirect">
            Specifies the address of a structure containing an array of draw parameters. 
            </param>
            <param name="primcount">
            Specifies the number of elements in the array addressed by indirect. 
            </param>
            <param name="stride">
            Specifies the distance in basic machine units between elements of the draw parameter array. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetProgramInterface(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query a property of an interface in a program.
            </summary>
            <param name="program">
            The name of a program object whose interface to query. 
            </param>
            <param name="programInterface">
            A token identifying the interface within program to query.
            </param>
            <param name="pname">
            The name of the parameter within programInterface to query. 
            </param>
            <param name="Params">
            The address of a variable to retrieve the value of pname for the program interface. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetProgramResourceName(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Byte[])">
            <summary>
            query the name of an indexed resource within a program.
            </summary>
            <param name="program">
            The name of a program object whose resources to query. 
            </param>
            <param name="programInterface">
            A token identifying the interface within program containing the indexed resource. 
            </param>
            <param name="index">
            The index of the resource within programInterface of program. 
            </param>
            <param name="bufSize">
            The size of the character array whose address is given by name. 
            </param>
            <param name="length">
            The address of a variable which will receive the length of the resource name. 
            </param>
            <param name="name">
            The address of a character array into which will be written the name of the resource. 
            </param>
        </member>
        <member name="M:OpenGL.gl.InvalidateBufferSubData(System.UInt32,System.Int32,System.Int32)">
            <summary>
            invalidate a region of a buffer object's data store.
            </summary>
            <param name="buffer">
            The name of a buffer object, a subrange of whose data store to invalidate.
            </param>
            <param name="offset">
            The offset within the buffer's data store of the start of the range to be invalidated. 
            </param>
            <param name="length">
            The length of the range within the buffer's data store to be invalidated. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetFramebufferParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query a named parameter of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer object is bound for GetFramebufferParameteriv. 
            </param>
            <param name="pname">
            Specifies the parameter of the framebuffer object to query. 
            </param>
            <param name="Params">
            Returns the value of parameter pname for the framebuffer object. 
            </param>
        </member>
        <member name="M:OpenGL.gl.FramebufferParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set a named parameter of a framebuffer object.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer is bound for FramebufferParameteri. 
            </param>
            <param name="pname">
            Specifies the framebuffer parameter to be modified. 
            </param>
            <param name="param">
            The new value for the parameter named pname. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetDebugMessageLog(System.UInt32,System.Int32,System.UInt32[],System.UInt32[],System.UInt32[],System.UInt32[],System.Int32[],System.Byte[])">
            <summary>
            retrieve messages from the debug message log.
            </summary>
            <param name="count">
            The number of debug messages to retrieve from the log. 
            </param>
            <param name="bufSize">
            The size of the buffer whose address is given by messageLog. 
            </param>
            <param name="sources">
             The array of variables to receive the sources of the retrieved messages.
            </param>
            <param name="types">
            The array of variables to receive the types of the retrieved messages. 
            </param>
            <param name="ids">
            The array of unsigned integers to receive the ids of the retrieved messages. 
            </param>
            <param name="severities">
            The array of variables to receive the severites of the retrieved messages. 
            </param>
            <param name="lengths">
            The array of variables to receive the lengths of the received messages.
            </param>
            <param name="messageLog">
            The array of characters that will receive the messages. 
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.gl.DispatchComputeIndirect(System.Int32)">
            <summary>
            launch one or more compute work groups using parameters stored in a buffer.
            </summary>
            <param name="indirect">
            The offset into the buffer object currently bound to the GL_DISPATCH_INDIRECT_BUFFER buffer target at which the dispatch parameters are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearBufferSubData(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            fill all or part of buffer object's data store with a fixed value
            </summary>
            <param name="target">
             <para>Specifies the target to which the buffer object is bound for ClearBufferSubData,</para>
             <para>which must be one of the buffer binding targets in the following table: </para>
             <para> GL_ARRAY_BUFFER ,GL_ATOMIC_COUNTER_BUFFER,GL_COPY_READ_BUFFER,GL_COPY_WRITE_BUFFER ,</para>
             <para>GL_DISPATCH_INDIRECT_BUFFER,GL_DRAW_INDIRECT_BUFFER ,GL_ELEMENT_ARRAY_BUFFER ,</para>
             <para>GL_PIXEL_PACK_BUFFER ,GL_PIXEL_UNPACK_BUFFER,GL_QUERY_BUFFER ,GL_SHADER_STORAGE_BUFFER ,</para>
             <para>GL_TEXTURE_BUFFER ,GL_TRANSFORM_FEEDBACK_BUFFER,GL_UNIFORM_BUFFER .</para>
            </param>
            <param name="internalformat">
            The internal format with which the data will be stored in the buffer object. 
            </param>
            <param name="offset">
            The offset in basic machine units into the buffer object's data store at which to start filling. 
            </param>
            <param name="size">
            The size in basic machine units of the range of the data store to fill. 
            </param>
            <param name="format">
            The format of the data in memory addressed by data. 
            </param>
            <param name="type">
            The type of the data in memory addressed by data.
            </param>
            <param name="data">
            The address of a memory location storing the data to be replicated into the buffer's data store. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearBufferData(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            fill a buffer object's data store with a fixed value.
            </summary>
            <param name="target">
            <para>Specifies the target to which the buffer object is bound for ClearBufferData, </para>
            <para>which must must be one of the buffer binding targets in the following table: </para>
            <para>GL_ARRAY_BUFFER ,GL_ATOMIC_COUNTER_BUFFER ,GL_COPY_READ_BUFFER ,GL_COPY_WRITE_BUFFER ,</para>
            <para>GL_DISPATCH_INDIRECT_BUFFER ,GL_DRAW_INDIRECT_BUFFER ,GL_ELEMENT_ARRAY_BUFFER ,GL_PIXEL_PACK_BUFFER ,</para>
            <para>GL_PIXEL_UNPACK_BUFFER ,GL_QUERY_BUFFER ,GL_SHADER_STORAGE_BUFFER ,GL_TEXTURE_BUFFER ,</para>
            <para>GL_TRANSFORM_FEEDBACK_BUFFER ,GL_UNIFORM_BUFFER .</para>
            </param>
            <param name="internalformat">
            The internal format with which the data will be stored in the buffer object. 
            </param>
            <param name="format">
            The format of the data in memory addressed by data. 
            </param>
            <param name="type">
            The type of the data in memory addressed by data. 
            </param>
            <param name="data">
            The address of a memory location storing the data to be replicated into the buffer's data store. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DispatchCompute(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            launch one or more compute work groups.
            </summary>
            <param name="num_groups_x">
            The number of work groups to be launched in the X dimension. 
            </param>
            <param name="num_groups_y">
            The number of work groups to be launched in the Y dimension. 
            </param>
            <param name="num_groups_z">
            The number of work groups to be launched in the Z dimension. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CopyImageSubData(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            perform a raw data copy between two images.
            </summary>
            <param name="srcName">
            The name of a texture or renderbuffer object from which to copy. 
            </param>
            <param name="srcTarget">
            The target representing the namespace of the source name srcName.
            </param>
            <param name="srcLevel">
            The mipmap level to read from the source. 
            </param>
            <param name="srcX">
            The X coordinate of the left edge of the souce region to copy. 
            </param>
            <param name="srcY">
            The Y coordinate of the top edge of the souce region to copy. 
            </param>
            <param name="srcZ">
            The Z coordinate of the near edge of the souce region to copy. 
            </param>
            <param name="dstName">
            The name of a texture or renderbuffer object to which to copy. 
            </param>
            <param name="dstTarget">
            The target representing the namespace of the destination name dstName. 
            </param>
            <param name="dstLevel">
            The X coordinate of the left edge of the destination region. 
            </param>
            <param name="dstX">
            The Y coordinate of the top edge of the destination region. 
            </param>
            <param name="dstY">
            The Z coordinate of the near edge of the destination region. 
            </param>
            <param name="dstZ">
            The width of the region to be copied. 
            </param>
            <param name="srcWidth">
            The width of the region to be copied. 
            </param>
            <param name="srcHeight">
            The height of the region to be copied. 
            </param>
            <param name="srcDepth">
            The depth of the region to be copied. 
            </param>
        </member>
        <member name="M:OpenGL.gl.InvalidateTexSubImage(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            invalidate a region of a texture image.
            </summary>
            <param name="texture">
            The name of a texture object a subregion of which to invalidate. 
            </param>
            <param name="level">
            The level of detail of the texture object within which the region resides.
            </param>
            <param name="xoffset">
            The X offset of the region to be invalidated. 
            </param>
            <param name="yoffset">
            The Y offset of the region to be invalidated. 
            </param>
            <param name="zoffset">
            The Z offset of the region to be invalidated. 
            </param>
            <param name="width">
            The width of the region to be invalidated. 
            </param>
            <param name="height">
            The height of the region to be invalidated.
            </param>
            <param name="depth">
            The depth of the region to be invalidated. 
            </param>
        </member>
        <member name="M:OpenGL.gl.InvalidateTexImage(System.UInt32,System.Int32)">
            <summary>
            invalidate the entirety a texture image.
            </summary>
            <param name="texture">
            The name of a texture object to invalidate. 
            </param>
            <param name="level">
             The level of detail of the texture object to invalidate.
            </param>
        </member>
        <member name="M:OpenGL.gl.InvalidateBufferData(System.UInt32)">
            <summary>
            invalidate the content of a buffer object's data store.
            </summary>
            <param name="buffer">
            The name of a buffer object whose data store to invalidate. 
            </param>
        </member>
        <member name="M:OpenGL.gl.InvalidateFramebuffer(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            invalidate the content of some or all of a framebuffer's attachments.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer object is attached for InvalidateFramebuffer. 
            </param>
            <param name="numAttachments">
            Specifies the number of entries in the attachments array. 
            </param>
            <param name="attachments">
            Specifies a pointer to an array identifying the attachments to be invalidated. 
            </param>
        </member>
        <member name="M:OpenGL.gl.InvalidateSubFramebuffer(System.UInt32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            invalidate the content of a region of some or all of a framebuffer's attachments.
            </summary>
            <param name="target">
            Specifies the target to which the framebuffer object is attached for InvalidateSubFramebuffer.
            </param>
            <param name="numAttachments">
            Specifies the number of entries in the attachments array. 
            </param>
            <param name="attachments">
            Specifies a pointer to an array identifying the attachments to be invalidated. 
            </param>
            <param name="x">
            Specifies the X offset of the region to be invalidated. 
            </param>
            <param name="y">
            Specifies the Y offset of the region to be invalidated. 
            </param>
            <param name="width">
            Specifies the width of the region to be invalidated. 
            </param>
            <param name="height">
            Specifies the height of the region to be invalidated. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetProgramResourceIndex(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            query the index of a named resource within a program.
            </summary>
            <param name="program">
            The name of a program object whose resources to query. 
            </param>
            <param name="programInterface">
            A token identifying the interface within program containing the resource named name.
            </param>
            <param name="name">
            The name of the resource to query the index of. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.GetProgramResourceLocationIndex(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            query the location of a named resource within a program.
            </summary>
            <param name="program">
            The name of a program object whose resources to query. 
            </param>
            <param name="programInterface">
            A token identifying the interface within program containing the resource named name. 
            </param>
            <param name="name">
            The name of the resource to query the location of.
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.ShaderStorageBlockBinding(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            change an active shader storage block binding.
            </summary>
            <param name="program">
            The name of the program containing the block whose binding to change. 
            </param>
            <param name="storageBlockIndex">
            The index storage block within the program. 
            </param>
            <param name="storageBlockBinding">
            The index storage block binding to associate with the specified storage block. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexStorage2DMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            specify storage for a two-dimensional multisample texture.
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for TexStorage2DMultisample. 
            Must be one of GL_TEXTURE_2D_MULTISAMPLE or GL_PROXY_TEXTURE_2D_MULTISAMPLE. 
            </param>
            <param name="samples">
            Specify the number of samples in the texture. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels.
            </param>
            <param name="fixedsamplelocations">
            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image,
            and the sample locations will not depend on the internal format or size of the image. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexStorage3DMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            specify storage for a two-dimensional multisample array texture.
            </summary>
            <param name="target">
            Specifies the target to which the texture object is bound for TexStorage3DMultisample. 
            Must be one of GL_TEXTURE_2D_MULTISAMPLE_ARRAY or GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY. 
            </param>
            <param name="samples">
            Specify the number of samples in the texture. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels.
            </param>
            <param name="height">
            Specifies the height of the texture, in texels. 
            </param>
            <param name="depth">
            Specifies the depth of the texture, in layers. 
            </param>
            <param name="fixedsamplelocations">
            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, 
            and the sample locations will not depend on the internal format or size of the image. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureView(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            initialize a texture as a data alias of another texture's data store.
            </summary>
            <param name="texture">
            Specifies the texture object to be initialized as a view. 
            </param>
            <param name="target">
            Specifies the target to be used for the newly initialized texture. 
            </param>
            <param name="origtexture">
            Specifies the name of a texture object of which to make a view. 
            </param>
            <param name="internalformat">
            Specifies the internal format for the newly created view. 
            </param>
            <param name="minlevel">
            Specifies lowest level of detail of the view. 
            </param>
            <param name="numlevels">
             Specifies the number of levels of detail to include in the view.
            </param>
            <param name="minlayer">
            Specifies the index of the first layer to include in the view. 
            </param>
            <param name="numlayers">
            Specifies the number of layers to include in the view. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribFormat(System.UInt32,System.Int32,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
            specify the organization of vertex arrays.
            </summary>
            <param name="attribindex">
            The generic vertex attribute array being described.
            </param>
            <param name="size">
            The number of values per vertex that are stored in the array.
            </param>
            <param name="type">
            The type of the data stored in the array.
            </param>
            <param name="normalized">
            Specifies whether fixed-point data values should be normalized (GL_TRUE) 
            or converted directly as fixed-point values (GL_FALSE) when they are accessed. T
            his parameter is ignored if type is GL_FIXED. 
            </param>
            <param name="relativeoffset">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribIFormat(System.UInt32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            specify the organization of vertex arrays.
            </summary>
            <param name="attribindex">
            The generic vertex attribute array being described.
            </param>
            <param name="size">
            The number of values per vertex that are stored in the array.
            </param>
            <param name="type">
            The type of the data stored in the array.
            </param>
            <param name="relativeoffset">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribLFormat(System.UInt32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            specify the organization of vertex arrays.
            </summary>
            <param name="attribindex">
            The generic vertex attribute array being described.
            </param>
            <param name="size">
            The number of values per vertex that are stored in the array.
            </param>
            <param name="type">
            The type of the data stored in the array.
            </param>
            <param name="relativeoffset">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexAttribBinding(System.UInt32,System.UInt32)">
            <summary>
            associate a vertex attribute and a vertex buffer binding for a vertex array object.
            </summary>
            <param name="attribindex">
            Specifies the name of the vertex array object for VertexArrayAttribBinding. 
            </param>
            <param name="bindingindex">
            The index of the vertex buffer binding with which to associate the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexBindingDivisor(System.UInt32,System.UInt32)">
            <summary>
            modify the rate at which generic vertex attributes advance.
            </summary>
            <param name="bindingindex">
            The index of the binding whose divisor to modify.
            </param>
            <param name="divisor">
            The new value for the instance step rate to apply.
            </param>
        </member>
        <member name="M:OpenGL.gl.DebugMessageControl(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.UInt32[],System.Boolean)">
            <summary>
            control the reporting of debug messages in a debug context.
            </summary>
            <param name="source">
            The source of debug messages to enable or disable. 
            </param>
            <param name="type">
            The type of debug messages to enable or disable. 
            </param>
            <param name="severity">
            The severity of debug messages to enable or disable. 
            </param>
            <param name="count">
            The length of the array ids. 
            </param>
            <param name="ids">
            The address of an array of unsigned integers contianing the ids of the messages to enable or disable. 
            </param>
            <param name="enabled">
            A Boolean flag determining whether the selected messages should be enabled or disabled. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DebugMessageInsert(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Byte[])">
            <summary>
             inject an application-supplied message into the debug message queue.
            </summary>
            <param name="source">
            The source of the debug message to insert. 
            </param>
            <param name="type">
            The type of the debug message insert. 
            </param>
            <param name="id">
            The user-supplied identifier of the message to insert. 
            </param>
            <param name="severity">
            The severity of the debug messages to insert. 
            </param>
            <param name="length">
            The length string contained in the character array whose address is given by message. 
            </param>
            <param name="buf">
            The character array containing the message to insert. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DebugMessageCallback(System.IntPtr,System.IntPtr)">
            <summary>
            specify a callback to receive debugging messages from the GL.
            </summary>
            <param name="callback">
            The address of a callback function that will be called when a debug message is generated. 
            </param>
            <param name="userParam">
            A user supplied pointer that will be passed on each invocation of callback. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetProgramResourceLocation(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            query the location of a named resource within a program.
            </summary>
            <param name="program">
            The name of a program object whose resources to query. 
            </param>
            <param name="programInterface">
            A token identifying the interface within program containing the resource named name. 
            </param>
            <param name="name">
            The name of the resource to query the location of. 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.PushDebugGroup(System.UInt32,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            push a named debug group into the command stream.
            </summary>
            <param name="source">
            The source of the debug message. 
            </param>
            <param name="id">
            The identifier of the message.
            </param>
            <param name="length">
            The length of the message to be sent to the debug output stream.
            </param>
            <param name="message">
            The a string containing the message to be sent to the debug output stream. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PopDebugGroup">
            <summary>
            pop the active debug group.
            </summary>
        </member>
        <member name="M:OpenGL.gl.ObjectLabel(System.UInt32,System.UInt32,System.Int32,System.Byte[])">
            <summary>
            label a named object identified within a namespace.
            </summary>
            <param name="identifier">
            The namespace from which the name of the object is allocated. 
            </param>
            <param name="name">
            The name of the object to label. 
            </param>
            <param name="length">
            The length of the label to be used for the object.
            </param>
            <param name="label">
            The address of a string containing the label to assign to the object.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetObjectLabel(System.UInt32,System.UInt32,System.Int32,System.Int32[],System.Byte[])">
            <summary>
            retrieve the label of a named object identified within a namespace.
            </summary>
            <param name="identifier">
            The namespace from which the name of the object is allocated. 
            </param>
            <param name="name">
            The name of the object whose label to retrieve. 
            </param>
            <param name="bufSize">
            The length of the buffer whose address is in label. 
            </param>
            <param name="length">
            The address of a variable to receive the length of the object label. 
            </param>
            <param name="label">
            The address of a string that will receive the object label.
            </param>
        </member>
        <member name="M:OpenGL.gl.ObjectPtrLabel(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            label a a sync object identified by a pointer
            </summary>
            <param name="ptr">
            A pointer identifying a sync object. 
            </param>
            <param name="length">
            The length of the label to be used for the object. 
            </param>
            <param name="label">
            The address of a string containing the label to assign to the object. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetObjectPtrLabel(System.IntPtr,System.Int32,System.Int32[],System.Byte[])">
            <summary>
            retrieve the label of a sync object identified by a pointer
            </summary>
            <param name="ptr">
            The name of the sync object whose label to retrieve.
            </param>
            <param name="bufSize">
            The length of the buffer whose address is in label. 
            </param>
            <param name="length">
            The address of a variable to receive the length of the object label. 
            </param>
            <param name="label">
            The address of a string that will receive the object label. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetInternalformat(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int64)">
            <summary>
            retrieve information about implementation-dependent support for internal formats.
            </summary>
            <param name="target">
            <para>pIndicates the usage of the internal format. target must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D,</para>
            <para>GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_BUFFER, GL_RENDERBUFFER, GL_TEXTURE_2D_MULTISAMPLE or GL_TEXTURE_2D_MULTISAMPLE_ARRAY.</para>
            </param>
            <param name="internalformat">
            Specifies the internal format about which to retrieve information.
            </param>
            <param name="pname">
            Specifies the type of information to query.
            </param>
            <param name="bufSize">
            Specifies the maximum number of integers of the specified width that may be written to params by the function.
            </param>
            <param name="Params">
            Specifies the address of a variable into which to write the retrieved information.
            </param>
        </member>
        <member name="M:OpenGL.gl.BindBuffersRange(System.UInt32,System.UInt32,System.Int32,System.UInt32[],System.UInt64[],System.UInt64[])">
            <summary>
            bind ranges of one or more buffer objects to a sequence of indexed buffer targets.
            </summary>
            <param name="target">
            Specify the target of the bind operation. 
            target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, 
            GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER. 
            </param>
            <param name="first">
            Specify the index of the first binding point within the array specified by target. 
            </param>
            <param name="count">
            Specify the number of contiguous binding points to which to bind buffers.
            </param>
            <param name="buffers">
            A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL. 
            </param>
            <param name="offsets">
            A pointer to an array of offsets into the corresponding buffer in buffers to bind, or NULL if buffers is NULL. 
            </param>
            <param name="sizes">
            A pointer to an array of sizes of the corresponding buffer in buffers to bind, or NULL if buffers is NULL.
            </param>
        </member>
        <member name="M:OpenGL.gl.BindVertexBuffers(System.UInt32,System.Int32,System.UInt32[],System.UInt64[],System.Int32[])">
            <summary>
            attach multiple buffer objects to a vertex array object.
            </summary>
            <param name="first">
            Specifies the first vertex buffer binding point to which a buffer object is to be bound. 
            </param>
            <param name="count">
            Specifies the number of buffers to bind. 
            </param>
            <param name="buffers">
            Specifies the address of an array of names of existing buffer objects. 
            </param>
            <param name="offsets">
            Specifies the address of an array of offsets to associate with the binding points. 
            </param>
            <param name="strides">
            Specifies the address of an array of strides to associate with the binding points. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearTexImage(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            fills all a texture image with a constant value.
            </summary>
            <param name="texture">
            The name of an existing texture object containing the image to be cleared. 
            </param>
            <param name="level">
            The level of texture containing the region to be cleared. 
            </param>
            <param name="format">
            The format of the data whose address in memory is given by data.
            </param>
            <param name="type">
            The type of the data whose address in memory is given by data. 
            </param>
            <param name="data">
            The address in memory of the data to be used to clear the specified region.
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearTexSubImage(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            fills all or part of a texture image with a constant value.
            </summary>
            <param name="texture">
            The name of an existing texture object containing the image to be cleared. 
            </param>
            <param name="level">
            The level of texture containing the region to be cleared.
            </param>
            <param name="xoffset">
            The coordinate of the left edge of the region to be cleared. 
            </param>
            <param name="yoffset">
            The coordinate of the lower edge of the region to be cleared. 
            </param>
            <param name="zoffset">
            The coordinate of the front of the region to be cleared. 
            </param>
            <param name="width">
            The width of the region to be cleared. 
            </param>
            <param name="height">
            The height of the region to be cleared. 
            </param>
            <param name="depth">
            The depth of the region to be cleared.
            </param>
            <param name="format">
            The format of the data whose address in memory is given by data.
            </param>
            <param name="type">
            The type of the data whose address in memory is given by data. 
            </param>
            <param name="data">
            The address in memory of the data to be used to clear the specified region.
            </param>
        </member>
        <member name="M:OpenGL.gl.BindBuffersBase(System.UInt32,System.UInt32,System.Int32,System.UInt32[])">
            <summary>
             bind one or more buffer objects to a sequence of indexed buffer targets
            </summary>
            <param name="target">
            Specify the target of the bind operation. 
            target must be one of GL_ATOMIC_COUNTER_BUFFER, GL_TRANSFORM_FEEDBACK_BUFFER, 
            GL_UNIFORM_BUFFER or GL_SHADER_STORAGE_BUFFER. 
            </param>
            <param name="first">
            Specify the index of the first binding point within the array specified by target. 
            </param>
            <param name="count">
            Specify the number of contiguous binding points to which to bind buffers. 
            </param>
            <param name="buffers">
            A pointer to an array of names of buffer objects to bind to the targets on the specified binding point, or NULL. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindTextures(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            bind one or more named textures to a sequence of consecutive texture units.
            </summary>
            <param name="first">
            Specifies the first texture unit to which a texture is to be bound. 
            </param>
            <param name="count">
            Specifies the number of textures to bind. 
            </param>
            <param name="textures">
            Specifies the address of an array of names of existing texture objects. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindSamplers(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            bind one or more named sampler objects to a sequence of consecutive sampler units.
            </summary>
            <param name="first">
            Specifies the first sampler unit to which a sampler object is to be bound. 
            </param>
            <param name="count">
            Specifies the number of samplers to bind.
            </param>
            <param name="samplers">
            Specifies the address of an array of names of existing sampler objects. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BufferStorage(System.UInt32,System.Int32,System.IntPtr,System.UInt32)">
             <summary>
             creates and initializes a buffer object's immutable data store.
             </summary>
             <param name="target">
              <para>Specifies the target to which the buffer object is bound for BufferStorage, which must be one of the buffer binding targets in the following table: </para>
              <para>GL_ARRAY_BUFFER,GL_ATOMIC_COUNTER_BUFFER,GL_COPY_READ_BUFFER ,GL_COPY_WRITE_BUFFER ,GL_DISPATCH_INDIRECT_BUFFER,</para>
              <para> ,GL_ELEMENT_ARRAY_BUFFER ,GL_PIXEL_PACK_BUFFER ,GL_PIXEL_UNPACK_BUFFER ,</para>
              <para>GL_QUERY_BUFFER ,GL_SHADER_STORAGE_BUFFER ,GL_TEXTURE_BUFFER ,GL_TRANSFORM_FEEDBACK_BUFFER,GL_UNIFORM_BUFFER .</para>
             </param>
             <param name="size">
             Specifies the size in bytes of the buffer object's new data store.
             </param>
             <param name="data">
             Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
             </param>
             <param name="flags">
             <para>Specifies the intended usage of the buffer's data store. </para>
            <para> Must be a bitwise combination of the following flags. </para>
            <para> GL_DYNAMIC_STORAGE_BIT, GL_MAP_READ_BIT GL_MAP_WRITE_BIT, GL_MAP_PERSISTENT_BIT, GL_MAP_COHERENT_BIT, and GL_CLIENT_STORAGE_BIT.</para>
             </param>
        </member>
        <member name="M:OpenGL.gl.VertexArrayVertexBuffer(System.UInt32,System.UInt32,System.UInt32,System.UInt64,System.Int32)">
            <summary>
            
            </summary>
            <param name="vaobj">
            
            </param>
            <param name="bindingindex">
            
            </param>
            <param name="buffer">
            
            </param>
            <param name="offset">
            
            </param>
            <param name="stride">
            
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexArrayVertexBuffers(System.UInt32,System.UInt32,System.Int32,System.UInt32[],System.UInt64[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="vaobj"></param>
            <param name="first"></param>
            <param name="count"></param>
            <param name="buffers"></param>
            <param name="offsets"></param>
            <param name="strides"></param>
        </member>
        <member name="M:OpenGL.gl.TransformFeedbackBufferRange(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            bind a range within a buffer object to a transform feedback buffer object.
            </summary>
            <param name="xfb">
            Name of the transform feedback buffer object. 
            </param>
            <param name="index">
            Index of the binding point within xfb. 
            </param>
            <param name="buffer">
            Name of the buffer object to bind to the specified binding point. 
            </param>
            <param name="offset">
            The starting offset in basic machine units into the buffer object. 
            </param>
            <param name="size">
            The amount of data in basic machine units that can be read from or written to the buffer object while used as an indexed target. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureParameterI(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set texture parameters.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureParameter functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a sine-valued texture parameter. 
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL,
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A,
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            For the vector commands(TexParameter* v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
            </param>
            <param name="Params">
            For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureParameterI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            set texture parameters.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureParameter functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a sine-valued texture parameter. 
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL,
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A,
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            For the vector commands(TexParameter* v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
            </param>
            <param name="Params">
            For the vector commands, specifies a pointer to an array where the value or values of pname are stored.
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureParameter(System.UInt32,System.UInt32,System.Single)">
            <summary>
            set texture parameters.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureParameter functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a sine-valued texture parameter. 
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, 
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, 
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            For the vector commands(TexParameter* v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
            </param>
            <param name="param">
            For the scalar commands, specifies the value of pname.
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            set texture parameters.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureParameter functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a sine-valued texture parameter. 
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, 
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, 
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            For the vector commands(TexParameter* v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
            </param>
            <param name="param">
            For the scalar commands, specifies the value of pname.
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set texture parameters.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureParameter functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a sine-valued texture parameter. 
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, 
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, 
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            For the vector commands(TexParameter* v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
            </param>
            <param name="param">
            For the scalar commands, specifies the value of pname.
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set texture parameters.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureParameter functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a sine-valued texture parameter. 
            pname can be one of the following: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, 
            GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, 
            GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, 
            GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
            For the vector commands(TexParameter* v), pname can also be one of GL_TEXTURE_BORDER_COLOR or GL_TEXTURE_SWIZZLE_RGBA.
            </param>
            <param name="param">
            For the scalar commands, specifies the value of pname.
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureBufferRange(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            attach a range of a buffer object's data store to a buffer texture object.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureBufferRange. 
            </param>
            <param name="internalformat">
            Specifies the internal format of the data in the store belonging to buffer. 
            </param>
            <param name="buffer">
            Specifies the name of the buffer object whose storage to attach to the active buffer texture. 
            </param>
            <param name="offset">
            Specifies the offset of the start of the range of the buffer's data store to attach. 
            </param>
            <param name="size">
             Specifies the size of the range of the buffer's data store to attach. 
            </param>
        </member>
        <member name="M:OpenGL.gl.NamedFramebufferParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set a named parameter of a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for NamedFramebufferParameteri. 
            </param>
            <param name="pname">
            Specifies the framebuffer parameter to be modified. 
            </param>
            <param name="param">
            The new value for the parameter named pname. 
            </param>
        </member>
        <member name="M:OpenGL.gl.NamedBufferSubData(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            updates a subset of a buffer object's data store.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for NamedBufferSubData. 
            </param>
            <param name="offset">
            Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
            </param>
            <param name="size">
            Specifies the size in bytes of the data store region being replaced.
            </param>
            <param name="data">
            Specifies a pointer to the new data that will be copied into the data store. 
            </param>
        </member>
        <member name="M:OpenGL.gl.NamedBufferStorage(System.UInt32,System.Int32,System.IntPtr,System.UInt32)">
            <summary>
            creates and initializes a buffer object's immutable data store.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for NamedBufferStorage function.
            </param>
            <param name="size">
            Specifies the size in bytes of the buffer object's new data store.
            </param>
            <param name="data">
            Specifies a pointer to data that will be copied into the data store for initialization, or NULL if no data is to be copied.
            </param>
            <param name="flags">
              Specifies the intended usage of the buffer's data store. 
              Must be a bitwise combination of the following flags. GL_DYNAMIC_STORAGE_BIT, GL_MAP_READ_BIT ,
              GL_MAP_WRITE_BIT, GL_MAP_PERSISTENT_BIT, GL_MAP_COHERENT_BIT, and GL_CLIENT_STORAGE_BIT.
            </param>
        </member>
        <member name="M:OpenGL.gl.NamedBufferData(System.UInt32,System.Int32,System.IntPtr,System.UInt32)">
            <summary>
            creates and initializes a buffer object's data store.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for NamedBufferData function.
            </param>
            <param name="size">
             Specifies the size in bytes of the buffer object's new data store.
            </param>
            <param name="data">
             Specifies a pointer to data that will be copied into the data store for initialization, 
             or NULL if no data is to be copied.
            </param>
            <param name="usage">
            Specifies the expected usage pattern of the data store. 
            The symbolic constant must be GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, 
            GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
            </param>
        </member>
        <member name="M:OpenGL.gl.MapNamedBufferRange(System.UInt32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            map all or part of a buffer object's data store into the client's address space.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for MapNamedBufferRange. 
            </param>
            <param name="offset">
            Specifies the starting offset within the buffer of the range to be mapped. 
            </param>
            <param name="length">
            Specifies the length of the range to be mapped. 
            </param>
            <param name="access">
            Specifies a combination of access flags indicating the desired access to the mapped range. 
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.gl.GetVertexArrayIndexed(System.UInt32,System.UInt32,System.UInt32,System.Int64[])">
            <summary>
            retrieve parameters of an attribute of a vertex array object.
            </summary>
            <param name="vaobj">
            Specifies the name of a vertex array object.
            </param>
            <param name="index">
            Specifies the index of the vertex array object attribute. 
            Must be a number between 0 and (GL_MAX_VERTEX_ATTRIBS - 1).
            </param>
            <param name="pname">
            Specifies the property to be used for the query. 
            For GetVertexArrayIndexediv, it must be one of the following values: 
            GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, 
            GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, 
            GL_VERTEX_ATTRIB_ARRAY_LONG, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_VERTEX_ATTRIB_RELATIVE_OFFSET. 
            For GetVertexArrayIndexed64v, it must be equal to GL_VERTEX_BINDING_OFFSET.
            </param>
            <param name="param">
            Returns the requested value.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetVertexArrayIndexed(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve parameters of an attribute of a vertex array object.
            </summary>
            <param name="vaobj">
            Specifies the name of a vertex array object.
            </param>
            <param name="index">
            Specifies the index of the vertex array object attribute. 
            Must be a number between 0 and (GL_MAX_VERTEX_ATTRIBS - 1).
            </param>
            <param name="pname">
            Specifies the property to be used for the query. 
            For GetVertexArrayIndexediv, it must be one of the following values: 
            GL_VERTEX_ATTRIB_ARRAY_ENABLED, GL_VERTEX_ATTRIB_ARRAY_SIZE, GL_VERTEX_ATTRIB_ARRAY_STRIDE, 
            GL_VERTEX_ATTRIB_ARRAY_TYPE, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED, GL_VERTEX_ATTRIB_ARRAY_INTEGER, 
            GL_VERTEX_ATTRIB_ARRAY_LONG, GL_VERTEX_ATTRIB_ARRAY_DIVISOR, or GL_VERTEX_ATTRIB_RELATIVE_OFFSET. 
            For GetVertexArrayIndexed64v, it must be equal to GL_VERTEX_BINDING_OFFSET.
            </param>
            <param name="param">
            Returns the requested value.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTransformFeedback(System.UInt32,System.UInt32,System.UInt32,System.Int64[])">
            <summary>
            query the state of a transform feedback object.
            </summary>
            <param name="xfb">
            The name of an existing transform feedback object, or zero for the default transform feedback object.
            </param>
            <param name="pname">
            Property to use for the query. 
            Must be one of the values: GL_TRANSFORM_FEEDBACK_BUFFER_BINDING, GL_TRANSFORM_FEEDBACK_BUFFER_START,
            GL_TRANSFORM_FEEDBACK_BUFFER_SIZE, GL_TRANSFORM_FEEDBACK_PAUSED, GL_TRANSFORM_FEEDBACK_ACTIVE.
            </param>
            <param name="index">
            Index of the transform feedback stream (for indexed state).
            </param>
            <param name="param">
            The address of a buffer into which will be written the requested state information.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTransformFeedback(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query the state of a transform feedback object.
            </summary>
            <param name="xfb">
            The name of an existing transform feedback object, or zero for the default transform feedback object.
            </param>
            <param name="pname">
            Property to use for the query. 
            Must be one of the values: GL_TRANSFORM_FEEDBACK_BUFFER_BINDING, GL_TRANSFORM_FEEDBACK_BUFFER_START,
            GL_TRANSFORM_FEEDBACK_BUFFER_SIZE, GL_TRANSFORM_FEEDBACK_PAUSED, GL_TRANSFORM_FEEDBACK_ACTIVE.
            </param>
            <param name="index">
            Index of the transform feedback stream (for indexed state).
            </param>
            <param name="param">
            The address of a buffer into which will be written the requested state information.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTransformFeedback(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query the state of a transform feedback object.
            </summary>
            <param name="xfb">
            The name of an existing transform feedback object, or zero for the default transform feedback object.
            </param>
            <param name="pname">
            Property to use for the query. 
            Must be one of the values: GL_TRANSFORM_FEEDBACK_BUFFER_BINDING, GL_TRANSFORM_FEEDBACK_BUFFER_START,
            GL_TRANSFORM_FEEDBACK_BUFFER_SIZE, GL_TRANSFORM_FEEDBACK_PAUSED, GL_TRANSFORM_FEEDBACK_ACTIVE.
            </param>
            <param name="param">
            The address of a buffer into which will be written the requested state information.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTextureLevelParameter(System.UInt32,System.Int32,System.UInt32,System.Single[])">
            <summary>
            return texture parameter values for a specific level of detail.
            </summary>
            <param name="texture">
            Specifies the texture object name for GetTextureLevelParameterfv and GetTextureLevelParameteriv functions.
            </param>
            <param name="level">
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. 
            Level n is the n-th mipmap reduction image.
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT,
            GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE,
            GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, 
            and GL_TEXTURE_BUFFER_OFFSET are accepted.
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTextureLevelParameter(System.UInt32,System.Int32,System.UInt32,System.Int32[])">
            <summary>
            return texture parameter values for a specific level of detail.
            </summary>
            <param name="texture">
            Specifies the texture object name for GetTextureLevelParameterfv and GetTextureLevelParameteriv functions.
            </param>
            <param name="level">
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level. 
            Level n is the n-th mipmap reduction image.
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT,
            GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, GL_TEXTURE_ALPHA_SIZE,
            GL_TEXTURE_DEPTH_SIZE, GL_TEXTURE_COMPRESSED, GL_TEXTURE_COMPRESSED_IMAGE_SIZE, 
            and GL_TEXTURE_BUFFER_OFFSET are accepted.
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTextureParameterI(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="texture">
            Specifies the texture object name for GetTextureParameterfv, GetTextureParameteriv, GetTextureParameterIiv, and GetTextureParameterIuiv functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_DEPTH_STENCIL_TEXTURE_MODE, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT,
            GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, 
            GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, 
            GL_TEXTURE_TARGET, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, 
            GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTextureParameterI(System.UInt32,System.UInt32,System.UInt32[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="texture">
            Specifies the texture object name for GetTextureParameterfv, GetTextureParameteriv, GetTextureParameterIiv, and GetTextureParameterIuiv functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_DEPTH_STENCIL_TEXTURE_MODE, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT,
            GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, 
            GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, 
            GL_TEXTURE_TARGET, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, 
            GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTextureParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="texture">
            Specifies the texture object name for GetTextureParameterfv, GetTextureParameteriv, GetTextureParameterIiv, and GetTextureParameterIuiv functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_DEPTH_STENCIL_TEXTURE_MODE, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT,
            GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, 
            GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, 
            GL_TEXTURE_TARGET, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, 
            GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTextureParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="texture">
            Specifies the texture object name for GetTextureParameterfv, GetTextureParameteriv, GetTextureParameterIiv, and GetTextureParameterIuiv functions.
            </param>
            <param name="pname">
            Specifies the symbolic name of a texture parameter.
            GL_DEPTH_STENCIL_TEXTURE_MODE, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE, GL_TEXTURE_BASE_LEVEL, 
            GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_IMMUTABLE_FORMAT,
            GL_TEXTURE_IMMUTABLE_LEVELS, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MAX_LEVEL,
            GL_TEXTURE_MAX_LOD, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_SWIZZLE_R, 
            GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_SWIZZLE_RGBA, 
            GL_TEXTURE_TARGET, GL_TEXTURE_VIEW_MIN_LAYER, GL_TEXTURE_VIEW_MIN_LEVEL, GL_TEXTURE_VIEW_NUM_LAYERS, 
            GL_TEXTURE_VIEW_NUM_LEVELS, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, and GL_TEXTURE_WRAP_R are accepted.
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetQueryBufferObjecti64v(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="buffer"></param>
            <param name="pname"></param>
            <param name="offset"></param>
        </member>
        <member name="M:OpenGL.gl.GetQueryBufferObjectiv(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="buffer"></param>
            <param name="pname"></param>
            <param name="offset"></param>
        </member>
        <member name="M:OpenGL.gl.GetQueryBufferObjectui64v(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="buffer"></param>
            <param name="pname"></param>
            <param name="offset"></param>
        </member>
        <member name="M:OpenGL.gl.GetQueryBufferObjectuiv(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="buffer"></param>
            <param name="pname"></param>
            <param name="offset"></param>
        </member>
        <member name="M:OpenGL.gl.GetNamedRenderbufferParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query a named parameter of a renderbuffer object.
            </summary>
            <param name="renderbuffer">
            Specifies the name of the renderbuffer object for GetNamedRenderbufferParameteriv. 
            </param>
            <param name="pname">
            Specifies the parameter of the renderbuffer object to query. 
            </param>
            <param name="Params">
            Returns the value of parameter pname for the renderbuffer object. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetNamedFramebufferParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            query a named parameter of a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for GetNamedFramebufferParameteriv. 
            </param>
            <param name="pname">
            Specifies the parameter of the framebuffer object to query. 
            </param>
            <param name="param">
            Returns the value of parameter pname for the framebuffer object.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetNamedFramebufferAttachmentParameter(System.UInt32,System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve information about attachments of a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for GetNamedFramebufferAttachmentParameteriv. 
            </param>
            <param name="attachment">
            Specifies the attachment of the framebuffer object to query. 
            </param>
            <param name="pname">
            Specifies the parameter of attachment to query. 
            </param>
            <param name="Params">
            Returns the value of parameter pname for attachment. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetNamedBufferSubData(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            returns a subset of a buffer object's data store.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for GetNamedBufferSubData. 
            </param>
            <param name="offset">
            Specifies the offset into the buffer object's data store from which data will be returned, measured in bytes. 
            </param>
            <param name="size">
            Specifies the size in bytes of the data store region being returned. 
            </param>
            <param name="data">
            Specifies a pointer to the location where buffer object data is returned. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetNamedBufferPointer(System.UInt32,System.UInt32,System.IntPtr[])">
            <summary>
            return the pointer to a mapped buffer object's data store.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for GetNamedBufferPointerv. 
            </param>
            <param name="pname">
            Specifies the name of the pointer to be returned. Must be GL_BUFFER_MAP_POINTER. 
            </param>
            <param name="Params">
            Returns the pointer value specified by pname. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetNamedBufferParameter(System.UInt32,System.UInt32,System.Int64[])">
            <summary>
            return parameters of a buffer object.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for GetNamedBufferParameteriv and GetNamedBufferParameteri64v. 
            </param>
            <param name="pname">
            specific buffer object parameter.
            </param>
            <param name="Params">
            Returns the requested parameter. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetNamedBufferParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return parameters of a buffer object.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for GetNamedBufferParameteriv and GetNamedBufferParameteri64v. 
            </param>
            <param name="pname">
            specific buffer object parameter.
            </param>
            <param name="Params">
            Returns the requested parameter. 
            </param>
        </member>
        <member name="M:OpenGL.gl.FlushMappedNamedBufferRange(System.UInt32,System.Int32,System.Int32)">
            <summary>
            indicate modifications to a range of a mapped buffer.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for FlushMappedNamedBufferRange.
            </param>
            <param name="offset">
            Specifies the start of the buffer subrange, in basic machine units. 
            </param>
            <param name="length">
            Specifies the length of the buffer subrange, in basic machine units. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CopyNamedBufferSubData(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy all or part of the data store of a buffer object to the data store of another buffer object.
            </summary>
            <param name="readBuffer">
            Specifies the name of the source buffer object for CopyNamedBufferSubData. 
            </param>
            <param name="writeBuffer">
            Specifies the name of the destination buffer object for CopyNamedBufferSubData. 
            </param>
            <param name="readOffset">
            Specifies the offset, in basic machine units, within the data store of the source buffer object at which data will be read. 
            </param>
            <param name="writeOffset">
            Specifies the offset, in basic machine units, within the data store of the destination buffer object at which data will be written. 
            </param>
            <param name="size">
            Specifies the size, in basic machine units, of the data to be copied from the source buffer object to the destination buffer object. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearNamedFramebuffer(System.UInt32,System.UInt32,System.Int32,System.Single,System.Int32)">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for ClearNamedFramebuffer*. 
            </param>
            <param name="buffer">
            Specify the buffer to clear. 
            </param>
            <param name="drawbuffer">
            Specify a particular draw buffer to clear. 
            </param>
            <param name="depth">
            The value to clear the depth buffer to. 
            </param>
            <param name="stencil">
            The value to clear the stencil buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearNamedFramebuffer(System.UInt32,System.UInt32,System.Int32,System.Single[])">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for ClearNamedFramebuffer*. 
            </param>
            <param name="buffer">
             Specify the buffer to clear. 
            </param>
            <param name="drawbuffer">
             Specify a particular draw buffer to clear. 
            </param>
            <param name="value">
            A pointer to the value or values to clear the buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearNamedFramebuffer(System.UInt32,System.UInt32,System.Int32,System.Int32[])">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for ClearNamedFramebuffer*. 
            </param>
            <param name="buffer">
             Specify the buffer to clear. 
            </param>
            <param name="drawbuffer">
             Specify a particular draw buffer to clear. 
            </param>
            <param name="value">
            A pointer to the value or values to clear the buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearNamedFramebuffer(System.UInt32,System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            clear individual buffers of a framebuffer.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for ClearNamedFramebuffer*. 
            </param>
            <param name="buffer">
             Specify the buffer to clear. 
            </param>
            <param name="drawbuffer">
             Specify a particular draw buffer to clear. 
            </param>
            <param name="value">
            A pointer to the value or values to clear the buffer to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearNamedBufferSubData(System.UInt32,System.UInt32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            fill all or part of buffer object's data store with a fixed value
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for ClearNamedBufferSubData. 
            </param>
            <param name="internalformat">
            The internal format with which the data will be stored in the buffer object. 
            </param>
            <param name="offset">
            The offset in basic machine units into the buffer object's data store at which to start filling.
            </param>
            <param name="size">
            The size in basic machine units of the range of the data store to fill. 
            </param>
            <param name="format">
            The format of the data in memory addressed by data. 
            </param>
            <param name="type">
            The type of the data in memory addressed by data. 
            </param>
            <param name="data">
            The address of a memory location storing the data to be replicated into the buffer's data store. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetGraphicsResetStatus">
            <summary>
            check if the rendering context has not been lost due to software or hardware issues.
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.gl.GetnCompressedTexImage(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
             <summary>
             return a compressed texture image.
             </summary>
             <param name="target">
             <para>Specifies the target to which the texture is bound for GetCompressedTexImage and GetnCompressedTexImage functions.</para>
             <para>GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D,</para>
             <para>GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, </para>
             <para>GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, </para>
             <para>and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, GL_TEXTURE_RECTANGLE are accepted.</para>
             </param>
             <param name="lod">
             <para>Specifies the level-of-detail number of the desired image. Level 0 is the base image level. </para>
            <para> Level n is the n-th mipmap reduction image.</para>
             </param>
             <param name="bufSize">
             Specifies the size of the buffer pixels for GetCompressedTextureImage and GetnCompressedTexImage functions.
             </param>
             <param name="pixels">
             <para>Returns the compressed texture image.</para>
             <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
             </param>
        </member>
        <member name="M:OpenGL.gl.GetnTexImage(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            return a texture image.
            </summary>
            <param name="tex">
            <para>Specifies the target to which the texture is bound for GetTexImage and GetnTexImage functions. </para>
            <para>GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, </para>
            <para>GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, </para>
            <para>GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, </para>
            <para>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, and GL_TEXTURE_CUBE_MAP_ARRAY are acceptable.</para>
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number of the desired image. Level 0 is the base image level. </para>
            <para>Level n is the n-th mipmap reduction image.</para>
            </param>
            <param name="format">
            <para>Specifies a pixel format for the returned data. </para>
            <para>The supported formats are GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, </para>
            <para>GL_BLUE, GL_RG, GL_RGB, GL_RGBA, GL_BGR, GL_BGRA, GL_RED_INTEGER, GL_GREEN_INTEGER, GL_BLUE_INTEGER,</para>
            <para>GL_RG_INTEGER, GL_RGB_INTEGER, GL_RGBA_INTEGER, GL_BGR_INTEGER, GL_BGRA_INTEGER.</para>
            </param>
            <param name="type">
            <para>Specifies a pixel type for the returned data. </para>
            <para>The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,</para>
            <para>GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,</para>
            <para>GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, </para>
            <para>GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, </para>
            <para>GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, </para>
            <para>GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV,</para>
            <para>GL_UNSIGNED_INT_5_9_9_9_REV, and GL_FLOAT_32_UNSIGNED_INT_24_8_REV.</para>
            </param>
            <param name="bufSize">
            Specifies the size of the buffer pixels for GetnTexImage and GetTextureImage functions.
            </param>
            <param name="pixels">
            <para>Returns the texture image. Should be a pointer to an array of the type specified by type.</para>
            <para>You can use the function GLAUX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.GetnUniform(System.UInt32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer params.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetnUniform(System.UInt32,System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer params.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetnUniform(System.UInt32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer params.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetnUniform(System.UInt32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Returns the value of a uniform variable.
            </summary>
            <param name="program">
            Specifies the program object to be queried.
            </param>
            <param name="location">
            Specifies the location of the uniform variable to be queried.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer params.
            </param>
            <param name="Params">
            Returns the value of the specified uniform variable.
            </param>
        </member>
        <member name="M:OpenGL.gl.ClipControl(System.UInt32,System.UInt32)">
            <summary>
            control clip coordinate to window coordinate behavior.
            </summary>
            <param name="origin">
            Specifies the clip control origin.Must be one of GL_LOWER_LEFT or GL_UPPER_LEFT.
            </param>
            <param name="depth">
            Specifies the clip control depth mode. Must be one of GL_NEGATIVE_ONE_TO_ONE or GL_ZERO_TO_ONE. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CreateTransformFeedbacks(System.Int32,System.UInt32[])">
            <summary>
            create transform feedback objects.
            </summary>
            <param name="n">
            Number of transform feedback objects to create. 
            </param>
            <param name="ids">
            Specifies an array in which names of the new transform feedback objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TransformFeedbackBufferBase(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            bind a buffer object to a transform feedback buffer object.
            </summary>
            <param name="xfb">
            Name of the transform feedback buffer object. 
            </param>
            <param name="index">
            Index of the binding point within xfb.
            </param>
            <param name="buffer">
            Name of the buffer object to bind to the specified binding point. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CreateBuffers(System.Int32,System.UInt32[])">
            <summary>
            create buffer objects.
            </summary>
            <param name="n">
            Specifies the number of buffer objects to create. 
            </param>
            <param name="buffers">
            Specifies an array in which names of the new buffer objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearNamedBufferData(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            fill a buffer object's data store with a fixed value.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for ClearNamedBufferData. 
            </param>
            <param name="internalformat">
            The internal format with which the data will be stored in the buffer object. 
            </param>
            <param name="format">
            The format of the data in memory addressed by data.
            </param>
            <param name="type">
            The type of the data in memory addressed by data. 
            </param>
            <param name="data">
             The address of a memory location storing the data to be replicated into the buffer's data store.
            </param>
        </member>
        <member name="M:OpenGL.gl.MapNamedBuffer(System.UInt32,System.UInt32)">
            <summary>
            map all of a buffer object's data store into the client's address space.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for MapNamedBuffer. 
            </param>
            <param name="access">
            Specifies the access policy for MapBuffer and MapNamedBuffer,
            indicating whether it will be possible to read from, write to, 
            or both read from and write to the buffer object's mapped data store.
            The symbolic constant must be GL_READ_ONLY, GL_WRITE_ONLY, or GL_READ_WRITE.
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.gl.UnmapNamedBuffer(System.UInt32)">
            <summary>
            release the mapping of a buffer object's data store into the client's address space.
            </summary>
            <param name="buffer">
            Specifies the name of the buffer object for UnmapNamedBuffer. 
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:OpenGL.gl.CreateFramebuffers(System.Int32,System.UInt32[])">
            <summary>
            create framebuffer objects.
            </summary>
            <param name="n">
            Number of framebuffer objects to create.
            </param>
            <param name="framebuffers">
            Specifies an array in which names of the new framebuffer objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.NamedFramebufferRenderbuffer(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            attach a renderbuffer as a logical buffer of a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for NamedFramebufferRenderbuffer. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="renderbuffertarget">
            Specifies the renderbuffer target. Must be GL_RENDERBUFFER. 
            </param>
            <param name="renderbuffer">
            Specifies the name of an existing renderbuffer object of type renderbuffertarget to attach. 
            </param>
        </member>
        <member name="M:OpenGL.gl.NamedFramebufferTexture(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            attach a level of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for NamedFramebufferTexture. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="texture">
            Specifies the name of an existing texture object to attach. 
            </param>
            <param name="level">
            Specifies the mipmap level of the texture object to attach. 
            </param>
        </member>
        <member name="M:OpenGL.gl.NamedFramebufferTextureLayer(System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            attach a sine layer of a texture object as a logical buffer of a framebuffer object.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for NamedFramebufferTextureLayer. 
            </param>
            <param name="attachment">
            Specifies the attachment point of the framebuffer. 
            </param>
            <param name="texture">
            Specifies the name of an existing texture object to attach.
            </param>
            <param name="level">
            Specifies the mipmap level of the texture object to attach. 
            </param>
            <param name="layer">
            Specifies the layer of the texture object to attach. 
            </param>
        </member>
        <member name="M:OpenGL.gl.NamedFramebufferDrawBuffers(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            Specifies a list of color buffers to be drawn into.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for NamedFramebufferDrawBuffers.
            </param>
            <param name="n">
            Specifies the number of buffers in bufs.
            </param>
            <param name="bufs">
            Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            </param>
        </member>
        <member name="M:OpenGL.gl.NamedFramebufferReadBuffer(System.UInt32,System.UInt32)">
            <summary>
            select a color buffer source for pixels.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for NamedFramebufferReadBuffer function.
            </param>
            <param name="mode">
            Specifies a color buffer. 
            Accepted values are GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, 
            GL_BACK, GL_LEFT, GL_RIGHT, and the constants GL_COLOR_ATTACHMENTi.
            </param>
        </member>
        <member name="M:OpenGL.gl.InvalidateNamedFramebufferData(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            invalidate the content of some or all of a framebuffer's attachments.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for InvalidateNamedFramebufferData. 
            </param>
            <param name="numAttachments">
            Specifies the number of entries in the attachments array. 
            </param>
            <param name="attachments">
            Specifies a pointer to an array identifying the attachments to be invalidated. 
            </param>
        </member>
        <member name="M:OpenGL.gl.InvalidateNamedFramebufferSubData(System.UInt32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            invalidate the content of a region of some or all of a framebuffer's attachments.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for InvalidateNamedFramebufferSubData. .
            </param>
            <param name="numAttachments">
            Specifies the number of entries in the attachments array.
            </param>
            <param name="attachments">
            Specifies a pointer to an array identifying the attachments to be invalidated.
            </param>
            <param name="x">
            Specifies the X offset of the region to be invalidated. 
            </param>
            <param name="y">
            Specifies the Y offset of the region to be invalidated. 
            </param>
            <param name="width">
            Specifies the width of the region to be invalidated. 
            </param>
            <param name="height">
            Specifies the height of the region to be invalidated. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BlitNamedFramebuffer(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            copy a block of pixels from one framebuffer object to another.
            </summary>
            <param name="readFramebuffer">
            Specifies the name of the source framebuffer object for BlitNamedFramebuffer. 
            </param>
            <param name="drawFramebuffer">
            Specifies the name of the destination framebuffer object for BlitNamedFramebuffer.
            </param>
            <param name="srcX0">
            Specify the bounds of the source rectane within the read buffer of the read framebuffer. 
            </param>
            <param name="srcY0">
            Specify the bounds of the source rectane within the read buffer of the read framebuffer. 
            </param>
            <param name="srcX1">
            Specify the bounds of the source rectane within the read buffer of the read framebuffer. 
            </param>
            <param name="srcY1">
            Specify the bounds of the source rectane within the read buffer of the read framebuffer. 
            </param>
            <param name="dstX0">
            Specify the bounds of the destination rectane within the write buffer of the write framebuffer.
            </param>
            <param name="dstY0">
            Specify the bounds of the destination rectane within the write buffer of the write framebuffer.
            </param>
            <param name="dstX1">
            Specify the bounds of the destination rectane within the write buffer of the write framebuffer.
            </param>
            <param name="dstY1">
            Specify the bounds of the destination rectane within the write buffer of the write framebuffer.
            </param>
            <param name="mask">
            <para>The bitwise OR of the flags indicating which buffers are to be copied. </para>
            <para>The allowed flags are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT and GL_STENCIL_BUFFER_BIT. </para>
            </param>
            <param name="filter">
            Specifies the interpolation to be applied if the image is stretched. Must be GL_NEAREST or GL_LINEAR. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CheckNamedFramebufferStatus(System.UInt32,System.UInt32)">
            <summary>
            check the completeness status of a framebuffer.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for CheckNamedFramebufferStatus .
            </param>
            <param name="target">
            <para>Specify the target to which the framebuffer is bound for CheckFramebufferStatus, </para>
            <para> and the target against which framebuffer completeness of framebuffer is checked for CheckNamedFramebufferStatus. </para>
            </param>
            <returns>
            return the completeness status of a framebuffer object .
            </returns>
        </member>
        <member name="M:OpenGL.gl.CreateRenderbuffers(System.Int32,System.UInt32[])">
            <summary>
            create renderbuffer objects.
            </summary>
            <param name="n">
            Number of renderbuffer objects to create. 
            </param>
            <param name="renderbuffers">
            Specifies an array in which names of the new renderbuffer objects are stored.
            </param>
        </member>
        <member name="M:OpenGL.gl.NamedRenderbufferStorage(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            establish data storage, format and dimensions of a renderbuffer object's image.
            </summary>
            <param name="renderbuffer">
            Specifies the name of the renderbuffer object for NamedRenderbufferStorage function.
            </param>
            <param name="internalformat">
            Specifies the internal format to use for the renderbuffer object's image.
            </param>
            <param name="width">
            Specifies the width of the renderbuffer, in pixels.
            </param>
            <param name="height">
            Specifies the height of the renderbuffer, in pixels.
            </param>
        </member>
        <member name="M:OpenGL.gl.CreateTextures(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            create texture objects.
            </summary>
            <param name="target">
            Specifies the effective texture target of each created texture. 
            </param>
            <param name="n">
            Number of texture objects to create. 
            </param>
            <param name="textures">
            Specifies an array in which names of the new texture objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureBuffer(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            attach a buffer object's data store to a buffer texture object.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureBuffer. 
            </param>
            <param name="internalformat">
            Specifies the internal format of the data in the store belonging to buffer. 
            </param>
            <param name="buffer">
            Specifies the name of the buffer object whose storage to attach to the active buffer texture. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureStorage1D(System.UInt32,System.Int32,System.UInt32,System.Int32)">
            <summary>
            simultaneously specify storage for all levels of a one-dimensional texture.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureStorage1D. 
            The effective target of texture must be one of the valid non-proxy target values above. 
            </param>
            <param name="levels">
            Specify the number of texture levels. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureStorage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureStorage2D. 
            The effective target of texture must be one of the valid non-proxy target values above. 
            </param>
            <param name="levels">
            Specify the number of texture levels. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels.
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureStorage3D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            simultaneously specify storage for all levels of a three-dimensional, 
            two-dimensional array or cube-map array texture
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureStorage3D. 
            The effective target of texture must be one of the valid non-proxy target values above. 
            </param>
            <param name="levels">
            Specify the number of texture levels. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels. 
            </param>
            <param name="depth">
            Specifies the depth of the texture, in texels. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureStorage2DMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            specify storage for a two-dimensional multisample texture.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureStorage2DMultisample. 
            The effective target of texture must be one of the valid non-proxy target values above. 
            </param>
            <param name="samples">
            Specify the number of samples in the texture. 
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels.
            </param>
            <param name="fixedsamplelocations">
            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image,
            and the sample locations will not depend on the internal format or size of the image. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureStorage3DMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            specify storage for a two-dimensional multisample array texture.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureStorage3DMultisample.
            The effective target of texture must be one of the valid non-proxy target values above. 
            </param>
            <param name="samples">
            Specify the number of samples in the texture.
            </param>
            <param name="internalformat">
            Specifies the sized internal format to be used to store texture image data. 
            </param>
            <param name="width">
            Specifies the width of the texture, in texels. 
            </param>
            <param name="height">
            Specifies the height of the texture, in texels.
            </param>
            <param name="depth">
            Specifies the depth of the texture, in layers.
            </param>
            <param name="fixedsamplelocations">
            Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, 
            and the sample locations will not depend on the internal format or size of the image. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a one-dimensional texture subimage.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureSubImage1D. 
            The effective target of texture must be one of the valid target values above. 
            </param>
            <param name="level">
             Specifies the level-of-detail number.Level 0 is the base image level. Level n is the nth mipmap reduction image.
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the pixel data. 
            The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX. 
            </param>
            <param name="type">
            Specifies the data type of the pixel data. 
            The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT,
            GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, 
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, 
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="pixels">
            Specifies a pointer to the image data in memory. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a two-dimensional texture subimage.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureSubImage2D. 
            The effective target of texture must be one of the valid target values above. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. 
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the pixel data.
            The following symbolic values are accepted: 
            GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX.
            </param>
            <param name="type">
            Specifies the data type of the pixel data.
            The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT,
            GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, 
            and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="pixels">
            Specifies a pointer to the image data in memory. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TextureSubImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a three-dimensional texture subimage.
            </summary>
            <param name="texture">
            Specifies the texture object name for TextureSubImage3D. 
            The effective target of texture must be one of the valid target values above. 
            </param>
            <param name="level">
            Specifies the level-of-detail number. 
            Level 0 is the base image level. Level n is the nth mipmap reduction image. 
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array. 
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage.
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
            <param name="depth">
            Specifies the depth of the texture subimage. 
            </param>
            <param name="format">
            Specifies the format of the pixel data. The following symbolic values are accepted: 
            GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_DEPTH_COMPONENT, and GL_STENCIL_INDEX. 
            </param>
            <param name="type">
            Specifies the data type of the pixel data. The following symbolic values are accepted:
            GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT,
            GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, 
            GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, 
            GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8,
            GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV. 
            </param>
            <param name="pixels">
            Specifies a pointer to the image data in memory. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CompressedTextureSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
             <summary>
            specify a one-dimensional texture subimage in a compressed format.
             </summary>
             <param name="texture">
             Specifies the texture object name for CompressedTextureSubImage1D function.
             </param>
             <param name="level">
             Specifies the level-of-detail number.
             Level 0 is the base image level. Level n is the nth mipmap reduction image.
             </param>
             <param name="xoffset">
             Specifies a texel offset in the x direction within the texture array.
             </param>
             <param name="width">
             Specifies the width of the texture subimage.
             </param>
             <param name="format">
             Specifies the format of the compressed image data stored at address data.
             </param>
             <param name="imageSize">
             Specifies the number of unsigned bytes of image data starting at the address specified by data.
             </param>
             <param name="data">
             Specifies a pointer to the compressed image data in memory.
             </param>
        </member>
        <member name="M:OpenGL.gl.CompressedTextureSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            specify a two-dimensional texture subimage in a compressed format.
            </summary>
            <param name="texture">
            Specifies the texture object name for CompressedTextureSubImage2D function.
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number. </para>
            <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array.
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage.
            </param>
            <param name="height">
            Specifies the height of the texture subimage.
            </param>
            <param name="format">
            Specifies the format of the compressed image data stored at address data.
            </param>
            <param name="imageSize">
            Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </param>
            <param name="data">
            Specifies a pointer to the compressed image data in memory.
            </param>
        </member>
        <member name="M:OpenGL.gl.CompressedTextureSubImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            specify a three-dimensional texture subimage in a compressed format.
            </summary>
            <param name="texture">
            Specifies the texture object name for CompressedTextureSubImage3D function.
            </param>
            <param name="level">
            <para> Specifies the level-of-detail number. </para>
            <para>Level 0 is the base image level. Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array.
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage.
            </param>
            <param name="height">
            Specifies the height of the texture subimage.
            </param>
            <param name="depth">
            Specifies the depth of the texture subimage.
            </param>
            <param name="format">
            Specifies the format of the compressed image data stored at address data.
            </param>
            <param name="imageSize">
             Specifies the number of unsigned bytes of image data starting at the address specified by data.
            </param>
            <param name="data">
            Specifies a pointer to the compressed image data in memory.
            </param>
        </member>
        <member name="M:OpenGL.gl.CopyTextureSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy a one-dimensional texture subimage.
            </summary>
            <param name="texture">
            Specifies the texture object name for CopyTextureSubImage1D function.
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number. Level 0 is the base image level. </para>
            <para>Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="xoffset">
            Specifies the texel offset within the texture array.
            </param>
            <param name="x">
            Specify the window coordinates of the left corner of the row of pixels to be copied.
            </param>
            <param name="y">
            Specify the window coordinates of the left corner of the row of pixels to be copied.
            </param>
            <param name="width">
            Specifies the width of the texture subimage.
            </param>
        </member>
        <member name="M:OpenGL.gl.CopyTextureSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy a two-dimensional texture subimage.
            </summary>
            <param name="texture">
            Specifies the texture object name for CopyTextureSubImage2D function.
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level.
            Level n is the nth mipmap reduction image.
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array.
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="x">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </param>
            <param name="y">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </param>
            <param name="width">
            Specifies the width of the texture subimage.
            </param>
            <param name="height">
            Specifies the height of the texture subimage.
            </param>
        </member>
        <member name="M:OpenGL.gl.CopyTextureSubImage3D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             copy a three-dimensional texture subimage.
             </summary>
             <param name="texture">
             Specifies the texture object name for CopyTextureSubImage3D function.
             </param>
             <param name="level">
             <para>Specifies the level-of-detail number. Level 0 is the base image level.</para>
             <para>Level n is the nth mipmap reduction image.</para>
             </param>
             <param name="xoffset">
             Specifies a texel offset in the x direction within the texture array.
             </param>
             <param name="yoffset">
             Specifies a texel offset in the y direction within the texture array.
             </param>
             <param name="zoffset">
             Specifies a texel offset in the z direction within the texture array.
             </param>
             <param name="x">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
             </param>
             <param name="y">
             Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
             </param>
             <param name="width">
             Specifies the width of the texture subimage.
             </param>
             <param name="height">
             Specifies the height of the texture subimage.
             </param>
        </member>
        <member name="M:OpenGL.gl.GenerateTextureMipmap(System.UInt32)">
            <summary>
            generate mipmaps for a specified texture object.
            </summary>
            <param name="texture">
            Specifies the texture object name for GenerateTextureMipmap. 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindTextureUnit(System.UInt32,System.UInt32)">
            <summary>
            bind an existing texture object to the specified texture unit .
            </summary>
            <param name="unit">
            Specifies the texture unit, to which the texture object should be bound to.
            </param>
            <param name="texture">
            Specifies the name of a texture. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTextureImage(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            return a texture image.
            </summary>
            <param name="texture">
            Specifies the texture object name. 
            </param>
            <param name="level">
            Specifies the level-of-detail number of the desired image. Level 0 is the base image level.
            Level n is the n-th mipmap reduction image.
            </param>
            <param name="format">
            Specifies a pixel format for the returned data. 
            The supported formats are GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, 
            GL_RED, GL_GREEN, GL_BLUE, GL_RG, GL_RGB, GL_RGBA, GL_BGR, GL_BGRA, GL_RED_INTEGER,
            GL_GREEN_INTEGER, GL_BLUE_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_RGBA_INTEGER, 
            GL_BGR_INTEGER, GL_BGRA_INTEGER.
            </param>
            <param name="type">
            Specifies a pixel type for the returned data. 
            The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,
            GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, 
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,
            GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
            GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2,
            GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV,
            GL_UNSIGNED_INT_5_9_9_9_REV, and GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer pixels for GetnTexImage and GetTextureImage functions.
            </param>
            <param name="pixels">
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetCompressedTextureImage(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            return a compressed texture image.
            </summary>
            <param name="texture">
            Specifies the texture object name for GetCompressedTextureImage function.
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number of the desired image. Level 0 is the base image level. Level n is the n-th mipmap reduction image.</para>
            </param>
            <param name="bufSize">
            Specifies the size of the buffer pixels for GetCompressedTextureImage and GetnCompressedTexImage functions.
            </param>
            <param name="pixels">
            Returns the compressed texture image.
            </param>
        </member>
        <member name="M:OpenGL.gl.CreateVertexArrays(System.Int32,System.UInt32[])">
            <summary>
            create vertex array objects.
            </summary>
            <param name="n">
            Number of vertex array objects to create. 
            </param>
            <param name="arrays">
            Specifies an array in which names of the new vertex array objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DisableVertexArrayAttrib(System.UInt32,System.UInt32)">
            <summary>
            disable a generic vertex attribute array.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for DisableVertexArrayAttrib and EnableVertexArrayAttrib functions.
            </param>
            <param name="index">
            Specifies the index of the generic vertex attribute to be disabled.
            </param>
        </member>
        <member name="M:OpenGL.gl.EnableVertexArrayAttrib(System.UInt32,System.UInt32)">
            <summary>
            enable a generic vertex attribute array.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for DisableVertexArrayAttrib and EnableVertexArrayAttrib functions.
            </param>
            <param name="index">
            Specifies the index of the generic vertex attribute to be enabled.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexArrayElementBuffer(System.UInt32,System.UInt32)">
            <summary>
            configures element array buffer binding of a vertex array object.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object. 
            </param>
            <param name="buffer">
            Specifies the name of the buffer object to use for the element array buffer binding. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexArrayAttribBinding(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            associate a vertex attribute and a vertex buffer binding for a vertex array object.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for VertexArrayAttribBinding. 
            </param>
            <param name="attribindex">
            The index of the attribute to associate with a vertex buffer binding. 
            </param>
            <param name="bindingindex">
            The index of the vertex buffer binding with which to associate the generic vertex attribute. 
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexArrayAttribFormat(System.UInt32,System.UInt32,System.Int32,System.UInt32,System.Boolean,System.UInt32)">
            <summary>
            specify the organization of vertex arrays.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for VertexArrayAttrib{I, L}Format functions.
            </param>
            <param name="attribindex">
            The generic vertex attribute array being described.
            </param>
            <param name="size">
            The number of values per vertex that are stored in the array.
            </param>
            <param name="type">
            The type of the data stored in the array.
            </param>
            <param name="normalized">
            Specifies whether fixed-point data values should be normalized (GL_TRUE) or converted directly as fixed-point values (GL_FALSE) when they are accessed. 
            This parameter is ignored if type is GL_FIXED. 
            </param>
            <param name="relativeoffset">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexArrayAttribIFormat(System.UInt32,System.UInt32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            specify the organization of vertex arrays.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for VertexArrayAttrib{I, L}Format functions.
            </param>
            <param name="attribindex">
            The generic vertex attribute array being described.
            </param>
            <param name="size">
            The number of values per vertex that are stored in the array.
            </param>
            <param name="type">
            The type of the data stored in the array.
            </param>
            <param name="relativeoffset">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexArrayAttribLFormat(System.UInt32,System.UInt32,System.Int32,System.UInt32,System.UInt32)">
            <summary>
            specify the organization of vertex arrays.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for VertexArrayAttrib{I, L}Format functions.
            </param>
            <param name="attribindex">
            The generic vertex attribute array being described.
            </param>
            <param name="size">
            The number of values per vertex that are stored in the array.
            </param>
            <param name="type">
            The type of the data stored in the array.
            </param>
            <param name="relativeoffset">
            The distance between elements within the buffer.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexArrayBindingDivisor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            modify the rate at which generic vertex attributes advance.
            </summary>
            <param name="vaobj">
            Specifies the name of the vertex array object for VertexArrayBindingDivisor function.
            </param>
            <param name="bindingindex">
            The index of the binding whose divisor to modify.
            </param>
            <param name="divisor">
            The new value for the instance step rate to apply.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetVertexArrayiv(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            retrieve parameters of a vertex array object.
            </summary>
            <param name="vaobj">
            specifies the name of the vertex array object to use for the query.
            </param>
            <param name="pname">
            Name of the property to use for the query.Must be GL_ELEMENT_ARRAY_BUFFER_BINDING.
            </param>
            <param name="param">
            Returns the requested value.
            </param>
        </member>
        <member name="M:OpenGL.gl.CreateSamplers(System.Int32,System.UInt32[])">
            <summary>
            create sampler objects.
            </summary>
            <param name="n">
            Number of sampler objects to create. 
            </param>
            <param name="samplers">
            Specifies an array in which names of the new sampler objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CreateProgramPipelines(System.Int32,System.UInt32[])">
            <summary>
            create program pipeline objects.
            </summary>
            <param name="n">
            Number of program pipeline objects to create. 
            </param>
            <param name="pipelines">
            Specifies an array in which names of the new program pipeline objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CreateQueries(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            create query objects.
            </summary>
            <param name="target">
            Specifies the target of each created query object. 
            </param>
            <param name="n">
            Number of query objects to create. 
            </param>
            <param name="ids">
            Specifies an array in which names of the new query objects are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.MemoryBarrierByRegion(System.UInt32)">
            <summary>
            defines a barrier ordering memory transactions.
            </summary>
            <param name="barriers">
            <para>Specifies the barriers to insert. </para>
            <para>Only the barrier bits: GL_ATOMIC_COUNTER_BARRIER_BIT, GL_FRAMEBUFFER_BARRIER_BIT ,</para>
            <para>GL_SHADER_IMAGE_ACCESS_BARRIER_BIT ,GL_SHADER_STORAGE_BARRIER_BIT, GL_TEXTURE_FETCH_BARRIER_BIT ,</para>
            <para>GL_UNIFORM_BARRIER_BIT are supported.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTextureSubImage(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            retrieve a sub-region of a texture image from a texture object.
            </summary>
            <param name="texture">
            Specifies the name of the source texture object.
            Must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, 
            GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY or GL_TEXTURE_RECTANGLE. 
            In specific, buffer and multisample textures are not permitted.
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level.
            Level n is the n-th mipmap reduction image.
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array.
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage.
            </param>
            <param name="height">
            Specifies the height of the texture subimage.
            </param>
            <param name="depth">
            Specifies the depth of the texture subimage.
            </param>
            <param name="format">
            Specifies the format of the pixel data. 
            The following symbolic values are accepted: 
            GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_DEPTH_COMPONENT and GL_STENCIL_INDEX.
            </param>
            <param name="type">
            Specifies the data type of the pixel data. 
            The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT,
            GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,
            GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV,
            GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV,
            GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer to receive the retrieved pixel data.
            </param>
            <param name="pixels">
             Returns the texture subimage.Should be a pointer to an array of the type specified by type.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetCompressedTextureSubImage(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            retrieve a sub-region of a compressed texture image from a compressed texture object.
            </summary>
            <param name="texture">
            Specifies the name of the source texture object.
            Must be GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_3D, 
            GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY or GL_TEXTURE_RECTANGLE.
            In specific, buffer and multisample textures are not permitted.
            </param>
            <param name="level">
            Specifies the level-of-detail number. Level 0 is the base image level. 
            Level n is the n-th mipmap reduction image.
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array.
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array.
            </param>
            <param name="zoffset">
            Specifies a texel offset in the z direction within the texture array.
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            Must be a multiple of the compressed block's width, 
            unless the offset is zero and the size equals the texture image size.
            </param>
            <param name="height">
            Specifies the height of the texture subimage.
            Must be a multiple of the compressed block's height, 
            unless the offset is zero and the size equals the texture image size.
            </param>
            <param name="depth">
            Specifies the depth of the texture subimage.
            Must be a multiple of the compressed block's depth, 
            unless the offset is zero and the size equals the texture image size.
            </param>
            <param name="bufSize">
            Specifies the size of the buffer to receive the retrieved pixel data.
            </param>
            <param name="pixels">
            Returns the texture subimage. Should be a pointer to an array of the type specified by type.
            </param>
        </member>
        <member name="M:OpenGL.gl.NamedFramebufferDrawBuffer(System.UInt32,System.UInt32)">
            <summary>
            specify which color buffers are to be drawn into.
            </summary>
            <param name="framebuffer">
            Specifies the name of the framebuffer object for NamedFramebufferDrawBuffer function.
            Must be zero or the name of a framebuffer object.
            </param>
            <param name="mode">
            For default framebuffer, the argument specifies up to four color buffers to be drawn into. 
            Symbolic constants GL_NONE, GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, 
            GL_BACK, GL_LEFT, GL_RIGHT, and GL_FRONT_AND_BACK are accepted. 
            The initial value is GL_FRONT for sine-buffered contexts, and GL_BACK for double-buffered contexts.
            For framebuffer objects, GL_COLOR_ATTACHMENT$m$ and GL_NONE enums are accepted, where $m$ is a value between 0 and GL_MAX_COLOR_ATTACHMENTS.
            </param>
        </member>
        <member name="M:OpenGL.gl.NamedRenderbufferStorageMultisample(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            establish data storage, format, dimensions and sample count of a renderbuffer object's image.
            </summary>
            <param name="renderbuffer">
            Specifies the name of the renderbuffer object for NamedRenderbufferStorageMultisample function.
            </param>
            <param name="samples">
            Specifies the number of samples to be used for the renderbuffer object's storage.
            </param>
            <param name="internalformat">
            Specifies the internal format to use for the renderbuffer object's image.
            </param>
            <param name="width">
            Specifies the width of the renderbuffer, in pixels.
            </param>
            <param name="height">
            Specifies the height of the renderbuffer, in pixels.
            </param>
        </member>
        <member name="M:OpenGL.gl.ReadnPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            read a block of pixels from the frame buffer.
            </summary>
            <param name="x">
            Specify the window coordinates of the first pixel that is readfrom the frame buffer. 
            This location is the lower left corner of arectangular block of pixels.
            </param>
            <param name="y">
            Specify the window coordinates of the first pixel that is readfrom the frame buffer. 
            This location is the lower left corner of arectangular block of pixels.
            </param>
            <param name="width">
            Specify the dimensions of the pixel rectangle. width ofone correspond to a single pixel.
            </param>
            <param name="height">
            Specify the dimensions of the pixel rectangle. height ofone correspond to a single pixel.
            </param>
            <param name="format">
            Specifies the format of the pixel data. 
            The following symbolicvalues are accepted: GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_GREEN, GL_BLUE, GL_RGB, GL_BGR, GL_RGBA, and GL_BGRA.
            </param>
            <param name="type">
            <para>Specifies the data type of the pixel data.</para>
            <para>Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT,</para>
            <para>GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, </para>
            <para>GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV,</para>
            <para>GL_UNSIGNED_INT_10_10_10_2, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_24_8, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV,or GL_FLOAT_32_UNSIGNED_INT_24_8_REV.</para>
            </param>
            <param name="bufSize">
            Specifies the size of the buffer datafor glReadnPixels function.
            </param>
            <param name="data">
            Returns the pixel data.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetnMapdv(System.UInt32,System.UInt32,System.Int32,System.Double[])">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="query"></param>
            <param name="bufSize"></param>
            <param name="v"></param>
        </member>
        <member name="M:OpenGL.gl.TextureBarrier">
            <summary>
            controls the ordering of reads and writes to rendered fragments across drawing commands.
            </summary>
        </member>
        <member name="M:OpenGL.gl.PolygonOffsetClamp(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="factor">
            
            </param>
            <param name="units">
            
            </param>
            <param name="clamp">
            
            </param>
        </member>
        <member name="M:OpenGL.gl.Accum(System.UInt32,System.Single)">
            <summary>
            operate on the accumulation buffer.
            </summary>
            <param name="op">
            <para>Specifies the accumulation buffer operation.</para> 
            <para>Symbolic constants GL_ACCUM, GL_LOAD, GL_ADD, GL_MULT, and GL_RETURN are accepted.</para> 
            </param>
            <param name="value">
            <para>Specifies a floating-point value used in the accumulation buffer operation. </para> 
            <para>op determines how value is used. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.AlphaFunc(System.UInt32,System.Single)">
            <summary>
             specify the alpha test function.
            </summary>
            <param name="func">
            <para> Specifies the alpha comparison function. </para> 
            <para>Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, and GL_ALWAYS are accepted. </para> 
            <para>The initial value is GL_ALWAYS.</para> 
            </param>
            <param name="REF">
            <para>Specifies the reference value that incoming alpha values are compared to.</para>  
            <para>This value is clamped to the range [0,1],where 0 represents the lowest possible alpha value and 1 the highest possible value. </para> 
            <para>The initial reference value is 0.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.AreTexturesResident(System.Int32,System.UInt32[],System.Boolean[])">
            <summary>
            determine if textures are loaded in texture memory.
            </summary>
            <param name="n">
            Specifies the number of textures to be queried.
            </param>
            <param name="textures">
            Specifies an array containing the names of the textures to be queried.
            </param>
            <param name="residences">
            <para>Specifies an array in which the texture residence status is returned. </para> 
            <para>The residence status of a texture named by an element of textures is returned in the corresponding element of residences.</para> 
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.ArrayElement(System.Int32)">
            <summary>
            render a vertex using the specified vertex array element.
            </summary>
            <param name="i">
            Specifies an index into the enabled vertex data arrays. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Begin(System.UInt32)">
            <summary>
            delimit the vertices of a primitive or a group of like primitives.
            </summary>
            <param name="mode">
            <para>Specifies the primitive or primitives that will be created from vertices presented between Begin and the subsequent End.</para> 
            <para>Ten symbolic constants are accepted: </para> 
            <para>GL_POINTS, GL_LINES, GL_LINE_STRIP, GL_LINE_LOOP, GL_TRIANGLES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_QUADS, GL_QUAD_STRIP, and GL_POLYGON.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.BindTexture(System.UInt32,System.UInt32)">
            <summary>
            bind a named texture to a texturing target.
            </summary>
            <param name="target">
            <para>Specifies the target to which the texture is bound. </para> 
            <para> Must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, or GL_TEXTURE_CUBE_MAP.</para> 
            </param>
            <param name="texture">
            Specifies the name of a texture. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Bitmap(System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Byte[])">
            <summary>
            draw a bitmap.
            </summary>
            <param name="width">
            Specify the pixel width of the bitmap image. 
            </param>
            <param name="height">
            Specify the pixel height of the bitmap image. 
            </param>
            <param name="xorig">
            <para>Specify the location of the origin in the bitmap image.</para> 
            <para>The origin is measured from the lower left corner of the bitmap,with right and up being the positive axes. </para> 
            </param>
            <param name="yorig">
            <para>Specify the location of the origin in the bitmap image. </para> 
            <para>The origin is measured from the lower left corner of the bitmap, with right and up being the positive axes. </para> 
            </param>
            <param name="xmove">
            Specify the x offsets to be added to the current raster position after the bitmap is drawn.
            </param>
            <param name="ymove">
            Specify the y offsets to be added to the current raster position after the bitmap is drawn.
            </param>
            <param name="bitmap">
            Specifies the array of the bitmap image.
            </param>
        </member>
        <member name="M:OpenGL.gl.BlendFunc(System.UInt32,System.UInt32)">
            <summary>
            specify pixel arithmetic.
            </summary>
            <param name="sfactor">
            <para>Specifies how the red, green, blue, and alpha source blending factors are computed.</para> 
            <para>The following symbolic constants are accepted:</para> 
            <para>GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA,</para> 
            <para>GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA, GL_CONSTANT_COLOR,GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CONSTANT_ALPHA, and GL_SRC_ALPHA_SATURATE.</para> 
            <para> The initial value is GL_ONE. </para> 
            </param>
            <param name="dfactor">
            <para>Specifies how the red, green, blue, and alpha destination blending factors are computed.</para> 
            <para> The following symbolic constants are accepted: GL_ZERO, GL_ONE, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR,</para> 
            <para>GL_DST_COLOR, GL_ONE_MINUS_DST_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_DST_ALPHA, GL_ONE_MINUS_DST_ALPHA.</para> 
            <para>GL_CONSTANT_COLOR, GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, and GL_ONE_MINUS_CONSTANT_ALPHA.</para> 
            <para>The initial value is GL_ZERO. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.CallList(System.UInt32)">
            <summary>
            execute a display list.
            </summary>
            <param name="list">
            Specifies the integer name of the display list to be executed.
            </param>
        </member>
        <member name="M:OpenGL.gl.CallLists(System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            execute a list of display lists.
            </summary>
            <param name="n">
            Specifies the number of display lists to be executed.
            </param>
            <param name="type">
            <para>Specifies the type of values in lists. </para> 
            <para>Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT,</para> 
            <para> GL_FLOAT, GL_2_BYTES, GL_3_BYTES, and GL_4_BYTES are accepted. </para> 
            </param>
            <param name="lists">
            <para>Specifies the address of an array of name offsets in the display list. </para> 
            <para>The pointer type is void because the offsets can be bytes, shorts, ints, or floats, depending on the value of type. </para> 
            <para>pleae using the function GLAUX.GetArrayPointer to get array pointer.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.Clear(System.UInt32)">
            <summary>
            clear buffers to preset values.
            </summary>
            <param name="mask">
            <para> Bitwise OR of masks that indicate the buffers to be cleared.</para> 
            <para>The four masks are GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_ACCUM_BUFFER_BIT,and GL_STENCIL_BUFFER_BIT.</para>  
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearAccum(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            specify clear values for the accumulation buffer.
            </summary>
            <param name="red">
            Specify the red value used when the accumulation buffer is cleared. The initial value is  0. 
            </param>
            <param name="green">
            Specify the green value used when the accumulation buffer is cleared. The initial value is  0. 
            </param>
            <param name="blue">
            Specify the blue value used when the accumulation buffer is cleared. The initial value is  0. 
            </param>
            <param name="alpha">
            Specify the  alpha value used when the accumulation buffer is cleared. The initial value is  0. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            specify clear values for the color buffers.
            </summary>
            <param name="red">
            Specify the red value used when the color buffers are cleared. The initial value is 0. 
            </param>
            <param name="green">
            Specify the green value used when the color buffers are cleared. The initial value is 0. 
            </param>
            <param name="blue">
            Specify the  blue value used when the color buffers are cleared. The initial value is 0. 
            </param>
            <param name="alpha">
            Specify the  alpha value used when the color buffers are cleared. The initial value is 0. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearDepth(System.Double)">
            <summary>
            specify the clear value for the depth buffer.
            </summary>
            <param name="depth">
            Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearIndex(System.Single)">
            <summary>
            specify the clear value for the color index buffers.
            </summary>
            <param name="c">
            Specifies the index used when the color index buffers are cleared. The initial value is 0. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClearStencil(System.Int32)">
            <summary>
            specify the clear value for the stencil buffer.
            </summary>
            <param name="s">
            Specifies the index used when the stencil buffer is cleared. The initial value is 0. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ClipPlane(System.UInt32,System.Double[])">
            <summary>
            specify a plane against which all geometry is clipped.
            </summary>
            <param name="plane">
            <para>Specifies which clipping plane is being positioned. </para> 
            <para>Symbolic names of the form GL_CLIP_PLANEi, where i is an integer between 0 and GL_MAX_CLIP_PLANES-1, are accepted. </para> 
            </param>
            <param name="equation">
            <para>Specifies an array of four double-precision floating-point values. </para> 
            <para>These values are interpreted as a plane equation.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.SByte,System.SByte,System.SByte)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red  value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.SByte[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies an array that contains red, green, blue values. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.Double,System.Double,System.Double)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.Double[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.Single,System.Single,System.Single)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.Single[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.Int32[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.Int16[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.Byte,System.Byte,System.Byte)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.Byte[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.UInt32[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new green value for the current color. 
            </param>
            <param name="blue">
            Specify new blue value for the current color. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color3(System.UInt16[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue values.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.SByte,System.SByte,System.SByte,System.SByte)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument Color4 commands.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.SByte[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument Color4 commands.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.Double[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument Color4 commands.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.Single[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument Color4 commands.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.Int32[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument Color4 commands.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.Int16[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument Color4 commands.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.Byte[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument Color4 commands.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.UInt32[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            set the current color.
            </summary>
            <param name="red">
            Specify new red value for the current color. 
            </param>
            <param name="green">
            Specify new  green value for the current color. 
            </param>
            <param name="blue">
            Specify new  blue value for the current color. 
            </param>
            <param name="alpha">
            Specifies a new alpha value for the current color. Included only in the four-argument Color4 commands.
            </param>
        </member>
        <member name="M:OpenGL.gl.Color4(System.UInt16[])">
            <summary>
            set the current color.
            </summary>
            <param name="v">
            Specifies  an array that contains red, green, blue, and  alpha values. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ColorMask(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             enable and disable writing of frame buffer color components.
            </summary>
            <param name="red">
            <para>Specify whether red can or cannot be written into the frame buffer. The initial value is  GL_TRUE, </para> 
            <para> indicating that the color component can be written. </para> 
            </param>
            <param name="green">
            <para> Specify whether green can or cannot be written into the frame buffer. The initial value is  GL_TRUE, </para> 
            <para>indicating that the color component can be written. </para> 
            </param>
            <param name="blue">
            <para>Specify whether blue can or cannot be written into the frame buffer. The initial value is  GL_TRUE, </para> 
            <para>indicating that the color component can be written. </para> 
            </param>
            <param name="alpha">
            <para>Specify whether alpha can or cannot be written into the frame buffer. The initial value is  GL_TRUE, </para> 
            <para>indicating that the color component can be written. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.ColorMaterial(System.UInt32,System.UInt32)">
            <summary>
            cause a material color to track the current color.
            </summary>
            <param name="face">
            <para> Specifies whether front, back, or both front and back material parameters should track the current color.</para> 
            <para>Accepted values are GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK. </para> 
            <para>The initial value is GL_FRONT_AND_BACK. </para> 
            </param>
            <param name="mode">
            <para>Specifies which of several material parameters track the current color. </para> 
            <para>Accepted values are GL_EMISSION, GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, and GL_AMBIENT_AND_DIFFUSE.</para> 
            <para>The initial value is GL_AMBIENT_AND_DIFFUSE. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.ColorPointer(System.Int32,System.UInt32,System.Int32,System.IntPtr)">
             <summary>
             define an array of colors.
             </summary>
             <param name="size">
             Specifies the number of components per color. Must be 3 or 4. The initial value is 4. 
             </param>
             <param name="type">
             <para>Specifies the data type of each color component in the array. </para> 
            <para> Symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, GL_UNSIGNED_INT, </para> 
             <para>GL_FLOAT, and GL_DOUBLE are accepted. The initial value is GL_FLOAT. </para> 
             </param>
             <param name="stride">
             <para>Specifies the byte offset between consecutive colors. </para> 
             <para>If stride is 0, the colors are understood to be tightly packed in the array.</para> 
             <para>The initial value is 0. </para> 
             </param>
             <param name="pointer">
             <para>Specifies a pointer to the first component of the first color element in the array.</para> 
             <para>The initial value is 0. </para> 
             <para>please using the function GLAX.GetArrayPointer to get the array pointer.</para> 
             </param>
        </member>
        <member name="M:OpenGL.gl.CopyPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            copy pixels in the frame buffer.
            </summary>
            <param name="x">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. 
            </param>
            <param name="y">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied. 
            </param>
            <param name="width">
            Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative. 
            </param>
            <param name="height">
            Specify the dimensions of the rectangular region of pixels to be copied. Both must be nonnegative. 
            </param>
            <param name="type">
            <para>Specifies whether color values, depth values, or stencil values are to be copied. </para> 
            <para>Symbolic constants GL_COLOR, GL_DEPTH, and GL_STENCIL are accepted. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.CopyTexImage1D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy pixels into a 1D texture image.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_1D. 
            </param>
            <param name="level">
            <para> Specifies the level-of-detail number. Level 0 is the base image level.</para> 
            <para> Level n is the nth mipmap reduction image. </para> 
            </param>
            <param name="internalFormat">
            <para>Specifies the internal format of the texture.</para> 
            <para>Must be one of the following symbolic constants: </para> 
            <para>GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY,</para>  
            <para> GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16,GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8,</para> 
            <para>GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2,GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, </para> 
            <para>GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_RGB, GL_R3_G3_B2,GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, </para> 
            <para> GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8. </para> 
            </param>
            <param name="x">
            Specify the window coordinates of the left corner of the row of pixels to be copied. 
            </param>
            <param name="y">
            Specify the window coordinates of the left corner of the row of pixels to be copied. 
            </param>
            <param name="width">
            <para> Specifies the width of the texture image. Must be 0 or 2^n+2﻿(border) for some integer n. </para> 
            <para>The height of the texture image is 1. </para> 
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CopyTexImage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy pixels into a 2D texture image.
            </summary>
            <param name="target">
            <para>Specifies the target texture. </para> 
            <para>Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,</para> 
            <para>GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z. </para> 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number. Level 0 is the base image level.</para> 
            <para>Level n is the nth mipmap reduction image. </para> 
            </param>
            <param name="internalFormat">
            <para>Specifies the internal format of the texture. </para> 
            <para>Must be one of the following symbolic constants: </para> 
            <para> GL_ALPHA, GL_ALPHA4, GL_ALPHA8, GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA,GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA, GL_COMPRESSED_INTENSITY, </para> 
            <para>GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16,GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, </para> 
            <para>GL_LUMINANCE12, GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2,GL_LUMINANCE8_ALPHA8, GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16,</para> 
            <para>GL_INTENSITY, GL_INTENSITY4, GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_RGB, GL_R3_G3_B2,GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1,</para>  
            <para> GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16, GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA,GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8. </para> 
            </param>
            <param name="x">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </param>
            <param name="y">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </param>
            <param name="width">
            Specifies the width of the texture image. Must be 0 or 2^n+2﻿(border) for some integer n. 
            </param>
            <param name="height">
            Specifies the height of the texture image. Must be 0 or 2^m+2﻿(border) for some integer m. 
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CopyTexSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy a one-dimensional texture subimage.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_1D. 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number. Level 0 is the base image level.</para> 
            <para>Level n is the nth mipmap reduction image. </para> 
            </param>
            <param name="xoffset">
            Specifies the texel offset within the texture array. 
            </param>
            <param name="x">
            Specify the window coordinates of the left corner of the row of pixels to be copied. 
            </param>
            <param name="y">
            Specify the window coordinates of the left corner of the row of pixels to be copied. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CopyTexSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            copy a two-dimensional texture subimage.
            </summary>
            <param name="target">
            <para>Specifies the target texture. </para> 
            <para>Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,</para> 
            <para>GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z,or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z. </para> 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number. Level 0 is the base image level.</para> 
            <para>Level n is the nth mipmap reduction image. </para> 
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="yoffset">
            Specifies a texel offset in the y direction within the texture array. 
            </param>
            <param name="x">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </param>
            <param name="y">
            Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="height">
            Specifies the height of the texture subimage. 
            </param>
        </member>
        <member name="M:OpenGL.gl.CullFace(System.UInt32)">
            <summary>
            specify whether front- or back-facing facets can be culled.
            </summary>
            <param name="mode">
            <para>Specifies whether front- or back-facing facets are candidates for culling. </para> 
            <para>Symbolic constants GL_FRONT, GL_BACK, and GL_FRONT_AND_BACK are accepted. </para> 
            <para>The initial value is GL_BACK. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.DeleteLists(System.UInt32,System.Int32)">
            <summary>
            delete a contiguous group of display lists.
            </summary>
            <param name="list">
            Specifies the integer name of the first display list to delete. 
            </param>
            <param name="range">
            Specifies the number of display lists to delete. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DeleteTextures(System.Int32,System.UInt32[])">
            <summary>
            delete named textures.
            </summary>
            <param name="n">
            Specifies the number of textures to be deleted.
            </param>
            <param name="textures">
            Specifies an array of textures to be deleted. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DepthFunc(System.UInt32)">
            <summary>
            specify the value used for depth buffer comparisons.
            </summary>
            <param name="func">
            <para>Specifies the depth comparison function. </para> 
            <para>Symbolic constants GL_NEVER, GL_LESS, GL_EQUAL, GL_LEQUAL, GL_GREATER, GL_NOTEQUAL, GL_GEQUAL, </para> 
            <para>and GL_ALWAYS are accepted. The initial value is GL_LESS. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.DepthMask(System.Boolean)">
            <summary>
            enable or disable writing into the depth buffer.
            </summary>
            <param name="flag">
            <para>Specifies whether the depth buffer is enabled for writing. </para> 
            <para>If flag is GL_FALSE, depth buffer writing is disabled. Otherwise, it is enabled.</para> 
            <para>Initially, depth buffer writing is enabled. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.DepthRange(System.Double,System.Double)">
            <summary>
            specify mapping of depth values from normalized device coordinates to window coordinates.
            </summary>
            <param name="zNear">
            Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0. 
            </param>
            <param name="zFar">
            Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
            </param>
        </member>
        <member name="M:OpenGL.gl.Disable(System.UInt32)">
            <summary>
            disable server-side GL capabilities.
            </summary>
            <param name="cap">
            Specifies a symbolic constant indicating a GL capability.
            </param>
        </member>
        <member name="M:OpenGL.gl.DisableClientState(System.UInt32)">
            <summary>
            disable client-side capability.
            </summary>
            <param name="array">
            <para>Specifies the capability to disable.</para> 
            <para>Symbolic constants GL_COLOR_ARRAY, GL_EDGE_FLAG_ARRAY, GL_FOG_COORD_ARRAY, GL_INDEX_ARRAY,</para> 
            <para>GL_NORMAL_ARRAY, GL_SECONDARY_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY, and GL_VERTEX_ARRAY are accepted. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawArrays(System.UInt32,System.Int32,System.Int32)">
            <summary>
            render primitives from array data.
            </summary>
            <param name="mode">
            <para>Specifies what kind of primitives to render. </para> 
            <para>Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES, GL_TRIANGLE_STRIP,</para> 
            <para>GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted</para> 
            </param>
            <param name="first">
            Specifies the starting index in the enabled arrays. 
            </param>
            <param name="count">
            Specifies the number of indices to be rendered. 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawBuffer(System.UInt32)">
            <summary>
            specify which color buffers are to be drawn into.
            </summary>
            <param name="mode">
            <para>Specifies up to four color buffers to be drawn into.</para> 
            <para>Symbolic constants GL_NONE, GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT, GL_BACK, GL_LEFT, GL_RIGHT, GL_FRONT_AND_BACK,</para>  
            <para>and GL_AUXi, where i is between 0 and the value of GL_AUX_BUFFERS minus 1, are accepted.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawElements(System.UInt32,System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            render primitives from array data.
            </summary>
            <param name="mode">
            <para>Specifies what kind of primitives to render. </para> 
            <para>Symbolic constants GL_POINTS, GL_LINE_STRIP, GL_LINE_LOOP, GL_LINES,GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_TRIANGLES, GL_QUAD_STRIP, GL_QUADS, and GL_POLYGON are accepted. </para> 
            </param>
            <param name="count">
            Specifies the number of elements to be rendered.
            </param>
            <param name="type">
            <para>Specifies the type of the values in indices.</para> 
            <para>Must be one of GL_UNSIGNED_BYTE, GL_UNSIGNED_SHORT, or GL_UNSIGNED_INT. </para> 
            </param>
            <param name="indices">
            <para>Specifies a pointer to the location where the indices are stored. </para> 
            <para>please using the function GLAX.GetArrayPointer to get array pointer.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.DrawPixels(System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            write a block of pixels to the frame buffer.
            </summary>
            <param name="width">
            Specify the dimensions of the pixel rectangle to be written into the frame buffer. 
            </param>
            <param name="height">
            Specify the dimensions of the pixel rectangle to be written into the frame buffer. 
            </param>
            <param name="format">
            <para>Specifies the format of the pixel data. </para> 
            <para>Symbolic constants GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT,GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_LUMINANCE, </para> 
            <para>and GL_LUMINANCE_ALPHA are accepted.</para> 
            </param>
            <param name="type">
            <para>Specifies the data type for data. </para> 
            <para>Symbolic constants GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT,GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,</para> 
            <para>GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, </para> 
            <para>GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2,and GL_UNSIGNED_INT_2_10_10_10_REV are accepted. </para> 
            </param>
            <param name="pixels">
            <para>Specifies a pointer to the pixel data. </para> 
            <para> please using the function GLAX.GetArrayPointer to get array pointer.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.EdgeFlag(System.Boolean)">
            <summary>
            flag edges as either boundary or nonboundary.
            </summary>
            <param name="flag">
            Specifies the current edge flag value, either GL_TRUE or GL_FALSE. The initial value is GL_TRUE. 
            </param>
        </member>
        <member name="M:OpenGL.gl.EdgeFlagPointer(System.Int32,System.IntPtr)">
            <summary>
            define an array of edge flags.
            </summary>
            <param name="stride">
            <para>Specifies the byte offset between consecutive edge flags. </para> 
            <para>If stride is 0, the edge flags are understood to be tightly packed in the array. </para> 
            <para>The initial value is 0. </para> 
            </param>
            <param name="pointer">
            <para>Specifies a pointer to the first edge flag in the bool array. The initial value is 0.</para> 
            <para>you can use the function GLAX.GetArrayPointer to get the bool array pointer.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.EdgeFlag(System.Boolean[])">
            <summary>
            flag edges as either boundary or nonboundary.
            </summary>
            <param name="flag">
            Specifies an array that contains a single boolean element, which replaces the current edge flag value. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Enable(System.UInt32)">
            <summary>
            enable server-side GL capabilities
            </summary>
            <param name="cap">
            Specifies a symbolic constant indicating a GL capability. 
            </param>
        </member>
        <member name="M:OpenGL.gl.EnableClientState(System.UInt32)">
            <summary>
            enable  client-side capability
            </summary>
            <param name="array">
            <para> Specifies the capability to enable. </para> 
            <para>Symbolic constants GL_COLOR_ARRAY, GL_EDGE_FLAG_ARRAY, GL_FOG_COORD_ARRAY, GL_INDEX_ARRAY, </para> 
            <para>GL_NORMAL_ARRAY, GL_SECONDARY_COLOR_ARRAY, GL_TEXTURE_COORD_ARRAY, and GL_VERTEX_ARRAY are accepted.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.End">
            <summary>
            delimit the vertices of a primitive or a group of like primitives.
            </summary>
        </member>
        <member name="M:OpenGL.gl.EndList">
            <summary>
            create or replace a display list.
            </summary>
        </member>
        <member name="M:OpenGL.gl.EvalCoord1(System.Double)">
            <summary>
            evaluate enabled one- dimensional maps
            </summary>
            <param name="u">
            Specifies a value that is the domain coordinate u to the basis function defined in a previous Map1 command. 
            </param>
        </member>
        <member name="M:OpenGL.gl.EvalCoord1(System.Double[])">
            <summary>
            evaluate enabled one-dimensional maps
            </summary>
            <param name="u">
            Specifies an array containing either one domain coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.EvalCoord1(System.Single)">
            <summary>
            evaluate enabled one- dimensional maps
            </summary>
            <param name="u">
            Specifies a value that is the domain coordinate u to the basis function defined in a previous Map1 command. 
            </param>
        </member>
        <member name="M:OpenGL.gl.EvalCoord1(System.Single[])">
            <summary>
            evaluate enabled one-dimensional maps
            </summary>
            <param name="u">
            Specifies an array containing either one domain coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.EvalCoord2(System.Double,System.Double)">
            <summary>
            evaluate enabled two-dimensional maps
            </summary>
            <param name="u">
            Specifies a value that is the domain coordinate u to the basis function defined in a previous Map2 command. 
            </param>
            <param name="v">
            <para>Specifies a value that is the domain coordinate v to the basis function defined in a previous Map2 command.</para> 
            <para>This argument is not present in a EvalCoord1 command. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.EvalCoord2(System.Double[])">
            <summary>
            evaluate enabled  two-dimensional maps.
            </summary>
            <param name="u">
            <para>Specifies a pointer to an array containing  two domain coordinates. </para> 
            <para>The first coordinate is u. The second coordinate is v, which is present only in EvalCoord2 versions. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.EvalCoord2(System.Single,System.Single)">
            <summary>
            evaluate enabled two-dimensional maps
            </summary>
            <param name="u">
            Specifies a value that is the domain coordinate u to the basis function defined in a previous Map2 command. 
            </param>
            <param name="v">
            <para>Specifies a value that is the domain coordinate v to the basis function defined in a previous Map2 command.</para> 
            <para>This argument is not present in a EvalCoord1 command. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.EvalCoord2(System.Single[])">
            <summary>
            evaluate enabled  two-dimensional maps.
            </summary>
            <param name="u">
            <para>Specifies a pointer to an array containing  two domain coordinates. </para> 
            <para>The first coordinate is u. The second coordinate is v, which is present only in EvalCoord2 versions. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.EvalMesh1(System.UInt32,System.Int32,System.Int32)">
            <summary>
            compute a one-dimensional grid of points or lines
            </summary>
            <param name="mode">
            <para>In EvalMesh1, specifies whether to compute a one-dimensional mesh of points or lines.</para> 
            <para>Symbolic constants GL_POINT and GL_LINE are accepted. </para> 
            </param>
            <param name="i1">
            Specify the first  integer values for grid domain variable i1. 
            </param>
            <param name="i2">
            Specify the last integer values for grid domain variable i2. 
            </param>
        </member>
        <member name="M:OpenGL.gl.EvalMesh2(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            compute a two-dimensional grid of points or lines
            </summary>
            <param name="mode">
            <para>In EvalMesh2, specifies whether to compute a two-dimensional mesh of points, lines, or polygons.</para> 
            <para>Symbolic constants GL_POINT, GL_LINE, and GL_FILL are accepted. </para> 
            </param>
            <param name="i1">
            Specify the first integer values for grid domain variable i.
            </param>
            <param name="i2">
            Specify the  last integer values for grid domain variable i.
            </param>
            <param name="j1">
            Specify the first integer values for grid domain variable j.
            </param>
            <param name="j2">
            Specify the last integer values for grid domain variable j.
            </param>
        </member>
        <member name="M:OpenGL.gl.EvalPoint1(System.Int32)">
            <summary>
            generate and evaluate a single point in a mesh.
            </summary>
            <param name="i">
            Specifies the integer value for grid domain variable i. 
            </param>
        </member>
        <member name="M:OpenGL.gl.EvalPoint2(System.Int32,System.Int32)">
            <summary>
            generate and evaluate a single point in a mesh.
            </summary>
            <param name="i">
            Specifies the integer value for grid domain variable i.
            </param>
            <param name="j">
            Specifies the integer value for grid domain variable j (glEvalPoint2 only).
            </param>
        </member>
        <member name="M:OpenGL.gl.FeedbackBuffer(System.Int32,System.UInt32,System.Single[])">
            <summary>
            controls feedback mode.
            </summary>
            <param name="size">
            Specifies the maximum number of values that can be written into buffer.
            </param>
            <param name="type">
            <para>Specifies a symbolic constant that describes the information that will be returned for each vertex.</para> 
            <para>GL_2D, GL_3D, GL_3D_COLOR, GL_3D_COLOR_TEXTURE, and GL_4D_COLOR_TEXTURE are accepted.</para> 
            </param>
            <param name="buffer">
            Returns the feedback data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Finish">
            <summary>
            block until all GL execution is complete.
            </summary>
        </member>
        <member name="M:OpenGL.gl.Flush">
            <summary>
            force execution of GL commands in finite time
            </summary>
        </member>
        <member name="M:OpenGL.gl.Fog(System.UInt32,System.Single)">
            <summary>
            specify fog parameters.
            </summary>
            <param name="pname">
            <para>Specifies a single-valued fog parameter. </para> 
            <para>GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, and GL_FOG_COORD_SRC are accepted. </para> 
            </param>
            <param name="param">
            Specifies the value that pname will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Fog(System.UInt32,System.Single[])">
            <summary>
            specify fog parameters.
            </summary>
            <param name="pname">
            <para>Specifies a fog parameter. </para> 
            <para>GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, GL_FOG_COLOR,and GL_FOG_COORD_SRC are accepted. </para> 
            </param>
            <param name="Params">
            <para>Specifies the value or values to be assigned to pname. </para> 
            <para>GL_FOG_COLOR requires an array of four values.</para> 
            <para>All other parameters accept an array containing only a single value. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.Fog(System.UInt32,System.Int32)">
            <summary>
            specify fog parameters.
            </summary>
            <param name="pname">
            <para>Specifies a single-valued fog parameter. </para> 
            <para>GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, and GL_FOG_COORD_SRC are accepted.</para>  
            </param>
            <param name="param">
            Specifies the value that pname will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Fog(System.UInt32,System.Int32[])">
            <summary>
            specify fog parameters.
            </summary>
            <param name="pname">
            <para>Specifies a fog parameter. </para> 
            <para>GL_FOG_MODE, GL_FOG_DENSITY, GL_FOG_START, GL_FOG_END, GL_FOG_INDEX, GL_FOG_COLOR,and GL_FOG_COORD_SRC are accepted. </para> 
            </param>
            <param name="Params">
            <para>Specifies the value or values to be assigned to pname. </para> 
            <para>GL_FOG_COLOR requires an array of four values.</para> 
            <para> All other parameters accept an array containing only a single value. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.FrontFace(System.UInt32)">
            <summary>
            define front- and back-facing polygons.
            </summary>
            <param name="mode">
            <para>Specifies the orientation of front-facing polygons. GL_CW and GL_CCW are accepted.</para> 
            <para>The initial value is GL_CCW.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.Frustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            multiply the current matrix by a perspective matrix.
            </summary>
            <param name="left">
            Specify the coordinates for the left vertical clipping planes.
            </param>
            <param name="right">
            Specify the coordinates for the right vertical clipping planes.
            </param>
            <param name="bottom">
            Specify the coordinates for the bottom  horizontal clipping planes. 
            </param>
            <param name="top">
            Specify the coordinates for the top horizontal clipping planes. 
            </param>
            <param name="zNear">
            Specify the distances to the near depth clipping planes. The distance must be positive. 
            </param>
            <param name="zFar">
            Specify the distances to the far depth clipping planes. The distance must be positive. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GenLists(System.Int32)">
            <summary>
            generate a contiguous set of empty display lists.
            </summary>
            <param name="range">
            Specifies the number of contiguous empty display lists to be generated. 
            </param>
            <returns>
            <para>It returns an integer n such that range contiguous empty display lists,named n, n+1, ..., n+range−1, are created.</para>
            </returns>
        </member>
        <member name="M:OpenGL.gl.GenTextures(System.Int32,System.UInt32[])">
            <summary>
            generate texture names.
            </summary>
            <param name="n">
            Specifies the number of texture names to be generated. 
            </param>
            <param name="textures">
            Specifies an array in which the generated texture names are stored. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetBoolean(System.UInt32,System.Boolean[])">
            <summary>
            return the value or values of a selected parameter
            </summary>
            <param name="pname">
            <para>Specifies the parameter value to be returned. </para> 
            <para>The symbolic constants in the list below are accepted. </para> 
            </param>
            <param name="Params">
            Returns the value or values of the specified parameter.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetClipPlane(System.UInt32,System.Double[])">
            <summary>
            return the coefficients of the specified clipping plane.
            </summary>
            <param name="plane">
            <para>Specifies a clipping plane. </para> 
            <para>The number of clipping planes depends on the implementation,but at least six clipping planes are supported. </para> 
            <para>They are identified by symbolic names of the form GL_CLIP_PLANEi where i ranges from 0 to the value of GL_MAX_CLIP_PLANES - 1.</para> 
            </param>
            <param name="equation">
            <para>Returns four double-precision values that are the coefficients of the plane equation of plane in eye coordinates. </para> 
            <para>The initial value is (0, 0, 0, 0). </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetDouble(System.UInt32,System.Double[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="pname">
            Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. 
            </param>
            <param name="Params">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetError">
            <summary>
            return error information.
            </summary>
            <returns>
            returns the value of the error flag.
            </returns>
        </member>
        <member name="M:OpenGL.gl.GetFloat(System.UInt32,System.Single[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="pname">
            Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. 
            </param>
            <param name="Params">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetInteger(System.UInt32,System.Int32[])">
            <summary>
            return the value or values of a selected parameter.
            </summary>
            <param name="pname">
            Specifies the parameter value to be returned. The symbolic constants in the list below are accepted. 
            </param>
            <param name="Params">
            Returns the value or values of the specified parameter. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetLight(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return light source parameter values
            </summary>
            <param name="light">
            <para>Specifies a light source. </para> 
            <para>The number of possible lights depends on the implementation, but at least eight lights are supported.</para> 
            <para>They are identified by symbolic names of the form GL_LIGHTi where i ranges from 0 to the value of GL_MAX_LIGHTS - 1. </para> 
            </param>
            <param name="pname">
            <para>Specifies a light source parameter for light.</para> 
            <para>Accepted symbolic names are GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT, </para> 
            <para>GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION. </para> 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetLight(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return light source parameter values
            </summary>
            <param name="light">
            <para>Specifies a light source. </para> 
            <para>The number of possible lights depends on the implementation, but at least eight lights are supported.</para> 
            <para>They are identified by symbolic names of the form GL_LIGHTi where i ranges from 0 to the value of GL_MAX_LIGHTS - 1. </para> 
            </param>
            <param name="pname">
            <para>Specifies a light source parameter for light.</para> 
            <para>Accepted symbolic names are GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT, </para> 
            <para>GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION. </para> 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetMap(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            return evaluator parameters.
            </summary>
            <param name="target">
            <para>Specifies the symbolic name of a map.</para> 
            <para>Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1,</para> 
            <para>GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, </para> 
            <para>GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1,</para> 
            <para>GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, and GL_MAP2_VERTEX_4.</para> 
            </param>
            <param name="query">
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted. 
            </param>
            <param name="v">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetMap(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return evaluator parameters.
            </summary>
            <param name="target">
            <para>Specifies the symbolic name of a map.</para> 
            <para>Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1,</para> 
            <para>GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, </para> 
            <para>GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1,</para> 
            <para>GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3, and GL_MAP2_VERTEX_4.</para> 
            </param>
            <param name="query">
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted. 
            </param>
            <param name="v">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetMap(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return evaluator parameters.
            </summary>
            <param name="target">
            <para>Specifies the symbolic name of a map.</para> 
            <para>Accepted values are GL_MAP1_COLOR_4, GL_MAP1_INDEX, GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1,</para> 
            <para>GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3, GL_MAP1_TEXTURE_COORD_4, GL_MAP1_VERTEX_3, </para> 
            <para> GL_MAP1_VERTEX_4, GL_MAP2_COLOR_4, GL_MAP2_INDEX, GL_MAP2_NORMAL, GL_MAP2_TEXTURE_COORD_1,</para> 
            <para>GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3, GL_MAP2_TEXTURE_COORD_4, GL_MAP2_VERTEX_3,and GL_MAP2_VERTEX_4.</para> 
            </param>
            <param name="query">
            Specifies which parameter to return. Symbolic names GL_COEFF, GL_ORDER, and GL_DOMAIN are accepted. 
            </param>
            <param name="v">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetMaterial(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return material parameters.
            </summary>
            <param name="face">
            <para>Specifies which of the two materials is being queried.</para> 
            <para>GL_FRONT or GL_BACK are accepted, representing the front and back materials, respectively. </para> 
            </param>
            <param name="pname">
            <para>Specifies the material parameter to return.</para> 
            <para>GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, and GL_COLOR_INDEXES are accepted. </para> 
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetMaterial(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return material parameters.
            </summary>
            <param name="face">
            <para>Specifies which of the two materials is being queried.</para> 
            <para>GL_FRONT or GL_BACK are accepted, representing the front and back materials, respectively. </para> 
            </param>
            <param name="pname">
            <para>Specifies the material parameter to return.</para> 
            <para>GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, and GL_COLOR_INDEXES are accepted.</para>  
            </param>
            <param name="Params">
            Returns the requested data.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetPixelMap(System.UInt32,System.Single[])">
            <summary>
            return the specified pixel map.
            </summary>
            <param name="map">
            <para>Specifies the name of the pixel map to return. </para> 
            <para>Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, </para> 
            <para>GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, </para> 
            <para>GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A. </para> 
            </param>
            <param name="values">
            Returns the pixel map contents. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetPixelMap(System.UInt32,System.UInt32[])">
            <summary>
            return the specified pixel map.
            </summary>
            <param name="map">
            <para>Specifies the name of the pixel map to return. </para> 
            <para>Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, </para> 
            <para>GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, </para> 
            <para>GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A. </para> 
            </param>
            <param name="values">
            Returns the pixel map contents. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetPixelMap(System.UInt32,System.UInt16[])">
            <summary>
            return the specified pixel map.
            </summary>
            <param name="map">
            <para>Specifies the name of the pixel map to return. </para>
            <para>Accepted values are GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R, </para> 
            <para>GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R, </para> 
            <para>GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, and GL_PIXEL_MAP_A_TO_A. </para> 
            </param>
            <param name="values">
            Returns the pixel map contents. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetPointer(System.UInt32,System.IntPtr[])">
            <summary>
            return the address of the specified pointer.
            </summary>
            <param name="pname">
            <para>Specifies the array or buffer pointer to be returned.</para> 
            <para>Symbolic constants GL_COLOR_ARRAY_POINTER, GL_EDGE_FLAG_ARRAY_POINTER, GL_FOG_COORD_ARRAY_POINTER, </para> 
            <para>GL_FEEDBACK_BUFFER_POINTER, GL_INDEX_ARRAY_POINTER, GL_NORMAL_ARRAY_POINTER, </para> 
            <para>GL_SECONDARY_COLOR_ARRAY_POINTER, GL_SELECTION_BUFFER_POINTER, GL_TEXTURE_COORD_ARRAY_POINTER,or GL_VERTEX_ARRAY_POINTER are accepted. </para> 
            </param>
            <param name="Params">
            Returns the pointer value specified by pname. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetPolygonStipple(System.Byte[])">
            <summary>
            return the polygon stipple pattern
            </summary>
            <param name="mask">
            Returns the stipple pattern. The initial value is all 1's. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetString(System.UInt32)">
            <summary>
            return a string describing the current GL connection.
            </summary>
            <param name="name">
            <para>Specifies a symbolic constant, one of GL_VENDOR, GL_RENDERER, GL_VERSION, GL_SHADING_LANGUAGE_VERSION,or GL_EXTENSIONS. </para>
            </param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.gl.GetTexEnv(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return texture environment parameters.
            </summary>
            <param name="target">
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL, or GL_POINT_SPRITE. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a texture environment parameter.</para> 
            <para>Accepted values are GL_TEXTURE_ENV_MODE, GL_TEXTURE_ENV_COLOR, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB,</para> 
            <para>GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, </para> 
            <para>GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, </para> 
            <para>GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.</para> 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTexEnv(System.UInt32,System.UInt32,System.Int32[])">
             <summary>
             return texture environment parameters.
             </summary>
             <param name="target">
             Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL, or GL_POINT_SPRITE. 
             </param>
             <param name="pname">
             <para>Specifies the symbolic name of a texture environment parameter.</para> 
             <para>Accepted values are GL_TEXTURE_ENV_MODE, GL_TEXTURE_ENV_COLOR, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB,</para> 
             <para>GL_COMBINE_ALPHA, GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, </para> 
             <para>GL_OPERAND0_RGB, GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, </para> 
            <para> GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE, or GL_COORD_REPLACE.</para> 
             </param>
             <param name="Params">
             Returns the requested data. 
             </param>
        </member>
        <member name="M:OpenGL.gl.GetTexGen(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            return texture coordinate generation parameters.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of the value(s) to be returned. </para> 
            <para>Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations:GL_OBJECT_PLANE or GL_EYE_PLANE.</para> 
            </param>
            <param name="pParams">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTexGen(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return texture coordinate generation parameters.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of the value(s) to be returned. </para> 
            <para>Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations:GL_OBJECT_PLANE or GL_EYE_PLANE.</para> 
            </param>
            <param name="pParams">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTexGen(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return texture coordinate generation parameters.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of the value(s) to be returned. </para> 
            <para>Must be either GL_TEXTURE_GEN_MODE or the name of one of the texture generation plane equations:GL_OBJECT_PLANE or GL_EYE_PLANE.</para> 
            </param>
            <param name="pParams">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTexImage(System.UInt32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            return a texture image
            </summary>
            <param name="target">
            <para>Specifies which texture is to be obtained.</para> 
            <para>GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, </para> 
            <para>GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, </para> 
            <para>GL_TEXTURE_CUBE_MAP_POSITIVE_Z, and GL_TEXTURE_CUBE_MAP_NEGATIVE_Z are accepted. </para> 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number of the desired image. Level 0 is the base image level. </para> 
            <para>Level n is the nth mipmap reduction image.</para> 
            </param>
            <param name="format">
            <para>Specifies a pixel format for the returned data. </para> 
            <para>The supported formats are GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA,</para> 
            <para>GL_LUMINANCE, and GL_LUMINANCE_ALPHA. </para> 
            </param>
            <param name="type">
            <para>Specifies a pixel type for the returned data. </para> 
            <para>The supported types are GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, </para> 
            <para>GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5,</para> 
            <para>GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV,</para> 
            <para>GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, </para> 
            <para>GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV. </para> 
            </param>
            <param name="pixels">
            <para> Returns the texture image. Should be a pointer to an array of the type specified by type.</para> 
            <para> You can use the function GLAX.GetArrayPointer to get the array pointer.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTexLevelParameter(System.UInt32,System.Int32,System.UInt32,System.Single[])">
            <summary>
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            </summary>
            <param name="target">
            <para>Specifies the symbolic name of the target texture, either GL_TEXTURE_1D, GL_TEXTURE_2D,</para> 
            <para>GL_TEXTURE_3D, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, </para> 
            <para>GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y,</para> 
            <para>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP. </para> 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number of the desired image.</para> 
            <para>Level 0 is the base image level. Level n is the nth mipmap reduction image. </para> 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a texture parameter.</para> 
            <para>GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT,</para> 
            <para>GL_TEXTURE_BORDER, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE, </para> 
            <para>GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_LUMINANCE_SIZE, GL_TEXTURE_INTENSITY_SIZE, GL_TEXTURE_DEPTH_SIZE,</para> 
            <para>GL_TEXTURE_COMPRESSED, and GL_TEXTURE_COMPRESSED_IMAGE_SIZE are accepted. </para> 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTexLevelParameter(System.UInt32,System.Int32,System.UInt32,System.Int32[])">
            <summary>
            Returns the texture image. Should be a pointer to an array of the type specified by type.
            </summary>
            <param name="target">
            <para>Specifies the symbolic name of the target texture, either GL_TEXTURE_1D, GL_TEXTURE_2D,</para> 
            <para>GL_TEXTURE_3D, GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_2D, GL_PROXY_TEXTURE_3D, </para> 
            <para>GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y,</para> 
            <para>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z,or GL_PROXY_TEXTURE_CUBE_MAP. </para> 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number of the desired image.</para> 
            <para>Level 0 is the base image level. Level n is the nth mipmap reduction image. </para> 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a texture parameter.</para> 
            <para>GL_TEXTURE_WIDTH, GL_TEXTURE_HEIGHT, GL_TEXTURE_DEPTH, GL_TEXTURE_INTERNAL_FORMAT,</para> 
            <para>GL_TEXTURE_BORDER, GL_TEXTURE_RED_SIZE, GL_TEXTURE_GREEN_SIZE, GL_TEXTURE_BLUE_SIZE</para> , 
            <para> GL_TEXTURE_ALPHA_SIZE, GL_TEXTURE_LUMINANCE_SIZE, GL_TEXTURE_INTENSITY_SIZE, GL_TEXTURE_DEPTH_SIZE,</para> 
            <para> GL_TEXTURE_COMPRESSED, and GL_TEXTURE_COMPRESSED_IMAGE_SIZE are accepted. </para> 
            </param>
            <param name="Params">
            Returns the requested data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTexParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="target">
            <para>Specifies the symbolic name of the target texture. </para> 
            <para>GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted. </para> 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a texture parameter. </para> 
            <para>GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD,</para> 
            <para>GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, </para> 
            <para>GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, </para> 
            <para>GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE,and GL_GENERATE_MIPMAP are accepted. </para> 
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.gl.GetTexParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            return texture parameter values.
            </summary>
            <param name="target">
            <para>Specifies the symbolic name of the target texture. </para> 
            <para>GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, and GL_TEXTURE_CUBE_MAP are accepted.</para>  
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a texture parameter. </para> 
            <para>GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD,</para> 
            <para>GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, </para> 
            <para>GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_RESIDENT, </para> 
            <para>GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE,and GL_GENERATE_MIPMAP are accepted. </para> 
            </param>
            <param name="Params">
            Returns the texture parameters.
            </param>
        </member>
        <member name="M:OpenGL.gl.Hint(System.UInt32,System.UInt32)">
            <summary>
            specify implementation-specific hints.
            </summary>
            <param name="target">
            <para>Specifies a symbolic constant indicating the behavior to be controlled. </para> 
            <para>GL_FOG_HINT, GL_GENERATE_MIPMAP_HINT, GL_LINE_SMOOTH_HINT, GL_PERSPECTIVE_CORRECTION_HINT, </para> 
            <para>GL_POINT_SMOOTH_HINT, GL_POLYGON_SMOOTH_HINT, GL_TEXTURE_COMPRESSION_HINT,and GL_FRAGMENT_SHADER_DERIVATIVE_HINT are accepted. </para> 
            </param>
            <param name="mode">
            <para>Specifies a symbolic constant indicating the desired behavior.</para> 
            <para>GL_FASTEST, GL_NICEST, and GL_DONT_CARE are accepted. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.IndexMask(System.UInt32)">
            <summary>
            control the writing of individual bits in the color index buffers
            </summary>
            <param name="mask">
            <para>Specifies a bit mask to enable and disable the writing of individual bits in the color index buffers.</para> 
            <para>Initially, the mask is all 1's. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.IndexPointer(System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of color indexes.
            </summary>
            <param name="type">
            <para>Specifies the data type of each color index in the array. </para> 
            <para>Symbolic constants GL_UNSIGNED_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted.</para> 
            <para>The initial value is GL_FLOAT. </para> 
            </param>
            <param name="stride">
            <para>Specifies the byte offset between consecutive color indexes.</para>  
            <para>If stride is 0, the color indexes are understood to be tightly packed in the array. </para> 
            <para>The initial value is 0. </para> 
            </param>
            <param name="pointer">
            <para>Specifies a pointer to the first index in the array. The initial value is 0.</para> 
            <para>You can use the function GLAX.GetArrayPonter Tto get the array pointer.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.Index(System.Double)">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.gl.Index(System.Double[])">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies a  one-element array that contains the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.gl.Index(System.Single)">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.gl.Index(System.Single[])">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies a one-element array that contains the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.gl.Index(System.Int32)">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.gl.Index(System.Int32[])">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies a one-element array that contains the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.gl.Index(System.Int16)">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.gl.Index(System.Int16[])">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies a one-element array that contains the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.gl.Index(System.Byte)">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.gl.Index(System.Byte[])">
            <summary>
            set the current color index.
            </summary>
            <param name="c">
            Specifies a one-element array that contains the new value for the current color index.
            </param>
        </member>
        <member name="M:OpenGL.gl.InitNames">
            <summary>
            initialize the name stack.
            </summary>
        </member>
        <member name="M:OpenGL.gl.InterleavedArrays(System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            simultaneously specify and enable several interleaved arrays
            </summary>
            <param name="format">
            <para>Specifies the type of array to enable.</para> 
            <para>Symbolic constants GL_V2F, GL_V3F, GL_C4UB_V2F, GL_C4UB_V3F, GL_C3F_V3F, GL_N3F_V3F, </para> 
            <para>GL_C4F_N3F_V3F, GL_T2F_V3F, GL_T4F_V4F, GL_T2F_C4UB_V3F, GL_T2F_C3F_V3F, GL_T2F_N3F_V3F, </para> 
            <para>GL_T2F_C4F_N3F_V3F, and GL_T4F_C4F_N3F_V4F are accepted. </para> 
            </param>
            <param name="stride">
            Specifies the offset in bytes between each aggregate array element.
            </param>
            <param name="pointer">
            <para>specifies a pointer of an array that contains colors, normals, textures and vertexs.</para> 
            <para>You can use the function GLAX.GetArrayPointer to get the array pointer.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.IsEnabled(System.UInt32)">
            <summary>
            test whether a capability is enabled
            </summary>
            <param name="cap">
            Specifies a symbolic constant indicating a GL capability. 
            </param>
            <returns>
            returns GL_TRUE if cap is an enabled capability and returns GL_FALSE otherwise.
            </returns>
        </member>
        <member name="M:OpenGL.gl.IsList(System.UInt32)">
            <summary>
            determine if a name corresponds to a display list
            </summary>
            <param name="list">
            Specifies a potential display list name. 
            </param>
            <returns>
            returns GL_TRUE if list is the name of a display list and returns GL_FALSE if it is not, 
            or if an error occurs.
            </returns>
        </member>
        <member name="M:OpenGL.gl.IsTexture(System.UInt32)">
            <summary>
            determine if a name corresponds to a texture
            </summary>
            <param name="texture">
            Specifies a value that may be the name of a texture.
            </param>
            <returns>
            returns GL_TRUE if texture is currently the name of a texture.
            </returns>
        </member>
        <member name="M:OpenGL.gl.LightModel(System.UInt32,System.Single)">
            <summary>
            set the lighting model parameters.
            </summary>
            <param name="pname">
            <para>Specifies a single-valued lighting model parameter.</para> 
            <para>GL_LIGHT_MODEL_LOCAL_VIEWER, GL_LIGHT_MODEL_COLOR_CONTROL, and GL_LIGHT_MODEL_TWO_SIDE are accepted. </para> 
            </param>
            <param name="param">
            Specifies the value that param will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.LightModel(System.UInt32,System.Single[])">
            <summary>
            set the lighting model parameters.
            </summary>
            <param name="pname">
            <para>Specifies a lighting model parameter.  </para> 
            <para>GL_LIGHT_MODEL_AMBIENT, GL_LIGHT_MODEL_COLOR_CONTROL, GL_LIGHT_MODEL_LOCAL_VIEWER, and GL_LIGHT_MODEL_TWO_SIDE are accepted. </para> 
            </param>
            <param name="Params">
            Specifies an array of the value or values that params will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.LightModel(System.UInt32,System.Int32)">
            <summary>
            set the lighting model parameters.
            </summary>
            <param name="pname">
            <para>Specifies a single-valued lighting model parameter.</para> 
            <para>GL_LIGHT_MODEL_LOCAL_VIEWER, GL_LIGHT_MODEL_COLOR_CONTROL, and GL_LIGHT_MODEL_TWO_SIDE are accepted. </para> 
            </param>
            <param name="param">
            Specifies the value that param will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.LightModel(System.UInt32,System.Int32[])">
            <summary>
            set the lighting model parameters.
            </summary>
            <param name="pname">
            <para>Specifies a lighting model parameter. </para> 
            <para>GL_LIGHT_MODEL_AMBIENT, GL_LIGHT_MODEL_COLOR_CONTROL, GL_LIGHT_MODEL_LOCAL_VIEWER, and GL_LIGHT_MODEL_TWO_SIDE are accepted.</para>  
            </param>
            <param name="Params">
            Specifies an array of the value or values that params will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Light(System.UInt32,System.UInt32,System.Single)">
            <summary>
            set light source parameters.
            </summary>
            <param name="light">
            <para>Specifies a light. </para> 
            <para>The number of lights depends on the implementation, but at least eight lights are supported. </para> 
            <para>They are identified by symbolic names of the form GL_LIGHTi, where i ranges from 0 to the value of GL_MAX_LIGHTS - 1. </para> 
            </param>
            <param name="pname">
            <para>Specifies a single-valued light source parameter for light. </para> 
            <para>GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted.</para> 
            </param>
            <param name="param">
            Specifies the value that parameter pname of light source light will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Light(System.UInt32,System.UInt32,System.Single[])">
            <summary>
             set light source parameters.
            </summary>
            <param name="light">
            <para>Specifies a light. </para> 
            <para>The number of lights depends on the implementation, but at least eight lights are supported. </para> 
            <para>They are identified by symbolic names of the form GL_LIGHTi, where i ranges from 0 to the value of GL_MAX_LIGHTS - 1. </para> 
            </param>
            <param name="pname">
            <para>Specifies a light source parameter for light.</para> 
            <para>GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_CUTOFF, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT,</para> 
            <para>GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted. </para> 
            </param>
            <param name="Params">
            Specifies an array of the value or values that parameter pname of light source light will be set to.
            </param>
        </member>
        <member name="M:OpenGL.gl.Light(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set light source parameters.
            </summary>
            <param name="light">
            <para>Specifies a light. </para> 
            <para>The number of lights depends on the implementation, but at least eight lights are supported. </para> 
            <para>They are identified by symbolic names of the form GL_LIGHTi, where i ranges from 0 to the value of GL_MAX_LIGHTS - 1. </para> 
            </param>
            <param name="pname">
            <para>Specifies a single-valued light source parameter for light. </para> 
            <para>GL_SPOT_EXPONENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted.</para> 
            </param>
            <param name="param">
            Specifies the value that parameter pname of light source light will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Light(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
             set light source parameters.
            </summary>
            <param name="light">
            <para>Specifies a light. </para> 
            <para>The number of lights depends on the implementation, but at least eight lights are supported. </para> 
            <para>They are identified by symbolic names of the form GL_LIGHTi, where i ranges from 0 to the value of GL_MAX_LIGHTS - 1. </para> 
            </param>
            <param name="pname">
            <para>Specifies a light source parameter for light.</para> 
            <para>GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_CUTOFF, GL_SPOT_DIRECTION, GL_SPOT_EXPONENT,</para> 
            <para>GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted. </para> 
            </param>
            <param name="Params">
            Specifies an array of the value or values that parameter pname of light source light will be set to.
            </param>
        </member>
        <member name="M:OpenGL.gl.LineStipple(System.Int32,System.UInt16)">
            <summary>
            specify the line stipple pattern.
            </summary>
            <param name="factor">
            <para>Specifies a multiplier for each bit in the line stipple pattern. </para> 
            <para>If factor is 3, for example, each bit in the pattern is used three times before the next bit in the pattern is used.</para> 
            <para>factor is clamped to the range [1, 256] and defaults to 1. </para> 
            </param>
            <param name="pattern">
            <para>Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized.</para>  
            <para>Bit zero is used first; the default pattern is all 1's. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.LineWidth(System.Single)">
            <summary>
            specify the width of rasterized lines.
            </summary>
            <param name="width">
            Specifies the width of rasterized lines. The initial value is 1. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ListBase(System.UInt32)">
            <summary>
            set the display-list base for CallLists.
            </summary>
            <param name="Base">
            <para>Specifies an integer offset that will be added to CallLists offsets to generate display-list names.</para> 
            <para>The initial value is 0.</para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.LoadIdentity">
            <summary>
             replace the current matrix with the identity matrix.
            </summary>
        </member>
        <member name="M:OpenGL.gl.LoadMatrix(System.Double[])">
            <summary>
            replace the current matrix with the specified matrix
            </summary>
            <param name="m">
            Specifies an array of 16 consecutive values, which are used as the elements of a 4×4 column-major matrix.
            </param>
        </member>
        <member name="M:OpenGL.gl.LoadMatrix(System.Single[])">
            <summary>
            replace the current matrix with the specified matrix
            </summary>
            <param name="m">
            Specifies an array of 16 consecutive values, which are used as the elements of a 4×4 column-major matrix.
            </param>
        </member>
        <member name="M:OpenGL.gl.LoadName(System.UInt32)">
            <summary>
            load a name onto the name stack.
            </summary>
            <param name="name">
            Specifies a name that will replace the top value on the name stack.
            </param>
        </member>
        <member name="M:OpenGL.gl.LogicOp(System.UInt32)">
            <summary>
            specify a logical pixel operation for color index rendering.
            </summary>
            <param name="opcode">
            <para>Specifies a symbolic constant that selects a logical operation. </para> 
            <para>The following symbols are accepted: GL_CLEAR, GL_SET, GL_COPY, GL_COPY_INVERTED, GL_NOOP, GL_INVERT,</para> 
            <para>GL_AND, GL_NAND, GL_OR, GL_NOR, GL_XOR, GL_EQUIV, GL_AND_REVERSE, GL_AND_INVERTED, GL_OR_REVERSE, </para> 
            <para>and GL_OR_INVERTED. The initial value is GL_COPY. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.Map1(System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double[])">
            <summary>
            define a one-dimensional evaluator.
            </summary>
            <param name="target">
            <para>Specifies the kind of values that are generated by the evaluator. </para> 
            <para>Symbolic constants GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP1_INDEX, GL_MAP1_COLOR_4, </para> 
            <para>GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3,</para> 
            <para>and GL_MAP1_TEXTURE_COORD_4 are accepted. </para> 
            </param>
            <param name="u1">
            Specify a linear mapping of u, as presented to EvalCoord1, to u, the variable that is evaluated by the equations specified by this command.
            </param>
            <param name="u2">
            Specify a linear mapping of u, as presented to EvalCoord1, to u, the variable that is evaluated by the equations specified by this command.
            </param>
            <param name="stride">
            <para>Specifies the number of floats  between the beginning of one control point and the beginning of the next one in the data structure referenced in points.</para> 
            <para>This allows control points to be embedded in arbitrary data structures.</para> 
            <para>The only constraint is that the values for a particular control point must occupy contiguous memory locations. </para> 
            </param>
            <param name="order">
            Specifies the number of control points. Must be positive. 
            </param>
            <param name="points">
            Specifies an array of the array of control points. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Map1(System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single[])">
            <summary>
            define a one-dimensional evaluator.
            </summary>
            <param name="target">
            <para>Specifies the kind of values that are generated by the evaluator. </para> 
            <para>Symbolic constants GL_MAP1_VERTEX_3, GL_MAP1_VERTEX_4, GL_MAP1_INDEX, GL_MAP1_COLOR_4, </para> 
            <para>GL_MAP1_NORMAL, GL_MAP1_TEXTURE_COORD_1, GL_MAP1_TEXTURE_COORD_2, GL_MAP1_TEXTURE_COORD_3,</para> 
            <para>and GL_MAP1_TEXTURE_COORD_4 are accepted. </para>
            </param>
            <param name="u1">
            Specify a linear mapping of u, as presented to EvalCoord1, to u, the variable that is evaluated by the equations specified by this command.
            </param>
            <param name="u2">
            Specify a linear mapping of u, as presented to EvalCoord1, to u, the variable that is evaluated by the equations specified by this command.
            </param>
            <param name="stride">
            <para>Specifies the number of double  between the beginning of one control point and the beginning of the next one in the data structure referenced in points.</para> 
            <para>This allows control points to be embedded in arbitrary data structures.</para> 
            <para>The only constraint is that the values for a particular control point must occupy contiguous memory locations. </para> 
            </param>
            <param name="order">
            Specifies the number of control points. Must be positive. 
            </param>
            <param name="points">
            Specifies an array of the array of control points. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Map2(System.UInt32,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Double[])">
            <summary>
            define a two-dimensional evaluator.
            </summary>
            <param name="target">
            <para>Specifies the kind of values that are generated by the evaluator.</para> 
            <para>Symbolic constants GL_MAP2_VERTEX_3, GL_MAP2_VERTEX_4, GL_MAP2_INDEX, GL_MAP2_COLOR_4, GL_MAP2_NORMAL,</para> 
            <para>GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3,and GL_MAP2_TEXTURE_COORD_4 are accepted. </para> 
            </param>
            <param name="u1">
            <para>Specify a linear mapping of u, as presented to EvalCoord2, to u, one of the two variables that are evaluated by the equations specified by this command. </para> 
            <para>Initially, u1 is 0 and u2 is 1. </para> 
            </param>
            <param name="u2">
            <para>Specify a linear mapping of u, as presented to EvalCoord2, to u, one of the two variables that are evaluated by the equations specified by this command.</para>
            <para>Initially, u1 is 0 and u2 is 1. </para>
            </param>
            <param name="ustride">
            <para>Specifies the number of doubles  between the beginning of control point R(i,j) </para> 
            <para>and the beginning of control point R(i+1﻿,j), where i and j are the u and v control point indices,respectively.</para> 
            <para>This allows control points to be embedded in arbitrary data structures. </para> 
            <para>The only constraint is that the values for a particular control point must occupy contiguous memory locations. </para> 
            <para>The initial value of ustride is 0. </para> 
            </param>
            <param name="uorder">
            Specifies the dimension of the control point array in the u axis. Must be positive. The initial value is 1. 
            </param>
            <param name="v1">
            <para>Specify a linear mapping of v, as presented to EvalCoord2, to v, one of the two variables that are evaluated by the equations specified by this command.</para> 
            <para>Initially, v1 is 0 and v2 is 1.</para> 
            </param>
            <param name="v2">
            <para>Specify a linear mapping of v, as presented to EvalCoord2, to v, one of the two variables that are evaluated by the equations specified by this command.</para> 
            <para>Initially, v1 is 0 and v2 is 1.</para> 
            </param>
            <param name="vstride">
            <para>Specifies the number of doubles  between the beginning of control point R(i,j) and the beginning of control point R(i,﻿j+1),</para>  
            <para>where i and j are the u and v control point indices, respectively.</para> 
            <para>This allows control points to be embedded in arbitrary data structures. </para> 
            <para>The only constraint is that the values for a particular control point must occupy contiguous memory locations.</para> 
            <para>The initial value of vstride is 0.</para> 
            </param>
            <param name="vorder">
            Specifies the dimension of the control point array in the v axis. Must be positive. The initial value is 1. 
            </param>
            <param name="points">
            Specifies an array of control points. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Map2(System.UInt32,System.Single,System.Single,System.Int32,System.Int32,System.Single,System.Single,System.Int32,System.Int32,System.Single[])">
            <summary>
            define a two-dimensional evaluator.
            </summary>
            <param name="target">
            <para>Specifies the kind of values that are generated by the evaluator.</para> 
            <para>Symbolic constants GL_MAP2_VERTEX_3, GL_MAP2_VERTEX_4, GL_MAP2_INDEX, GL_MAP2_COLOR_4, GL_MAP2_NORMAL,</para> 
            <para>GL_MAP2_TEXTURE_COORD_1, GL_MAP2_TEXTURE_COORD_2, GL_MAP2_TEXTURE_COORD_3,and GL_MAP2_TEXTURE_COORD_4 are accepted. </para> 
            </param>
            <param name="u1">
            <para>Specify a linear mapping of u, as presented to EvalCoord2, to u, one of the two variables that are evaluated by the equations specified by this command. </para> 
            <para>Initially, u1 is 0 and u2 is 1. </para> 
            </param>
            <param name="u2">
            <para>Specify a linear mapping of u, as presented to EvalCoord2, to u, one of the two variables that are evaluated by the equations specified by this command.</para> 
            <para>Initially, u1 is 0 and u2 is 1. </para> 
            </param>
            <param name="ustride">
            <para>Specifies the number of floats  between the beginning of control point R(i,j) </para> 
            <para>and the beginning of control point R(i+1﻿,j), where i and j are the u and v control point indices,respectively.</para> 
            <para>This allows control points to be embedded in arbitrary data structures. </para> 
            <para>The only constraint is that the values for a particular control point must occupy contiguous memory locations. </para> 
            <para>The initial value of ustride is 0. </para> 
            </param>
            <param name="uorder">
            Specifies the dimension of the control point array in the u axis. Must be positive. The initial value is 1. 
            </param>
            <param name="v1">
            <para>Specify a linear mapping of v, as presented to EvalCoord2, to v, one of the two variables that are evaluated by the equations specified by this command.</para> 
            <para>Initially, v1 is 0 and v2 is 1.</para> 
            </param>
            <param name="v2">
            <para>Specify a linear mapping of v, as presented to EvalCoord2, to v, one of the two variables that are evaluated by the equations specified by this command.</para> 
            <para>Initially, v1 is 0 and v2 is 1.</para> 
            </param>
            <param name="vstride">
            <para>Specifies the number of floats  between the beginning of control point R(i,j) and the beginning of control point R(i,﻿j+1), </para> 
            <para>where i and j are the u and v control point indices, respectively.</para> 
            <para>This allows control points to be embedded in arbitrary data structures. </para> 
            <para>The only constraint is that the values for a particular control point must occupy contiguous memory locations.</para> 
            <para>The initial value of vstride is 0.</para> 
            </param>
            <param name="vorder">
            Specifies the dimension of the control point array in the v axis. Must be positive. The initial value is 1. 
            </param>
            <param name="points">
            Specifies an array of control points. 
            </param>
        </member>
        <member name="M:OpenGL.gl.MapGrid1(System.Int32,System.Double,System.Double)">
            <summary>
            define a one dimensional mesh.
            </summary>
            <param name="un">
            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
            </param>
            <param name="u1">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
            <param name="u2">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
        </member>
        <member name="M:OpenGL.gl.MapGrid1(System.Int32,System.Single,System.Single)">
            <summary>
            define a one dimensional mesh.
            </summary>
            <param name="un">
            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
            </param>
            <param name="u1">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
            <param name="u2">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
        </member>
        <member name="M:OpenGL.gl.MapGrid2(System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            define a two-dimensional mesh
            </summary>
            <param name="un">
            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
            </param>
            <param name="u1">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
            <param name="u2">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
            <param name="vn">
            Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only). 
            </param>
            <param name="v1">
            Specify the mappings for integer grid domain values j=0 and j=vn (glMapGrid2 only). 
            </param>
            <param name="v2">
            Specify the mappings for integer grid domain values j=0 and j=vn (glMapGrid2 only). 
            </param>
        </member>
        <member name="M:OpenGL.gl.MapGrid2(System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            define a two-dimensional mesh
            </summary>
            <param name="un">
            Specifies the number of partitions in the grid range interval [u1, u2]. Must be positive.
            </param>
            <param name="u1">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
            <param name="u2">
            Specify the mappings for integer grid domain values i=0 and i=un. 
            </param>
            <param name="vn">
            Specifies the number of partitions in the grid range interval [v1, v2] (glMapGrid2 only). 
            </param>
            <param name="v1">
            Specify the mappings for integer grid domain values j=0 and j=vn (glMapGrid2 only). 
            </param>
            <param name="v2">
            Specify the mappings for integer grid domain values j=0 and j=vn (glMapGrid2 only). 
            </param>
        </member>
        <member name="M:OpenGL.gl.Material(System.UInt32,System.UInt32,System.Single)">
            <summary>
            specify material parameters for the lighting model.
            </summary>
            <param name="face">
            <para> Specifies which face or faces are being updated.</para> 
            <para> Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK. </para> 
            </param>
            <param name="pname">
            <para>Specifies the single-valued material parameter of the face or faces that is being updated.</para> 
            <para>Must be GL_SHININESS. </para> 
            </param>
            <param name="param">
            Specifies the value that parameter GL_SHININESS will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Material(System.UInt32,System.UInt32,System.Single[])">
             <summary>
             specify material parameters for the lighting model
             </summary>
             <param name="face">
             <para>Specifies which face or faces are being updated.</para> 
             <para>Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK.</para> 
             </param>
             <param name="pname">
             <para>Specifies the material parameter of the face or faces that is being updated.</para> 
            <para> Must be one of GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, GL_AMBIENT_AND_DIFFUSE, or GL_COLOR_INDEXES. </para> 
             </param>
             <param name="Params">
             Specifies an array of the value or values that pname will be set to.
             </param>
        </member>
        <member name="M:OpenGL.gl.Material(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            specify material parameters for the lighting model.
            </summary>
            <param name="face">
            <para>Specifies which face or faces are being updated.</para> 
            <para>Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK. </para> 
            </param>
            <param name="pname">
            <para>Specifies the single-valued material parameter of the face or faces that is being updated.</para>
            <para>Must be GL_SHININESS. </para>
            </param>
            <param name="param">
            Specifies the value that parameter GL_SHININESS will be set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Material(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            specify material parameters for the lighting model
            </summary>
            <param name="face">
            <para>Specifies which face or faces are being updated.</para> 
            <para>Must be one of GL_FRONT, GL_BACK, or GL_FRONT_AND_BACK.</para> 
            </param>
            <param name="pname">
            <para>Specifies the material parameter of the face or faces that is being updated.</para> 
            <para>Must be one of GL_AMBIENT, GL_DIFFUSE, GL_SPECULAR, GL_EMISSION, GL_SHININESS, GL_AMBIENT_AND_DIFFUSE, or GL_COLOR_INDEXES. </para> 
            </param>
            <param name="Params">
            Specifies an array of the value or values that pname will be set to.
            </param>
        </member>
        <member name="M:OpenGL.gl.MatrixMode(System.UInt32)">
            <summary>
            specify which matrix is the current matrix.
            </summary>
            <param name="mode">
            <para>Specifies which matrix stack is the target for subsequent matrix operations. </para> 
            <para>Three values are accepted: GL_MODELVIEW, GL_PROJECTION, and GL_TEXTURE. </para> 
            <para>The initial value is GL_MODELVIEW. </para> 
            <para>Additionally, if the ARB_imaging extension is supported, GL_COLOR is also accepted. </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.MultMatrix(System.Double[])">
            <summary>
            multiply the current matrix with the specified matrix.
            </summary>
            <param name="m">
            Array of 16 consecutive values that are used as the elements of a 4×4 column-major matrix.
            </param>
        </member>
        <member name="M:OpenGL.gl.MultMatrix(System.Single[])">
            <summary>
            multiply the current matrix with the specified matrix.
            </summary>
            <param name="m">
            Array of 16 consecutive values that are used as the elements of a 4×4 column-major matrix.
            </param>
        </member>
        <member name="M:OpenGL.gl.NewList(System.UInt32,System.UInt32)">
            <summary>
            create or replace a display list.
            </summary>
            <param name="list">
            Specifies the display-list name.
            </param>
            <param name="mode">
            Specifies the compilation mode, which can be GL_COMPILE or GL_COMPILE_AND_EXECUTE. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Normal3(System.SByte,System.SByte,System.SByte)">
            <summary>
            set the current normal vector.
            </summary>
            <param name="nx">
            <para>Specify the x coordinates of the new current normal. </para> 
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para> 
            </param>
            <param name="ny">
            <para>Specify the y coordinates of the new current normal. </para> 
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para> 
            </param>
            <param name="nz">
            <para>Specify the z coordinates of the new current normal.</para> 
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.Normal3(System.SByte[])">
            <summary>
            set the current normal vector.
            </summary>
            <param name="v">
            Specifies  an array of three elements: the x, y, and z coordinates of the new current normal. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Normal3(System.Double,System.Double,System.Double)">
            <summary>
            set the current normal vector.
            </summary>
            <param name="nx">
            <para>Specify the x coordinates of the new current normal. </para> 
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para> 
            </param>
            <param name="ny">
            <para>Specify the y coordinates of the new current normal. </para> 
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para> 
            </param>
            <param name="nz">
            <para>Specify the z coordinates of the new current normal.</para> 
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.Normal3(System.Double[])">
            <summary>
            set the current normal vector.
            </summary>
            <param name="v">
            Specifies  an array of three elements: the x, y, and z coordinates of the new current normal. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Normal3(System.Single,System.Single,System.Single)">
            <summary>
            set the current normal vector.
            </summary>
            <param name="nx">
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para> 
            <para>Specify the x coordinates of the new current normal.</para> 
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para> 
            </param>
            <param name="ny">
            <para>Specify the y coordinates of the new current normal. </para> 
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para> 
            </param>
            <param name="nz">
            <para>Specify the z coordinates of the new current normal.</para> 
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.Normal3(System.Single[])">
            <summary>
            set the current normal vector.
            </summary>
            <param name="v">
            Specifies  an array of three elements: the x, y, and z coordinates of the new current normal. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Normal3(System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current normal vector.
            </summary>
            <param name="nx">
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para> 
            <para>Specify the x coordinates of the new current normal. </para>  
            </param>
            <param name="ny">
            <para>Specify the y coordinates of the new current normal.</para>
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para>
            </param>
            <param name="nz">
            <para>Specify the z coordinates of the new current normal.</para> 
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para> 
            </param>
        </member>
        <member name="M:OpenGL.gl.Normal3(System.Int32[])">
            <summary>
            set the current normal vector.
            </summary>
            <param name="v">
            Specifies  an array of three elements: the x, y, and z coordinates of the new current normal. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Normal3(System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current normal vector.
            </summary>
            <param name="nx">
            <para>Specify the x coordinates of the new current normal. </para>
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para>
            </param>
            <param name="ny">
            <para>Specify the y coordinates of the new current normal. </para>
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para>        
            </param>
            <param name="nz">
            <para>Specify the z coordinates of the new current normal.</para>
            <para>The initial value of the current normal is the unit vector, (0, 0, 1). </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.Normal3(System.Int16[])">
            <summary>
            set the current normal vector.
            </summary>
            <param name="v">
            Specifies  an array of three elements: the x, y, and z coordinates of the new current normal. 
            </param>
        </member>
        <member name="M:OpenGL.gl.NormalPointer(System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of normals.
            </summary>
            <param name="type">
            <para>Specifies the data type of each coordinate in the array. </para>
            <para>Symbolic constants GL_BYTE, GL_SHORT, GL_INT, GL_FLOAT, and GL_DOUBLE are accepted. </para>
            <para>The initial value is GL_FLOAT. </para>
            </param>
            <param name="stride">
            <para>Specifies the byte offset between consecutive normals. </para>
            <para>If stride is 0, the normals are understood to be tightly packed in the array. The initial value is 0. </para>
            </param>
            <param name="pointer">
            <para>Specifies a pointer to the first coordinate of the first normal in the array. The initial value is 0. </para>
            <para>You can use the function GLAX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.Ortho(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            multiply the current matrix with an orthographic matrix.
            </summary>
            <param name="left">
            Specify the coordinates for the left vertical clipping planes. 
            </param>
            <param name="right">
            Specify the coordinates for the right vertical clipping planes. 
            </param>
            <param name="bottom">
            Specify the coordinates for the bottom  horizontal clipping planes.
            </param>
            <param name="top">
            Specify the coordinates for the  top horizontal clipping planes.
            </param>
            <param name="zNear">
            <para>Specify the distances to the nearer  depth clipping planes.</para>
            <para>This value is negative if the plane is to be behind the viewer. </para>
            </param>
            <param name="zFar">
            <para>Specify the distances to the  farther depth clipping planes. </para>
            <para>This value is negative if the plane is to be behind the viewer. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.PassThrough(System.Single)">
            <summary>
            place a marker in the feedback buffer.
            </summary>
            <param name="token">
            Specifies a marker value to be placed in the feedback buffer following a GL_PASS_THROUGH_TOKEN.
            </param>
        </member>
        <member name="M:OpenGL.gl.PixelMap(System.UInt32,System.Int32,System.Single[])">
            <summary>
            set up pixel transfer maps.
            </summary>
            <param name="map">
            <para>Specifies a symbolic map name.</para>
            <para>Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R,GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R,</para>
            <para>GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A. </para>
            </param>
            <param name="mapsize">
            Specifies the size of the map being defined. 
            </param>
            <param name="values">
            Specifies an array of mapsize values. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PixelMap(System.UInt32,System.Int32,System.UInt32[])">
            <summary>
            set up pixel transfer maps.
            </summary>
            <param name="map">
            <para>Specifies a symbolic map name.</para>
            <para>Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R,</para>
            <para>GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R,GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A. </para>
            </param>
            <param name="mapsize">
            Specifies the size of the map being defined. 
            </param>
            <param name="values">
            Specifies an array of mapsize values. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PixelMap(System.UInt32,System.Int32,System.UInt16[])">
            <summary>
            set up pixel transfer maps.
            </summary>
            <param name="map">
            <para>Specifies a symbolic map name.</para>
            <para> Must be one of the following: GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S, GL_PIXEL_MAP_I_TO_R,</para>
            <para>GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, GL_PIXEL_MAP_I_TO_A, GL_PIXEL_MAP_R_TO_R,GL_PIXEL_MAP_G_TO_G, GL_PIXEL_MAP_B_TO_B, or GL_PIXEL_MAP_A_TO_A. </para>
            </param>
            <param name="mapsize">
            Specifies the size of the map being defined. 
            </param>
            <param name="values">
            Specifies an array of mapsize values. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PixelStore(System.UInt32,System.Single)">
            <summary>
            set pixel storage modes.
            </summary>
            <param name="pname">
            <para>Specifies the symbolic name of the parameter to be set.</para> 
            <para>Six values affect the packing of pixel data into memory: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST,</para>
            <para>GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES,</para>
            <para>and GL_PACK_ALIGNMENT. Six more affect the unpacking of pixel data from memory: GL_UNPACK_SWAP_BYTES,</para>
            <para>GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS,GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES, and GL_UNPACK_ALIGNMENT. </para>
            </param>
            <param name="param">
            Specifies the value that pname is set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PixelStore(System.UInt32,System.Int32)">
            <summary>
            set pixel storage modes.
            </summary>
            <param name="pname">
            <para>Specifies the symbolic name of the parameter to be set. </para>
            <para>Six values affect the packing of pixel data into memory: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST,</para>
            <para>GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES,</para>
            <para>and GL_PACK_ALIGNMENT. Six more affect the unpacking of pixel data from memory: GL_UNPACK_SWAP_BYTES,</para>
            <para>GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS,</para>
            <para>GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES, and GL_UNPACK_ALIGNMENT. </para>
            </param>
            <param name="param">
            Specifies the value that pname is set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PixelTransfer(System.UInt32,System.Single)">
            <summary>
            set pixel transfer modes.
            </summary>
            <param name="pname">
            <para>Specifies the symbolic name of the pixel transfer parameter to be set.</para>
            <para>Must be one of the following: GL_MAP_COLOR, GL_MAP_STENCIL, GL_INDEX_SHIFT, GL_INDEX_OFFSET, </para>
            <para>GL_RED_SCALE, GL_RED_BIAS, GL_GREEN_SCALE, GL_GREEN_BIAS, GL_BLUE_SCALE, GL_BLUE_BIAS, GL_ALPHA_SCALE, GL_ALPHA_BIAS, GL_DEPTH_SCALE, or GL_DEPTH_BIAS. </para>
            </param>
            <param name="param">
            Specifies the value that pname is set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PixelTransfer(System.UInt32,System.Int32)">
            <summary>
            set pixel transfer modes.
            </summary>
            <param name="pname">
            <para>Specifies the symbolic name of the pixel transfer parameter to be set.</para>
            <para>Must be one of the following: GL_MAP_COLOR, GL_MAP_STENCIL, GL_INDEX_SHIFT, GL_INDEX_OFFSET, </para>
            <para>GL_RED_SCALE, GL_RED_BIAS, GL_GREEN_SCALE, GL_GREEN_BIAS, GL_BLUE_SCALE, GL_BLUE_BIAS, </para>
            <para>GL_ALPHA_SCALE, GL_ALPHA_BIAS, GL_DEPTH_SCALE, or GL_DEPTH_BIAS. </para>
            </param>
            <param name="param">
            Specifies the value that pname is set to. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PixelZoom(System.Single,System.Single)">
            <summary>
            specify the pixel zoom factors.
            </summary>
            <param name="xfactor">
            Specify the x  zoom factors for pixel write operations. 
            </param>
            <param name="yfactor">
            Specify the  y zoom factors for pixel write operations. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PointSize(System.Single)">
            <summary>
            specify the diameter of rasterized points.
            </summary>
            <param name="size">
            Specifies the diameter of rasterized points. The initial value is 1. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PolygonMode(System.UInt32,System.UInt32)">
            <summary>
            select a polygon rasterization mode.
            </summary>
            <param name="face">
            <para>Specifies the polygons that mode applies to.</para>
            <para>Must be GL_FRONT for front-facing polygons, GL_BACK for back-facing polygons,or GL_FRONT_AND_BACK for front- and back-facing polygons. </para>
            </param>
            <param name="mode">
            <para>Specifies how polygons will be rasterized. Accepted values are GL_POINT, GL_LINE, and GL_FILL. </para>
            <para>The initial value is GL_FILL for both front- and back-facing polygons. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.PolygonOffset(System.Single,System.Single)">
            <summary>
            set the scale and units used to calculate depth values.
            </summary>
            <param name="factor">
            <para>Specifies a scale factor that is used to create a variable depth offset for each polygon. </para>
            <para>The initial value is 0.</para>
            </param>
            <param name="units">
            <para>Is multiplied by an implementation-specific value to create a constant depth offset. </para>
            <para>The initial value is 0. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.PolygonStipple(System.Byte[])">
            <summary>
            set the polygon stippling pattern.
            </summary>
            <param name="mask">
            Specifies an array  of a 32×32 stipple pattern that will be unpacked from memory in the same way that DrawPixels unpacks pixels. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PopAttrib">
            <summary>
            pop the server attribute stack
            </summary>
        </member>
        <member name="M:OpenGL.gl.PopClientAttrib">
            <summary>
            pop the client attribute stack
            </summary>
        </member>
        <member name="M:OpenGL.gl.PopMatrix">
            <summary>
            pop the current matrix stack
            </summary>
        </member>
        <member name="M:OpenGL.gl.PopName">
             <summary>
            pop the name stack
             </summary>
        </member>
        <member name="M:OpenGL.gl.PrioritizeTextures(System.Int32,System.UInt32[],System.Single)">
            <summary>
            set texture residence priority.
            </summary>
            <param name="n">
            Specifies the number of textures to be prioritized. 
            </param>
            <param name="textures">
            Specifies an array containing the names of the textures to be prioritized. 
            </param>
            <param name="priorities">
            <para>Specifies an array containing the texture priorities.</para>
            <para>A priority given in an element of priorities applies to the texture named by the corresponding element of textures. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.PushAttrib(System.UInt32)">
            <summary>
            push the server attribute stack
            </summary>
            <param name="mask">
            Specifies a mask that indicates which attributes to save. Values for mask are listed below. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PushClientAttrib(System.UInt32)">
            <summary>
            push and pop the client attribute stack.
            </summary>
            <param name="mask">
            Specifies a mask that indicates which attributes to save. Values for mask are listed below. 
            </param>
        </member>
        <member name="M:OpenGL.gl.PushMatrix">
            <summary>
            push the current matrix stack
            </summary>
        </member>
        <member name="M:OpenGL.gl.PushName(System.UInt32)">
            <summary>
            push and pop the name stack
            </summary>
            <param name="name">
            Specifies a name that will be pushed onto the name stack. 
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos2(System.Double,System.Double)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position.
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos2(System.Double[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of two elements, specifying x, y coordinates, respectively.
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos2(System.Single,System.Single)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position.
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos2(System.Single[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of two elements, specifying x, y coordinates, respectively.
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos2(System.Int32,System.Int32)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position.
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos2(System.Int32[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of two elements, specifying x, y coordinates, respectively.
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos2(System.Int16,System.Int16)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position.
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos2(System.Int16[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of two elements, specifying x, y coordinates, respectively.
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos3(System.Double,System.Double,System.Double)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos3(System.Double[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies an array of  three elements, specifying x, y, z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos3(System.Single,System.Single,System.Single)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos3(System.Single[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies an array of  three elements, specifying x, y, z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos3(System.Int32,System.Int32,System.Int32)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos3(System.Int32[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of  three elements, specifying x, y, z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos3(System.Int16,System.Int16,System.Int16)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos3(System.Int16[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies an array of  three elements, specifying x, y, z coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
            <param name="w">
             Specify the w object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos4(System.Double[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of  three elements, specifying x, y, z and w coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
            <param name="w">
             Specify the w object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos4(System.Single[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of  three elements, specifying x, y, z and w coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
            <param name="w">
             Specify the w object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos4(System.Int32[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of  three elements, specifying x, y, z and w coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="x">
            Specify the x object coordinates (if present) for the raster position. 
            </param>
            <param name="y">
            Specify the y object coordinates (if present) for the raster position. 
            </param>
            <param name="z">
            Specify the z object coordinates (if present) for the raster position. 
            </param>
            <param name="w">
             Specify the w object coordinates (if present) for the raster position.
            </param>
        </member>
        <member name="M:OpenGL.gl.RasterPos4(System.Int16[])">
            <summary>
            specify the raster position for pixel operations.
            </summary>
            <param name="v">
            Specifies  an array of  three elements, specifying x, y, z and w coordinates, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ReadBuffer(System.UInt32)">
            <summary>
            select a color buffer source for pixels.
            </summary>
            <param name="mode">
            <para>Specifies a color buffer. </para>
            <para>Accepted values are GL_FRONT_LEFT, GL_FRONT_RIGHT, GL_BACK_LEFT, GL_BACK_RIGHT, GL_FRONT,GL_BACK, GL_LEFT, GL_RIGHT, and GL_AUXi, where i is between 0 and the value of GL_AUX_BUFFERS minus 1. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.ReadPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            read a block of pixels from the frame buffer.
            </summary>
            <param name="x">
            <para>Specify the window coordinates of the first pixel that is read from the frame buffer. </para>
            <para>This location is the lower left corner of a rectangular block of pixels. </para>
            </param>
            <param name="y">
            <para>Specify the window coordinates of the first pixel that is read from the frame buffer.</para>
            <para>This location is the lower left corner of a rectangular block of pixels. </para>
            </param>
            <param name="width">
            Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel. 
            </param>
            <param name="height">
            Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel. 
            </param>
            <param name="format">
            <para>Specifies the format of the pixel data. </para>
            <para>The following symbolic values are accepted: GL_COLOR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, </para>
            <para>GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA. </para>
            </param>
            <param name="type">
            <para>Specifies the data type of the pixel data. </para>
            <para>Must be one of GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, </para>
            <para>GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, </para>        
            <para>GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV,</para>
            <para>GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, </para>
            <para>GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV. </para>
            </param>
            <param name="pixels">
            <para>Returns the pixel data. </para>
            <para>You can use the function GLAX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.Rect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            draw a rectangle.
            </summary>
            <param name="x1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="y1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="x2">
            Specify the opposite vertex of the rectangle. 
            </param>
            <param name="y2">
            Specify the opposite vertex of the rectangle. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Rect(System.Double[],System.Double[])">
            <summary>
             draw a rectangle.
            </summary>
            <param name="v1">
            Specifies an array of one vertex of a rectangle. 
            </param>
            <param name="v2">
            Specifies an array of the opposite vertex of the rectangle.
            </param>
        </member>
        <member name="M:OpenGL.gl.Rect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            draw a rectangle.
            </summary>
            <param name="x1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="y1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="x2">
            Specify the opposite vertex of the rectangle. 
            </param>
            <param name="y2">
            Specify the opposite vertex of the rectangle. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Rect(System.Single[],System.Single[])">
            <summary>
             draw a rectangle.
            </summary>
            <param name="v1">
            Specifies an array of one vertex of a rectangle. 
            </param>
            <param name="v2">
            Specifies an array of the opposite vertex of the rectangle.
            </param>
        </member>
        <member name="M:OpenGL.gl.Rect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            draw a rectangle.
            </summary>
            <param name="x1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="y1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="x2">
            Specify the opposite vertex of the rectangle. 
            </param>
            <param name="y2">
            Specify the opposite vertex of the rectangle. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Rect(System.Int32[],System.Int32[])">
            <summary>
             draw a rectangle.
            </summary>
            <param name="v1">
            Specifies an array of one vertex of a rectangle. 
            </param>
            <param name="v2">
            Specifies an array of the opposite vertex of the rectangle.
            </param>
        </member>
        <member name="M:OpenGL.gl.Rect(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            draw a rectangle.
            </summary>
            <param name="x1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="y1">
            Specify one vertex of a rectangle. 
            </param>
            <param name="x2">
            Specify the opposite vertex of the rectangle. 
            </param>
            <param name="y2">
            Specify the opposite vertex of the rectangle. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Rect(System.Int16[],System.Int16[])">
            <summary>
             draw a rectangle.
            </summary>
            <param name="v1">
            Specifies an array of one vertex of a rectangle. 
            </param>
            <param name="v2">
            Specifies an array of the opposite vertex of the rectangle.
            </param>
        </member>
        <member name="M:OpenGL.gl.RenderMode(System.UInt32)">
            <summary>
            set rasterization mode
            </summary>
            <param name="mode">
            <para>Specifies the rasterization mode. Three values are accepted: GL_RENDER, GL_SELECT, and GL_FEEDBACK.</para>
            <para>The initial value is GL_RENDER. </para>
            </param>
            <returns>
            The return value of RenderMode is determined by the render mode at the time RenderMode is called, rather than by mode. 
            </returns>
        </member>
        <member name="M:OpenGL.gl.Rotate(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            multiply the current matrix by a rotation matrix.
            </summary>
            <param name="angle">
            ecifies the angle of rotation, in degrees.
            </param>
            <param name="x">
            Specify the x coordinates of a vector, respectively. 
            </param>
            <param name="y">
            Specify the y coordinates of a vector, respectively. 
            </param>
            <param name="z">
            Specify the z coordinates of a vector, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Rotate(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            multiply the current matrix by a rotation matrix.
            </summary>
            <param name="angle">
            ecifies the angle of rotation, in degrees.
            </param>
            <param name="x">
            Specify the x coordinates of a vector, respectively. 
            </param>
            <param name="y">
            Specify the y coordinates of a vector, respectively. 
            </param>
            <param name="z">
            Specify the z coordinates of a vector, respectively. 
            </param>
        </member>
        <member name="M:OpenGL.gl.Scale(System.Double,System.Double,System.Double)">
            <summary>
             multiply the current matrix by a general scaling matrix.
            </summary>
            <param name="x">
            Specify scale factors along the x axes, respectively.
            </param>
            <param name="y">
            Specify scale factors along the y axes, respectively.
            </param>
            <param name="z">
            Specify scale factors along the z axes, respectively.
            </param>
        </member>
        <member name="M:OpenGL.gl.Scale(System.Single,System.Single,System.Single)">
            <summary>
             multiply the current matrix by a general scaling matrix.
            </summary>
            <param name="x">
            Specify scale factors along the x axes, respectively.
            </param>
            <param name="y">
            Specify scale factors along the y axes, respectively.
            </param>
            <param name="z">
            Specify scale factors along the z axes, respectively.
            </param>
        </member>
        <member name="M:OpenGL.gl.Scissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            define the scissor box.
            </summary>
            <param name="x">
            Specify the lower left corner of the scissor box. Initially (0, 0). 
            </param>
            <param name="y">
            Specify the lower left corner of the scissor box. Initially (0, 0). 
            </param>
            <param name="width">
            <para>Specify the width of the scissor box. </para>
            <para>When a GL context is first attached to a window, width and height are set to the dimensions of that window. </para>
            </param>
            <param name="height">
            Specify the height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window. 
            </param>
        </member>
        <member name="M:OpenGL.gl.SelectBuffer(System.Int32,System.UInt32[])">
            <summary>
            establish a buffer for selection mode values.
            </summary>
            <param name="size">
            Specifies the size of buffer. 
            </param>
            <param name="buffer">
            Returns the selection data. 
            </param>
        </member>
        <member name="M:OpenGL.gl.ShadeModel(System.UInt32)">
            <summary>
            select flat or smooth shading.
            </summary>
            <param name="mode">
            <para>Specifies a symbolic value representing a shading technique.</para>
            <para>Accepted values are GL_FLAT and GL_SMOOTH. The initial value is GL_SMOOTH.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.StencilFunc(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            set front and back function and reference value for stencil testing.
            </summary>
            <param name="func">
            <para>Specifies the test function. </para>
            <para>Eight symbolic constants are valid: GL_NEVER, GL_LESS, GL_LEQUAL, GL_GREATER, GL_GEQUAL, </para>
            <para>GL_EQUAL, GL_NOTEQUAL, and GL_ALWAYS. The initial value is GL_ALWAYS. </para>
            </param>
            <param name="Ref">
            <para>Specifies the reference value for the stencil test. </para>
            <para>ref is clamped to the range [0,2n−1], where n is the number of bitplanes in the stencil buffer. </para>
            <para>The initial value is 0. </para>
            </param>
            <param name="mask">
            <para>Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done.</para> 
            <para>The initial value is all 1's.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.StencilMask(System.UInt32)">
            <summary>
            control the front and back writing of individual bits in the stencil planes.
            </summary>
            <param name="mask">
            <para>Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. </para>
            <para>Initially, the mask is all 1's.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.StencilOp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            set front and back stencil test actions.
            </summary>
            <param name="fail">
            <para>Specifies the action to take when the stencil test fails. </para>
            <para>Eight symbolic constants are accepted:</para>
            <para>GL_KEEP, GL_ZERO, GL_REPLACE, GL_INCR, GL_INCR_WRAP, GL_DECR, GL_DECR_WRAP, and GL_INVERT.</para>
            <para>The initial value is GL_KEEP. </para>
            </param>
            <param name="zfail">
            <para>Specifies the stencil action when the stencil test passes, but the depth test fails. </para>
            <para>dpfail accepts the same symbolic constants as sfail. The initial value is GL_KEEP. </para>
            </param>
            <param name="zpass">
            <para>Specifies the stencil action when both the stencil test and the depth test pass, </para>
            <para>or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. </para>
            <para>dppass accepts the same symbolic constants as sfail. The initial value is GL_KEEP. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord1(System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord1(System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord1(System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord1(System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord1(System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord1(System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord1(System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord1(System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord2(System.Double,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord2(System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord2(System.Single,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord2(System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord2(System.Int32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord2(System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord2(System.Int16,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord2(System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s and t texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord3(System.Double,System.Double,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord3(System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord3(System.Single,System.Single,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord3(System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord3(System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord3(System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord3(System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord3(System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t and r texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
            <param name="q">
             Specify q texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord4(System.Double[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t, r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
            <param name="q">
             Specify q texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord4(System.Single[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t, r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
            <param name="q">
             Specify q texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord4(System.Int32[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t, r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="s">
            Specify s texture coordinates. 
            </param>
            <param name="t">
            Specify t texture coordinates. 
            </param>
            <param name="r">
            Specify r texture coordinates. 
            </param>
            <param name="q">
             Specify q texture coordinates. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoord4(System.Int16[])">
            <summary>
            set the current texture coordinates.
            </summary>
            <param name="v">
            Specifies  an array of one  elements, which in turn specify the s ,t, r and q texture coordinates.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexCoordPointer(System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of texture coordinates.
            </summary>
            <param name="size">
            Specifies the number of coordinates per array element. Must be 1, 2, 3, or 4. The initial value is 4.
            </param>
            <param name="type">
            <para>Specifies the data type of each texture coordinate. </para>
            <para>Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. </para>
            <para>The initial value is GL_FLOAT. </para>
            </param>
            <param name="stride">
            <para>Specifies the byte offset between consecutive texture coordinate sets. </para>
            <para>If stride is 0, the array elements are understood to be tightly packed. The initial value is 0.</para>
            </param>
            <param name="pointer">
            <para> Specifies a pointer to the first coordinate of the first texture coordinate set in the array.</para>
            <para>The initial value is 0. </para>
            <para>You can use the function GLAX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexEnv(System.UInt32,System.UInt32,System.Single)">
            <summary>
            set texture environment parameters.
            </summary>
            <param name="target">
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a single-valued texture environment parameter. </para>
            <para>May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, </para>
            <para>GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB,</para>
            <para>GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE,</para>
            <para>GL_ALPHA_SCALE, or GL_COORD_REPLACE. </para>
            </param>
            <param name="param">
            <para>Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE, </para>
            <para>GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR,</para>
            <para>GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, </para>
            <para>a single boolean value for the point sprite texture coordinate replacement,</para>
            <para>a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexEnv(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            set texture environment parameters.
            </summary>
            <param name="target">
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a single-valued texture environment parameter.</para>
            <para>May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, </para>
            <para>GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB,</para>
            <para>GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE,or GL_COORD_REPLACE. </para>
            </param>
            <param name="Params">
            <para>Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE,</para>
            <para>GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR,</para>
            <para>GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA,</para>
            <para>a single boolean value for the point sprite texture coordinate replacement, </para>
            <para>a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexEnv(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set texture environment parameters.
            </summary>
            <param name="target">
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a single-valued texture environment parameter. </para>
            <para>May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, </para>
            <para>GL_SRC0_RGB, GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB,</para>
            <para>GL_OPERAND1_RGB, GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE,</para>
            <para>GL_ALPHA_SCALE, or GL_COORD_REPLACE. </para>
            </param>
            <param name="param">
            <para>Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE, </para>
            <para>GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR,</para>
            <para>GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, </para>
            <para>a single boolean value for the point sprite texture coordinate replacement,</para>
            <para>a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexEnv(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set texture environment parameters.
            </summary>
            <param name="target">
            Specifies a texture environment. May be GL_TEXTURE_ENV, GL_TEXTURE_FILTER_CONTROL or GL_POINT_SPRITE. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a single-valued texture environment parameter.</para>
            <para>May be either GL_TEXTURE_ENV_MODE, GL_TEXTURE_LOD_BIAS, GL_COMBINE_RGB, GL_COMBINE_ALPHA, GL_SRC0_RGB, </para>
            <para>GL_SRC1_RGB, GL_SRC2_RGB, GL_SRC0_ALPHA, GL_SRC1_ALPHA, GL_SRC2_ALPHA, GL_OPERAND0_RGB, GL_OPERAND1_RGB,</para>
            <para>GL_OPERAND2_RGB, GL_OPERAND0_ALPHA, GL_OPERAND1_ALPHA, GL_OPERAND2_ALPHA, GL_RGB_SCALE, GL_ALPHA_SCALE,or GL_COORD_REPLACE. </para>
            </param>
            <param name="Params">
            <para>Specifies a single symbolic constant, one of GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_MODULATE,</para>
            <para>GL_DECAL, GL_BLEND, GL_REPLACE, GL_SUBTRACT, GL_COMBINE, GL_TEXTURE, GL_CONSTANT, GL_PRIMARY_COLOR,</para>
            <para>GL_PREVIOUS, GL_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA,</para>
            <para>a single boolean value for the point sprite texture coordinate replacement, </para>
            <para>a single floating-point value for the texture level-of-detail bias, or 1.0, 2.0, or 4.0 when specifying the GL_RGB_SCALE or GL_ALPHA_SCALE. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexGen(System.UInt32,System.UInt32,System.Double)">
            <summary>
            control the generation of texture coordinates.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </param>
            <param name="param">
            <para>Specifies a single-valued texture generation parameter, </para>
            <para>one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexGen(System.UInt32,System.UInt32,System.Double[])">
            <summary>
            control the generation of texture coordinates.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of the texture-coordinate generation function or function parameters. </para>
            <para>Must be GL_TEXTURE_GEN_MODE, GL_OBJECT_PLANE, or GL_EYE_PLANE. </para>
            </param>
            <param name="Params">
            <para>Specifies an array of texture generation parameters. </para>
            <para>If pname is GL_TEXTURE_GEN_MODE, then the array must contain a single symbolic constant, </para>
            <para>one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.</para>
            <para>Otherwise, params holds the coefficients for the texture-coordinate generation function specified by pname. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexGen(System.UInt32,System.UInt32,System.Single)">
            <summary>
            control the generation of texture coordinates.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </param>
            <param name="param">
            <para>Specifies a single-valued texture generation parameter, </para>
            <para>one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexGen(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            control the generation of texture coordinates.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of the texture-coordinate generation function or function parameters. </para>
            <para>Must be GL_TEXTURE_GEN_MODE, GL_OBJECT_PLANE, or GL_EYE_PLANE. </para>
            </param>
            <param name="Params">
            <para>Specifies an array of texture generation parameters. </para>
            <para>If pname is GL_TEXTURE_GEN_MODE, then the array must contain a single symbolic constant, </para>
            <para>one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.</para>
            <para>Otherwise, params holds the coefficients for the texture-coordinate generation function specified by pname. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexGen(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            control the generation of texture coordinates.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            Specifies the symbolic name of the texture-coordinate generation function. Must be GL_TEXTURE_GEN_MODE.
            </param>
            <param name="param">
            <para>Specifies a single-valued texture generation parameter, </para>
            <para>one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexGen(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            control the generation of texture coordinates.
            </summary>
            <param name="coord">
            Specifies a texture coordinate. Must be one of GL_S, GL_T, GL_R, or GL_Q. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of the texture-coordinate generation function or function parameters. </para>
            <para>Must be GL_TEXTURE_GEN_MODE, GL_OBJECT_PLANE, or GL_EYE_PLANE. </para>
            </param>
            <param name="Params">
            <para>Specifies an array of texture generation parameters. </para>
            <para>If pname is GL_TEXTURE_GEN_MODE, then the array must contain a single symbolic constant, </para>
            <para>one of GL_OBJECT_LINEAR, GL_EYE_LINEAR, GL_SPHERE_MAP, GL_NORMAL_MAP, or GL_REFLECTION_MAP.</para>
            <para>Otherwise, params holds the coefficients for the texture-coordinate generation function specified by pname. </para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a one-dimensional texture image.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_1D or GL_PROXY_TEXTURE_1D. 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number. Level 0 is the base image level. </para>
            <para>Level n is the nth mipmap reduction image</para>
            </param>
            <param name="internalformat">
            <para> Specifies the number of color components in the texture. </para>
            <para>Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8,</para>
            <para>GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA,</para>
            <para>GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16,</para> 
            <para>GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12,</para>
            <para>GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8, </para>
            <para> GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, </para>
            <para>GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10,</para>
            <para>GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16,</para>
            <para>GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8.</para>
            </param>
            <param name="width">
            <para>Specifies the width of the texture image including the border if any. </para>
            <para>If the GL version does not support non-power-of-two sizes, this value must be 2^n+2﻿(border) for some integer n.</para>
            <para>All implementations support texture images that are at least 64 texels wide. </para>
            <para>The height of the 1D texture image is 1. </para>
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
            <param name="format">
            <para>Specifies the format of the pixel data. </para>
            <para>The following symbolic values are accepted: </para>
            <para>GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.</para>
            </param>
            <param name="type">
            <para>Specifies the data type of the pixel data. </para>
            <para>The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT,</para>
            <para>GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,</para>
            <para>GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,</para>
            <para>GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, </para>
            <para>GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2,and GL_UNSIGNED_INT_2_10_10_10_REV. </para>
            </param>
            <param name="pixels">
            <para>Specifies a pointer to the image data in memory. </para>
            <para>You can use the function GLAX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a two-dimensional texture image.
            </summary>
            <param name="target">
            <para>Specifies the target texture. </para>
            <para>Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X,</para> 
            <para>GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, </para>
            <para>GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP. </para>      
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number. Level 0 is the base image level. </para>
            <para>Level n is the nth mipmap reduction image. </para>
            </param>
            <param name="internalformat">
            <para>Specifies the number of color components in the texture. </para>
            <para>Must be 1, 2, 3, or 4, or one of the following symbolic constants: GL_ALPHA, GL_ALPHA4, GL_ALPHA8,</para>
            <para>GL_ALPHA12, GL_ALPHA16, GL_COMPRESSED_ALPHA, GL_COMPRESSED_LUMINANCE, GL_COMPRESSED_LUMINANCE_ALPHA,</para>
            <para>GL_COMPRESSED_INTENSITY, GL_COMPRESSED_RGB, GL_COMPRESSED_RGBA, GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16,</para>
            <para>GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT32, GL_LUMINANCE, GL_LUMINANCE4, GL_LUMINANCE8, GL_LUMINANCE12,</para>
            <para>GL_LUMINANCE16, GL_LUMINANCE_ALPHA, GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8,</para>
            <para>GL_LUMINANCE12_ALPHA4, GL_LUMINANCE12_ALPHA12, GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4, </para>
            <para>GL_INTENSITY8, GL_INTENSITY12, GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10,</para>
            <para>GL_RGB12, GL_RGB16, GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12, GL_RGBA16,</para>
            <para>GL_SLUMINANCE, GL_SLUMINANCE8, GL_SLUMINANCE_ALPHA, GL_SLUMINANCE8_ALPHA8, GL_SRGB, GL_SRGB8, GL_SRGB_ALPHA, or GL_SRGB8_ALPHA8. </para>
            </param>
            <param name="width">
            <para>Specifies the width of the texture image including the border if any.</para>
            <para>If the GL version does not support non-power-of-two sizes, this value must be 2^n+2﻿(border) for some integer n.</para>
            <para>All implementations support texture images that are at least 64 texels wide. </para>
            </param>
            <param name="height">
            <para>Specifies the height of the texture image including the border if any. </para>
            <para>If the GL version does not support non-power-of-two sizes, this value must be 2^m+2﻿(border) for some integer m.</para>
            <para>All implementations support texture images that are at least 64 texels high. </para>
            </param>
            <param name="border">
            Specifies the width of the border. Must be either 0 or 1. 
            </param>
            <param name="format">
            <para>Specifies the format of the pixel data. </para>
            <para>The following symbolic values are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, </para>
            <para>GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA. </para>
            </param>
            <param name="type">
            <para>Specifies the data type of the pixel data.</para>
            <para>The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, </para>
            <para>GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,</para> 
            <para>GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, </para>
            <para>GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, </para>
            <para>GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2,and GL_UNSIGNED_INT_2_10_10_10_REV.</para> 
            </param>
            <param name="pixels">
            <para>Specifies a pointer to the image data in memory. </para>
            <para>You can use the function GLAX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexParameter(System.UInt32,System.UInt32,System.Single)">
            <summary>
            set texture parameters.
            </summary>
            <param name="target">
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D,or GL_TEXTURE_CUBE_MAP. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a single-valued texture parameter. </para>
            <para>pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD,</para>
            <para>GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, </para>
            <para>GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC,GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP.</para> 
            </param>
            <param name="param">
            Specifies the value of pname. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexParameter(System.UInt32,System.UInt32,System.Single[])">
            <summary>
            set texture parameters
            </summary>
            <param name="target">
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D or GL_TEXTURE_3D. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a texture parameter.</para>
            <para>pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, </para>
            <para> GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T,</para>
            <para>GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, </para>
            <para>GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP. </para>
            </param>
            <param name="Params">
            Specifies an array where the value or values of pname are stored.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexParameter(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            set texture parameters.
            </summary>
            <param name="target">
            <para>Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D,or GL_TEXTURE_CUBE_MAP. </para>
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a single-valued texture parameter. </para>
            <para>pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD,</para>
            <para>GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, </para>
            <para>GL_TEXTURE_WRAP_R, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_COMPARE_FUNC,GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP. </para>
            </param>
            <param name="param">
            Specifies the value of pname. 
            </param>
        </member>
        <member name="M:OpenGL.gl.TexParameter(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            set texture parameters
            </summary>
            <param name="target">
            Specifies the target texture, which must be either GL_TEXTURE_1D, GL_TEXTURE_2D or GL_TEXTURE_3D. 
            </param>
            <param name="pname">
            <para>Specifies the symbolic name of a texture parameter.</para>
            <para>pname can be one of the following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, </para>
            <para> GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T,</para>
            <para> GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, GL_TEXTURE_PRIORITY, GL_TEXTURE_COMPARE_MODE, </para>
            <para>GL_TEXTURE_COMPARE_FUNC, GL_DEPTH_TEXTURE_MODE, or GL_GENERATE_MIPMAP. </para>
            </param>
            <param name="Params">
            Specifies an array where the value or values of pname are stored.
            </param>
        </member>
        <member name="M:OpenGL.gl.TexSubImage1D(System.UInt32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            specify a one-dimensional texture subimage.
            </summary>
            <param name="target">
            Specifies the target texture. Must be GL_TEXTURE_1D. 
            </param>
            <param name="level">
            <para>Specifies the level-of-detail number. Level 0 is the base image level. </para>
            <para>Level n is the nth mipmap reduction image.</para>
            </param>
            <param name="xoffset">
            Specifies a texel offset in the x direction within the texture array. 
            </param>
            <param name="width">
            Specifies the width of the texture subimage. 
            </param>
            <param name="format">
            <para>Specifies the format of the pixel data.</para>
            <para>The following symbolic values are accepted: </para>
            <para>GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA. </para>
            </param>
            <param name="type">
            <para>Specifies the data type of the pixel data.</para>
            <para>The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT,</para>
            <para>GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,</para>
            <para>GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4,</para>
            <para>GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, </para>
            <para>GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2,and GL_UNSIGNED_INT_2_10_10_10_REV</para>
            </param>
            <param name="pixels">
            <para>Specifies a pointer to the image data in memory.</para>
            <para>You can use the function GLAX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.TexSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
             <summary>
             specify a two-dimensional texture subimage.
             </summary>
             <param name="target">
             <para>Specifies the target texture. </para>
             <para>Must be GL_TEXTURE_2D, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X,</para>
            <para> GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z,or GL_TEXTURE_CUBE_MAP_NEGATIVE_Z. </para>
             </param>
             <param name="level">
             <para>Specifies the level-of-detail number. Level 0 is the base image level.</para>
             <para>Level n is the nth mipmap reduction image. </para>
             </param>
             <param name="xoffset">
             Specifies a texel offset in the x direction within the texture array. 
             </param>
             <param name="yoffset">
             Specifies a texel offset in the y direction within the texture array.
             </param>
             <param name="width">
             Specifies the width of the texture subimage. 
             </param>
             <param name="height">
             Specifies the height of the texture subimage. 
             </param>
             <param name="format">
             <para>Specifies the format of the pixel data. </para>
             <para>The following symbolic values are accepted:</para>
             <para>GL_COLOR_INDEX, GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_LUMINANCE,and GL_LUMINANCE_ALPHA. </para>
             </param>
             <param name="type">
             <para>Specifies the data type of the pixel data. </para>
             <para>The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT,</para>
             <para>GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV,</para>
             <para> GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, </para>
             <para>GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, </para>
             <para>GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2,and GL_UNSIGNED_INT_2_10_10_10_REV.</para>
             </param>
             <param name="pixels">
             <para>Specifies a pointer to the image data in memory. </para>
             <para>You can use the function GLAX.GetArrayPointer to get the array pointer.</para>
             </param>
        </member>
        <member name="M:OpenGL.gl.Translate(System.Double,System.Double,System.Double)">
            <summary>
            multiply the current matrix by a translation matrix.
            </summary>
            <param name="x">
            Specify the x coordinate of a translation vector.
            </param>
            <param name="y">
            Specify the y coordinate of a translation vector.
            </param>
            <param name="z">
            Specify the z coordinate of a translation vector.
            </param>
        </member>
        <member name="M:OpenGL.gl.Translate(System.Single,System.Single,System.Single)">
            <summary>
            multiply the current matrix by a translation matrix.
            </summary>
            <param name="x">
            Specify the x coordinate of a translation vector.
            </param>
            <param name="y">
            Specify the y coordinate of a translation vector.
            </param>
            <param name="z">
            Specify the z coordinate of a translation vector.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex2(System.Double,System.Double)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex2(System.Double[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of two elements. The elements of a two-element array are x and y.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex2(System.Single,System.Single)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex2(System.Single[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of two elements. The elements of a two-element array are x and y.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex2(System.Int32,System.Int32)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex2(System.Int32[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of two elements. The elements of a two-element array are x and y.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex2(System.Int16,System.Int16)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex2(System.Int16[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of two elements. The elements of a two-element array are x and y.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex3(System.Double,System.Double,System.Double)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex3(System.Double[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of three elements. The elements of a three-element array are x , y and z.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex3(System.Single,System.Single,System.Single)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex3(System.Single[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of three elements. The elements of a three-element array are x , y and z.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex3(System.Int32,System.Int32,System.Int32)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex3(System.Int32[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of three elements. The elements of a three-element array are x , y and z.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex3(System.Int16,System.Int16,System.Int16)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex3(System.Int16[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of three elements. The elements of a three-element array are x , y and z.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex4(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
            <param name="w">
            Specify w coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex4(System.Double[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of four elements. The elements of a four-element array are x ,y,z and z.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex4(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
            <param name="w">
            Specify w coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex4(System.Single[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of four elements. The elements of a four-element array are x ,y,z and z.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex4(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
            <param name="w">
            Specify w coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex4(System.Int32[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of four elements. The elements of a four-element array are x ,y,z and z.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex4(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            specify a vertex.
            </summary>
            <param name="x">
            Specify x coordinate of a vertex
            </param>
            <param name="y">
            Specify y coordinate of a vertex.
            </param>
            <param name="z">
             Specify z coordinate of a vertex.
            </param>
            <param name="w">
            Specify w coordinate of a vertex.
            </param>
        </member>
        <member name="M:OpenGL.gl.Vertex4(System.Int16[])">
            <summary>
            specify a vertex.
            </summary>
            <param name="v">
            Specifies  an array of four elements. The elements of a four-element array are x ,y,z and z.
            </param>
        </member>
        <member name="M:OpenGL.gl.VertexPointer(System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            define an array of vertex data.
            </summary>
            <param name="size">
            Specifies the number of coordinates per vertex. Must be 2, 3, or 4. The initial value is 4. 
            </param>
            <param name="type">
            <para>Specifies the data type of each coordinate in the array. </para>
            <para>Symbolic constants GL_SHORT, GL_INT, GL_FLOAT, or GL_DOUBLE are accepted. The initial value is GL_FLOAT. </para>
            </param>
            <param name="stride">
            <para>Specifies the byte offset between consecutive vertices. </para>
            <para>If stride is 0, the vertices are understood to be tightly packed in the array. The initial value is 0. </para>
            </param>
            <param name="pointer">
            <para>Specifies a pointer to the first coordinate of the first vertex in the array. The initial value is 0. </para>
            <para>You can use the function GLAX.GetArrayPointer to get the array pointer.</para>
            </param>
        </member>
        <member name="M:OpenGL.gl.Viewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            set the viewport.
            </summary>
            <param name="x">
            Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0). 
            </param>
            <param name="y">
            Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
            </param>
            <param name="width">
            <para>Specify the width and height of the viewport.</para>
            <para>When a GL context is first attached to a window, width and height are set to the dimensions of that window. </para>
            </param>
            <param name="height">
            <para>Specify the width and height of the viewport. </para>
            <para>When a GL context is first attached to a window, width and height are set to the dimensions of that window. </para>
            </param>
        </member>
        <member name="M:OpenGL.GLUAX.ByteArrayToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            字节数组转换为字符那串
            </summary>
            <param name="array">字节数组</param>
            <param name="offset">偏移量</param>
            <param name="count">要转换的元素个数</param>
            <returns>字符串</returns>
        </member>
        <member name="M:OpenGL.GLAUX.StringToByteArray(System.String,System.Int32,System.Int32)">
            <summary>
            字符串转换为字节数组
            </summary>
            <param name="str">字符串</param>
            <param name="offset">偏移量</param>
            <param name="count">需要转换的字符个数</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:OpenGL.GLAUX.GetArrayPointer(System.SByte[],System.Int32)">
            <summary>
            获取数组指针
            </summary>
            <param name="array">数组</param>
            <param name="offset">下标偏移量</param>
            <returns>数组的指针</returns>
        </member>
        <member name="M:OpenGL.GLAUX.GetArrayPointer(System.Byte[],System.Int32)">
            <summary>
            获取数组指针
            </summary>
            <param name="array">数组</param>
            <param name="offset">下标偏移量</param>
            <returns>数组的指针</returns>
        </member>
        <member name="M:OpenGL.GLAUX.GetArrayPointer(System.Int16[],System.Int32)">
            <summary>
            获取数组指针
            </summary>
            <param name="array">数组</param>
            <param name="offset">下标偏移量</param>
            <returns>数组的指针</returns>
        </member>
        <member name="M:OpenGL.GLAUX.GetArrayPointer(System.UInt16[],System.Int32)">
            <summary>
            获取数组指针
            </summary>
            <param name="array">数组</param>
            <param name="offset">下标偏移量</param>
            <returns>数组的指针</returns>
        </member>
        <member name="M:OpenGL.GLAUX.GetArrayPointer(System.Int32[],System.Int32)">
            <summary>
            获取数组指针
            </summary>
            <param name="array">数组</param>
            <param name="offset">下标偏移量</param>
            <returns>数组的指针</returns>
        </member>
        <member name="M:OpenGL.GLAUX.GetArrayPointer(System.UInt32[],System.Int32)">
            <summary>
            获取数组指针
            </summary>
            <param name="array">数组</param>
            <param name="offset">下标偏移量</param>
            <returns>数组的指针</returns>
        </member>
        <member name="M:OpenGL.GLAUX.GetArrayPointer(System.Single[],System.Int32)">
            <summary>
            获取数组指针
            </summary>
            <param name="array">数组</param>
            <param name="offset">下标偏移量</param>
            <returns>数组的指针</returns>
        </member>
        <member name="M:OpenGL.GLAUX.GetArrayPointer(System.Double[],System.Int32)">
            <summary>
            获取数组指针
            </summary>
            <param name="array">数组</param>
            <param name="offset">下标偏移量</param>
            <returns>数组的指针</returns>
        </member>
        <member name="M:OpenGL.GLAUX.GetArrayPointer(System.Char[],System.Int32)">
            <summary>
            获取数组指针
            </summary>
            <param name="array">数组</param>
            <param name="offset">下标偏移量</param>
            <returns>数组的指针</returns>
        </member>
        <member name="M:OpenGL.GLAUX.GetStringPointer(System.String,System.Int32)">
            <summary>
            获取字符串指针
            </summary>
            <param name="str">字符串</param>
            <param name="offset">下标偏移量</param>
            <returns>字符串指针</returns>
        </member>
        <member name="M:OpenGL.GLAUX.GetStringPointers(System.String[])">
            <summary>
            获取字符串数组指针
            </summary>
            <param name="strs">字符串数组</param>
            <returns>字符串指针数组</returns>
        </member>
        <member name="M:OpenGL.GLAUX.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            将OpenGL的投影矩阵设置为透视投影矩阵
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspec">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
        </member>
        <member name="M:OpenGL.GLAUX.Perspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            将OpenGL的投影矩阵设置为透视投影矩阵
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspec">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
        </member>
        <member name="M:OpenGL.GLAUX.Perspective(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            将OpenGL的投影矩阵设置为透视投影矩阵
            </summary>
            <param name="fov">视锥角</param>
            <param name="width">视景体的宽度</param>
            <param name="height">视景体的高度</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
        </member>
        <member name="M:OpenGL.GLAUX.Perspective(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            将OpenGL的投影矩阵设置为透视投影矩阵
            </summary>
            <param name="fov">视锥角</param>
            <param name="width">视景体的宽度</param>
            <param name="height">视景体的高度</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
        </member>
        <member name="M:OpenGL.GLAUX.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
             将OpenGL的投影矩阵设置为正投影矩阵
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <param name="zNear">近剪裁面距离</param>
            <param name="zFar">远剪裁面距离</param>
        </member>
        <member name="M:OpenGL.GLAUX.Ortho(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            将OpenGL的投影矩阵设置为正投影矩阵
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
        </member>
        <member name="M:OpenGL.GLAUX.Ortho(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            将OpenGL的投影矩阵设置为正投影矩阵
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <param name="zNear">近剪裁面距离</param>
            <param name="zFar">远剪裁面距离</param>
        </member>
        <member name="M:OpenGL.GLAUX.Ortho(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            将OpenGL的投影矩阵设置为正投影矩阵
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLAUX.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            将OpenGL的投影矩阵设置为透视投影矩阵
            </summary>
            <param name="left"> 指定左边垂直切面的坐标</param>
            <param name="right"> 指定右边垂直切面的坐标</param>
            <param name="bottom">指定下边水平切面的坐标</param>
            <param name="top">指定上边水平切面的坐标</param>
            <param name="near"> 指定近端深度切面的距离</param>
            <param name="far"> 指定远端深度切面的距离</param>
        </member>
        <member name="M:OpenGL.GLAUX.Frustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            将OpenGL的投影矩阵设置为正投影矩阵
            </summary>
            <param name="left"> 指定左边垂直切面的坐标</param>
            <param name="right"> 指定右边垂直切面的坐标</param>
            <param name="bottom">指定下边水平切面的坐标</param>
            <param name="top">指定上边水平切面的坐标</param>
            <param name="near"> 指定近端深度切面的距离</param>
            <param name="far"> 指定远端深度切面的距离</param>
        </member>
        <member name="M:OpenGL.GLAUX.InfinitePerspective(System.Single,System.Single,System.Single)">
            <summary>
            将OpenGL的投影矩阵设置为无限远视景深度透视投影矩阵
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLAUX.InfinitePerspective(System.Double,System.Double,System.Double)">
            <summary>
            将OpenGL的投影矩阵设置为无限远视景深度透视投影矩阵
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLAUX.LookAt(OpenGL.VEC3{System.Single},OpenGL.VEC3{System.Single},OpenGL.VEC3{System.Single})">
            <summary>
            设置观察矩阵，定义观测位置和观测方向
            </summary>
            <param name="eye">眼睛的位置</param>
            <param name="center">眼睛聚焦中心点</param>
            <param name="up">头顶方向矢量</param>
        </member>
        <member name="M:OpenGL.GLAUX.LookAt(OpenGL.VEC3{System.Double},OpenGL.VEC3{System.Double},OpenGL.VEC3{System.Double})">
            <summary>
            设置观察矩阵，定义观测位置和观测方向
            </summary>
            <param name="eye">眼睛的位置</param>
            <param name="center">眼睛聚焦中心点</param>
            <param name="up">头顶方向矢量</param>
        </member>
        <member name="P:OpenGL.GLRC.HWND">
            <summary>
            获得与OpenGL渲染环境相关联的窗口句柄
            </summary>
        </member>
        <member name="P:OpenGL.GLRC.HDC">
            <summary>
            获取与OpenGL渲染环境相关联的设备环境句柄
            </summary>
        </member>
        <member name="P:OpenGL.GLRC.HGLRC">
            <summary>
            获取与OpenGL渲染环境句柄
            </summary>
        </member>
        <member name="P:OpenGL.GLRC.ExtFuncNotFound">
            <summary>
            返回未找到的扩展函数名称
            </summary>
        </member>
        <member name="M:OpenGL.GLRC.#ctor(System.IntPtr)">
            <summary>
            采用默认的像素格式初始化OpenGL渲染环境
            </summary>
            <param name="haddle">窗口句柄</param>
        </member>
        <member name="M:OpenGL.GLRC.#ctor(System.IntPtr,OpenGL.PIXELFORMATDESCRIPTOR)">
            <summary>
            以自定义的像素格式描述器初始化OpenGL渲染环境
            </summary>
            <param name="haddle">窗口句柄</param>
            <param name="pfd">已经定义的像素格式描述器</param>
        </member>
        <member name="M:OpenGL.GLRC.MakeCurrent">
            <summary>
            将OpenGL渲染环境指定为当前线程的渲染环境
            </summary>
        </member>
        <member name="M:OpenGL.GLRC.ReleaseCurrent">
            <summary>
            将OpenGL渲染环境从当前线程的中释放
            </summary>
            <returns>释放成功就返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.GLRC.DeleteRC">
            <summary>
            删除OpenGL渲染环境
            </summary>
            <returns>成功则返回ture,否则返回false</returns>
        </member>
        <member name="M:OpenGL.GLRC.SwapBuffers">
            <summary>
            交换缓冲区
            </summary>
        </member>
        <member name="M:OpenGL.GLRC.LoadExtensionFunctions">
            <summary>
            <para>为当前的渲染环境加载扩展函数。渲染环境不一样，加载的函数指针有可能不一样，所以需要针对渲染环境加载相应的扩展函数。</para>
            <para>如果只使用1.1版本以下的OpenGL函数，可以不调用此方法</para>
            </summary>
            <returns>返回未被找到的扩展函数名称</returns>
        </member>
        <member name="M:OpenGL.GLMATH.LookAtMatrix(OpenGL.VEC3{System.Single},OpenGL.VEC3{System.Single},OpenGL.VEC3{System.Single})">
            <summary>
            构造观察矩阵。固定管线默认的坐标系统，右手侧
            </summary>
            <param name="eye">眼睛位置</param>
            <param name="center">眼睛聚焦点位置</param>
            <param name="up">头顶上方方向矢量</param>
            <returns>返回观察矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.LookAtMatrixRH(OpenGL.VEC3{System.Single},OpenGL.VEC3{System.Single},OpenGL.VEC3{System.Single})">
            <summary>
            构造观察矩阵。右手侧坐标系统。
            </summary>
            <param name="eye">眼睛位置</param>
            <param name="center">眼睛聚焦点位置</param>
            <param name="up">头顶上方方向矢量</param>
            <returns>返回观察矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.LookAtMatrixLH(OpenGL.VEC3{System.Single},OpenGL.VEC3{System.Single},OpenGL.VEC3{System.Single})">
            <summary>
            构造观察矩阵。左手侧坐标系统。
            </summary>
            <param name="eye">眼睛位置</param>
            <param name="center">眼睛聚焦点位置</param>
            <param name="up">头顶上方方向矢量</param>
            <returns>返回观察矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.LookAtMatrix(OpenGL.VEC3{System.Double},OpenGL.VEC3{System.Double},OpenGL.VEC3{System.Double})">
            <summary>
            构造观察矩阵。固定管线默认的坐标系统，右手侧
            </summary>
            <param name="eye">眼睛位置</param>
            <param name="center">眼睛聚焦点位置</param>
            <param name="up">头顶上方方向矢量</param>
            <returns>返回观察矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.LookAtMatrixRH(OpenGL.VEC3{System.Double},OpenGL.VEC3{System.Double},OpenGL.VEC3{System.Double})">
            <summary>
            构造观察矩阵。右手侧坐标系统。
            </summary>
            <param name="eye">眼睛位置</param>
            <param name="center">眼睛聚焦点位置</param>
            <param name="up">头顶上方方向矢量</param>
            <returns>返回观察矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.LookAtMatrixLH(OpenGL.VEC3{System.Double},OpenGL.VEC3{System.Double},OpenGL.VEC3{System.Double})">
            <summary>
            构造观察矩阵。左手侧坐标系统。
            </summary>
            <param name="eye">眼睛位置</param>
            <param name="center">眼睛聚焦点位置</param>
            <param name="up">头顶上方方向矢量</param>
            <returns>返回观察矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.FrustumMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造平截头透视投影矩阵。固定管线模式下默认的坐标系统，右手侧，Z值范围[-1,1]
            </summary>
            <param name="left"> 指定左边垂直切面的坐标</param>
            <param name="right"> 指定右边垂直切面的坐标</param>
            <param name="bottom">指定下边水平切面的坐标</param>
            <param name="top">指定上边水平切面的坐标</param>
            <param name="nearVal"> 指定近端深度切面的距离</param>
            <param name="farVal"> 指定远端深度切面的距离</param>
            <returns>平截头透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.FrustumMatrixLH_ZO(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造平截头透视投影矩阵。左手侧坐标系统，Z值范围[0,1]
            </summary>
            <param name="left"> 指定左边垂直切面的坐标</param>
            <param name="right"> 指定右边垂直切面的坐标</param>
            <param name="bottom">指定下边水平切面的坐标</param>
            <param name="top">指定上边水平切面的坐标</param>
            <param name="nearVal"> 指定近端深度切面的距离</param>
            <param name="farVal"> 指定远端深度切面的距离</param>
            <returns>平截头透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.FrustumMatrixLH_NO(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造平截头透视投影矩阵。左手侧坐标系统，Z值范围[-1,1]
            </summary>
            <param name="left"> 指定左边垂直切面的坐标</param>
            <param name="right"> 指定右边垂直切面的坐标</param>
            <param name="bottom">指定下边水平切面的坐标</param>
            <param name="top">指定上边水平切面的坐标</param>
            <param name="nearVal"> 指定近端深度切面的距离</param>
            <param name="farVal"> 指定远端深度切面的距离</param>
            <returns>平截头透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.FrustumMatrixRH_ZO(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造平截头透视投影矩阵。右手侧坐标系统，Z值范围[0,1]
            </summary>
            <param name="left"> 指定左边垂直切面的坐标</param>
            <param name="right"> 指定右边垂直切面的坐标</param>
            <param name="bottom">指定下边水平切面的坐标</param>
            <param name="top">指定上边水平切面的坐标</param>
            <param name="nearVal"> 指定近端深度切面的距离</param>
            <param name="farVal"> 指定远端深度切面的距离</param>
            <returns>平截头透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.FrustumMatrixRH_NO(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造平截头透视投影矩阵。右手侧坐标系统，Z值范围[-1,1]
            </summary>
            <param name="left"> 指定左边垂直切面的坐标</param>
            <param name="right"> 指定右边垂直切面的坐标</param>
            <param name="bottom">指定下边水平切面的坐标</param>
            <param name="top">指定上边水平切面的坐标</param>
            <param name="nearVal"> 指定近端深度切面的距离</param>
            <param name="farVal"> 指定远端深度切面的距离</param>
            <returns>平截头透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.FrustumMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造平截头透视投影矩阵。固定管线模式下默认的坐标系统，右手侧，Z值范围[-1,1]
            </summary>
            <param name="left"> 指定左边垂直切面的坐标</param>
            <param name="right"> 指定右边垂直切面的坐标</param>
            <param name="bottom">指定下边水平切面的坐标</param>
            <param name="top">指定上边水平切面的坐标</param>
            <param name="nearVal"> 指定近端深度切面的距离</param>
            <param name="farVal"> 指定远端深度切面的距离</param>
            <returns>平截头透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.FrustumMatrixLH_ZO(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造平截头透视投影矩阵。左手侧坐标系统，Z值范围[0,1]
            </summary>
            <param name="left"> 指定左边垂直切面的坐标</param>
            <param name="right"> 指定右边垂直切面的坐标</param>
            <param name="bottom">指定下边水平切面的坐标</param>
            <param name="top">指定上边水平切面的坐标</param>
            <param name="nearVal"> 指定近端深度切面的距离</param>
            <param name="farVal"> 指定远端深度切面的距离</param>
            <returns>平截头透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.FrustumMatrixLH_NO(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造平截头透视投影矩阵。左手侧坐标系统，Z值范围[-1,1]
            </summary>
            <param name="left"> 指定左边垂直切面的坐标</param>
            <param name="right"> 指定右边垂直切面的坐标</param>
            <param name="bottom">指定下边水平切面的坐标</param>
            <param name="top">指定上边水平切面的坐标</param>
            <param name="nearVal"> 指定近端深度切面的距离</param>
            <param name="farVal"> 指定远端深度切面的距离</param>
            <returns>平截头透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.FrustumMatrixRH_ZO(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造平截头透视投影矩阵。右手侧坐标系统，Z值范围[0,1]
            </summary>
            <param name="left"> 指定左边垂直切面的坐标</param>
            <param name="right"> 指定右边垂直切面的坐标</param>
            <param name="bottom">指定下边水平切面的坐标</param>
            <param name="top">指定上边水平切面的坐标</param>
            <param name="nearVal"> 指定近端深度切面的距离</param>
            <param name="farVal"> 指定远端深度切面的距离</param>
            <returns>平截头透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.FrustumMatrixRH_NO(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造平截头透视投影矩阵。右手侧坐标系统，Z值范围[-1,1]
            </summary>
            <param name="left"> 指定左边垂直切面的坐标</param>
            <param name="right"> 指定右边垂直切面的坐标</param>
            <param name="bottom">指定下边水平切面的坐标</param>
            <param name="top">指定上边水平切面的坐标</param>
            <param name="nearVal"> 指定近端深度切面的距离</param>
            <param name="farVal"> 指定远端深度切面的距离</param>
            <returns>平截头透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.OrthoMatrix(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            生成正投影矩阵，在剪裁面包围空间内物体可见。
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.OrthoMatrix(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            生成正投影矩阵，在剪裁面包围空间内物体可见。固定管线默认的坐标系统，右手侧，z坐标范围[-1,1]。
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <param name="zNear">近剪裁面距离</param>
            <param name="zFar">远剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.OrthoMatrixLH_ZO(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            生成正投影矩阵，在剪裁面包围空间内物体可见。左手侧，z坐标范围[0,1].
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <param name="zNear">近剪裁面距离</param>
            <param name="zFar">远剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.OrthoMatrixLH_NO(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            生成正投影矩阵，在剪裁面包围空间内物体可见。左手侧，z坐标范围[-1,1]。
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <param name="zNear">近剪裁面距离</param>
            <param name="zFar">远剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.OrthoMatrixRH_ZO(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            生成正投影矩阵，在剪裁面包围空间内物体可见。右手侧，z坐标范围[0,1]。
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <param name="zNear">近剪裁面距离</param>
            <param name="zFar">远剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.OrthoMatrixRH_NO(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            生成正投影矩阵，在剪裁面包围空间内物体可见。右手侧，z坐标范围[-1,1]。
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <param name="zNear">近剪裁面距离</param>
            <param name="zFar">远剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.OrthoMatrix(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            生成正投影矩阵，在剪裁面包围空间内物体可见。
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.OrthoMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            生成正投影矩阵，在剪裁面包围空间内物体可见。固定管线默认的坐标系统，右手侧，z坐标范围[-1,1]。
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <param name="zNear">近剪裁面距离</param>
            <param name="zFar">远剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.OrthoMatrixLH_ZO(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            生成正投影矩阵，在剪裁面包围空间内物体可见。左手侧，z坐标范围[0,1].
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <param name="zNear">近剪裁面距离</param>
            <param name="zFar">远剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.OrthoMatrixLH_NO(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            生成正投影矩阵，在剪裁面包围空间内物体可见。左手侧，z坐标范围[-1,1]。
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <param name="zNear">近剪裁面距离</param>
            <param name="zFar">远剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.OrthoMatrixRH_ZO(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            生成正投影矩阵，在剪裁面包围空间内物体可见。右手侧，z坐标范围[0,1]。
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <param name="zNear">近剪裁面距离</param>
            <param name="zFar">远剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.OrthoMatrixRH_NO(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            生成正投影矩阵，在剪裁面包围空间内物体可见。右手侧，z坐标范围[-1,1]。
            </summary>
            <param name="left">左剪裁面距离</param>
            <param name="right">右剪裁面距离</param>
            <param name="bottom">下剪裁面距离</param>
            <param name="top">上剪裁面距离</param>
            <param name="zNear">近剪裁面距离</param>
            <param name="zFar">远剪裁面距离</param>
            <returns>返回正投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrix(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造透视投影矩阵。固定管线模式下默认的坐标系统，右手侧，z取值范围[-1,1]
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrix(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造透视投影矩阵。右手侧坐标系统，z取值范围[-,1]
            </summary>
            <param name="fov">视锥角</param>
            <param name="width">视景体的宽度</param>
            <param name="height">视景体的高度</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.InfinitePerspectiveMatrix(System.Single,System.Single,System.Single)">
            <summary>
            构造无限远视景深度的透视投影矩阵。固定管线模式下默认的坐标系统，右手侧。
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixRH_ZO(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造透视投影矩阵。右手侧坐标系统，z取值范围[0,1]
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixRH_NO(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造透视投影矩阵。右手侧坐标系统，z取值范围[-1,1]
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixLH_ZO(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造透视投影矩阵。左手侧坐标系统，z取值范围[0,1]
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixLH_NO(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造透视投影矩阵。左手侧坐标系统，z取值范围[-1,1]
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixRH_ZO(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造透视投影矩阵。右手侧坐标系统，z取值范围[0,1]
            </summary>
            <param name="fov">视锥角</param>
            <param name="width">视景体的宽度</param>
            <param name="height">视景体的高度</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixRH_NO(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造透视投影矩阵。右手侧坐标系统，z取值范围[-1,1]
            </summary>
            <param name="fov">视锥角</param>
            <param name="width">视景体的宽度</param>
            <param name="height">视景体的高度</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixLH_ZO(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造透视投影矩阵。左手侧坐标系统，z取值范围[0,1]
            </summary>
            <param name="fov">视锥角</param>
            <param name="width">视景体的宽度</param>
            <param name="height">视景体的高度</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixLH_NO(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造透视投影矩阵。左手侧坐标系统，z取值范围[-1,1]
            </summary>
            <param name="fov">视锥角</param>
            <param name="width">视景体的宽度</param>
            <param name="height">视景体的高度</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.InfinitePerspectiveMatrixRH(System.Single,System.Single,System.Single)">
            <summary>
            构造无限远视景深度的透视投影矩阵。右手侧坐标系统。
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.InfinitePerspectiveMatrixLH(System.Single,System.Single,System.Single)">
            <summary>
            构造无限远视景深度的透视投影矩阵。左手侧坐标系统。
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.TweakedInfinitePerspectiveMatrix(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造无限远视景深度的透视投影矩阵
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrix(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造透视投影矩阵。固定管线模式下默认的坐标系统，右手侧，z取值范围[-1,1]
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrix(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造透视投影矩阵。右手侧坐标系统，z取值范围[-1,1]
            </summary>
            <param name="fov">视锥角</param>
            <param name="width">视景体的宽度</param>
            <param name="height">视景体的高度</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.InfinitePerspectiveMatrix(System.Double,System.Double,System.Double)">
            <summary>
            构造无限远视景深度的透视投影矩阵。固定管线模式下默认的坐标系统，右手侧。
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixRH_ZO(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造透视投影矩阵。右手侧坐标系统，z取值范围[0,1]
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixRH_NO(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造透视投影矩阵。右手侧坐标系统，z取值范围[-1,1]
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixLH_ZO(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造透视投影矩阵。左手侧坐标系统，z取值范围[0,1]
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixLH_NO(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造透视投影矩阵。左手侧坐标系统，z取值范围[-1,1]
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixRH_ZO(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造透视投影矩阵。右手侧坐标系统，z取值范围[0,1]
            </summary>
            <param name="fov">视锥角</param>
            <param name="width">视景体的宽度</param>
            <param name="height">视景体的高度</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixRH_NO(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造透视投影矩阵。右手侧坐标系统，z取值范围[-1,1]
            </summary>
            <param name="fov">视锥角</param>
            <param name="width">视景体的宽度</param>
            <param name="height">视景体的高度</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixLH_ZO(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造透视投影矩阵。左手侧坐标系统，z取值范围[0,1]
            </summary>
            <param name="fov">视锥角</param>
            <param name="width">视景体的宽度</param>
            <param name="height">视景体的高度</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.PerspectiveMatrixLH_NO(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造透视投影矩阵。左手侧坐标系统，z取值范围[-1,1]
            </summary>
            <param name="fov">视锥角</param>
            <param name="width">视景体的宽度</param>
            <param name="height">视景体的高度</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <param name="zFar">沿z轴方向的两裁面之间的距离的远处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.InfinitePerspectiveMatrixRH(System.Double,System.Double,System.Double)">
            <summary>
            构造无限远视景深度的透视投影矩阵。右手侧坐标系统。
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.InfinitePerspectiveMatrixLH(System.Double,System.Double,System.Double)">
            <summary>
            构造无限远视景深度的透视投影矩阵。左手侧坐标系统。
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.TweakedInfinitePerspectiveMatrix(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            构造无限远视景深度的透视投影矩阵
            </summary>
            <param name="fovy">视锥角</param>
            <param name="aspect">视景体的宽高比</param>
            <param name="zNear">沿z轴方向的两裁面之间的距离的近处</param>
            <returns>透视投影矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.TranslateMatrix(OpenGL.VEC4{System.Single})">
            <summary>
            构造模型平移变换矩阵
            </summary>
            <param name="v">位移向量，包含x,y,z，w坐标，但w被忽略</param>
            <returns>返回平移变换矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.TranslateMatrix(OpenGL.VEC3{System.Single})">
            <summary>
            构造模型平移变换矩阵
            </summary>
            <param name="v">位移向量，包含x,y,z坐标</param>
            <returns>返回平移变换矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.TranslateMatrix(System.Single,System.Single,System.Single)">
             <summary>
            构造模型平移变换矩阵
             </summary>
             <param name="x">x方向位移</param>
             <param name="y">y方向位移</param>
             <param name="z">z方向位移</param>
             <returns>返回平移变矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.TranslateMatrix(OpenGL.VEC4{System.Double})">
            <summary>
            构造模型平移变换矩阵
            </summary>
            <param name="v">位移向量，包含x,y,z，w坐标，但w被忽略</param>
            <returns>返回平移变换矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.TranslateMatrix(OpenGL.VEC3{System.Double})">
            <summary>
            构造模型平移变换矩阵
            </summary>
            <param name="v">位移向量，包含x,y,z坐标</param>
            <returns>返回平移变换矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.TranslateMatrix(System.Double,System.Double,System.Double)">
             <summary>
            构造模型平移变换矩阵
             </summary>
             <param name="x">x方向位移</param>
             <param name="y">y方向位移</param>
             <param name="z">z方向位移</param>
             <returns>返回平移变矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.ScaleMatrix(OpenGL.VEC4{System.Single})">
            <summary>
            构造模型缩放变换矩阵
            </summary>
            <param name="v">缩放向量，包含x,y,z,w方向，w被忽略</param>
            <returns>返回缩放变换模型矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.ScaleMatrix(OpenGL.VEC3{System.Single})">
            <summary>
            构造模型缩放变换矩阵
            </summary>
            <param name="v">缩放向量，包含x,y,z方向</param>
            <returns>返回缩放变换模型矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.ScaleMatrix(System.Single,System.Single,System.Single)">
            <summary>
            构造模型缩放变换矩阵
            </summary>
            <param name="x">x方向</param>
            <param name="y">y方向</param>
            <param name="z">z方向</param>
            <returns>返回缩放变换模型矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.ScaleMatrix(OpenGL.VEC4{System.Double})">
            <summary>
            构造模型缩放变换矩阵
            </summary>
            <param name="v">缩放向量，包含x,y,z,w方向，w被忽略</param>
            <returns>返回缩放变换模型矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.ScaleMatrix(OpenGL.VEC3{System.Double})">
            <summary>
            构造模型缩放变换矩阵
            </summary>
            <param name="v">缩放向量，包含x,y,z方向</param>
            <returns>返回缩放变换模型矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.ScaleMatrix(System.Double,System.Double,System.Double)">
            <summary>
            构造模型缩放变换矩阵
            </summary>
            <param name="x">x方向</param>
            <param name="y">y方向</param>
            <param name="z">z方向</param>
            <returns>返回缩放变换模型矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.RotateMatrix(System.Single,OpenGL.VEC4{System.Single})">
            <summary>
            构造模型旋转变换矩阵
            </summary>
            <param name="angle">旋转角度</param>
            <param name="v">旋转轴矢量,包含x,y,z,w坐标，但w坐标被忽略</param>
            <returns>模型旋转变换矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.RotateMatrix(System.Single,OpenGL.VEC3{System.Single})">
            <summary>
            构造模型旋转变换矩阵
            </summary>
            <param name="angle">旋转角度</param>
            <param name="v">旋转轴矢量，包含x,y,z坐标</param>
            <returns>模型旋转变换矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.RotateMatrix(System.Single,System.Single,System.Single,System.Single)">
             <summary>
            构造模型旋转变换矩阵
             </summary>
             <param name="angle">旋转角</param>
             <param name="x">旋转轴向量x分量</param>
             <param name="y">旋转轴向量y分量</param>
             <param name="z">旋转轴向量z分量</param>
             <returns>返回旋转变换模型矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.RotateMatrix(System.Double,OpenGL.VEC4{System.Double})">
            <summary>
            构造模型旋转变换矩阵
            </summary>
            <param name="angle">旋转角度</param>
            <param name="v">旋转轴矢量,包含x,y,z,w坐标，但w坐标被忽略</param>
            <returns>模型旋转变换矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.RotateMatrix(System.Double,OpenGL.VEC3{System.Double})">
            <summary>
            将模型矩阵进行旋转变换
            </summary>
            <param name="angle">旋转角</param>
            <param name="v">旋转轴向量，包含x,y,z</param>
            <returns>返回旋转变换后的模型矩阵</returns>
        </member>
        <member name="M:OpenGL.GLMATH.RotateMatrix(System.Double,System.Double,System.Double,System.Double)">
             <summary>
            构造模型旋转变换矩阵
             </summary>
             <param name="angle">旋转角</param>
             <param name="x">旋转轴向量x分量</param>
             <param name="y">旋转轴向量y分量</param>
             <param name="z">旋转轴向量z分量</param>
             <returns>返回旋转变换模型矩阵</returns>
        </member>
        <member name="P:OpenGL.MAT4x3`1.Rows">
            <summary>
            矩阵的行数
            </summary>
        </member>
        <member name="P:OpenGL.MAT4x3`1.Columns">
            <summary>
            矩阵的列数
            </summary>
        </member>
        <member name="P:OpenGL.MAT4x3`1.Item(System.Int32,System.Int32)">
            <summary>
            获取指定行列索引的矩阵元素
            </summary>
            <param name="i">行索引</param>
            <param name="j">列索引</param>
            <returns>指定的矩阵元素</returns>
        </member>
        <member name="P:OpenGL.MAT4x3`1.Item(System.Int32)">
            <summary>
            获取指定列，返回列向量
            </summary>
            <param name="i">列索引</param>
            <returns>列向量</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.#ctor">
            <summary>
            默认方式初始化矩阵，所有矩阵元素设为0
            </summary>
        </member>
        <member name="M:OpenGL.MAT4x3`1.#ctor(OpenGL.MAT4x3{`0})">
            <summary>
            用矩阵初始化矩阵
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT4x3`1.#ctor(OpenGL.VEC4{`0},OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            用列向量初始化矩阵
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
            <param name="col2">第2列向量</param>
        </member>
        <member name="M:OpenGL.MAT4x3`1.#ctor(`0[0:,0:])">
            <summary>
            用二维数组初始化向量
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT4x3`1.#ctor(`0[])">
            <summary>
            用一维数组初始化向量
            </summary>
            <param name="array">一维数组，元素按列排放</param>
        </member>
        <member name="M:OpenGL.MAT4x3`1.GetRowToArray``1(System.Int32)">
            <summary>
            获取一行矩阵元素，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.GetRowToVEC3``1(System.Int32)">
            <summary>
            获取指定行，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.GetColumnToArray``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.GetColumnToVEC4``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.ToArray1D``1">
            <summary>
            矩阵转换为指定类型的一维数组
            </summary>
            <typeparam name="TOutput">数组类型</typeparam>
            <returns>指定类型的一维数组</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.ToArray2D``1">
            <summary>
            矩阵转换为指定类型的二维数组
            </summary>
            <typeparam name="TOutput">数组的类型</typeparam>
            <returns>指定类型的二维数组</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.ToMAT4x3``1">
            <summary>
            矩阵转换为指定类型的矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.SetElements(OpenGL.VEC4{`0},OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            用列向量来设置数组元素
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
            <param name="col2">第2列向量</param>
        </member>
        <member name="M:OpenGL.MAT4x3`1.SetElements(OpenGL.MAT4x3{`0})">
            <summary>
            用矩阵设置矩阵元素
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT4x3`1.SetElements(`0[])">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">矩阵元素按列排放的一维数组</param>
        </member>
        <member name="M:OpenGL.MAT4x3`1.SetElements(`0[0:,0:])">
            <summary>
            用二维数组初设置矩阵元素
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT4x3`1.SetRow(OpenGL.VEC3{`0},System.Int32)">
            <summary>
            用向量设置矩阵的一行元素
            </summary>
            <param name="vec">向量</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT4x3`1.SetRow(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵的一行
            </summary>
            <param name="array">一维数组</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT4x3`1.SetColumn(OpenGL.VEC4{`0},System.Int32)">
            <summary>
            用向量设置矩阵一列
            </summary>
            <param name="vec">列向量</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT4x3`1.SetColumn(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">一维数组</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT4x3`1.SetElemsToZeros">
            <summary>
            将矩阵元素全部置零
            </summary>
        </member>
        <member name="M:OpenGL.MAT4x3`1.SetElemsToOnes">
            <summary>
            将矩阵元素全部置一
            </summary>
        </member>
        <member name="M:OpenGL.MAT4x3`1.Transpose">
            <summary>
            获取矩阵的转置矩阵
            </summary>
            <returns>转置矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Addition(OpenGL.MAT4x3{`0},OpenGL.MAT4x3{`0})">
            <summary>
            矩阵相加
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>返回矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Addition(`0,OpenGL.MAT4x3{`0})">
            <summary>
            一个数与矩阵相加。一个数分别与矩阵元素相加
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Addition(OpenGL.MAT4x3{`0},`0)">
            <summary>
            一个矩阵与一个数相加
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Subtraction(OpenGL.MAT4x3{`0},OpenGL.MAT4x3{`0})">
            <summary>
            两个矩阵相减
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Subtraction(`0,OpenGL.MAT4x3{`0})">
            <summary>
            一个数与矩阵相减。一个数分别减去矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Subtraction(OpenGL.MAT4x3{`0},`0)">
            <summary>
            一个矩阵与一个数相减。矩阵元素分别与数相减
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Multiply(OpenGL.MAT4x3{`0},OpenGL.MAT3x2{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Multiply(OpenGL.MAT4x3{`0},OpenGL.MAT3{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Multiply(OpenGL.MAT4x3{`0},OpenGL.MAT3x4{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Multiply(`0,OpenGL.MAT4x3{`0})">
            <summary>
            一个数与矩阵相乘。一个数分别乘以各矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Multiply(OpenGL.MAT4x3{`0},`0)">
            <summary>
            矩阵乘以一个数。矩阵元素分别乘以一个数
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.Multi(OpenGL.MAT4x3{`0})">
            <summary>
            矩阵对应的元素分别相乘
            </summary>
            <param name="m">乘矩阵</param>
            <returns>返回的矩阵行数和列数与原矩阵相同</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Division(OpenGL.MAT4x3{`0},`0)">
            <summary>
            矩阵除以一个数。矩阵元素分别除以一个数
            </summary>
            <param name="matrix">矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Division(OpenGL.MAT4x3{`0},OpenGL.MAT4x3{`0})">
            <summary>
            矩阵除以矩阵。矩阵相应的元素相除
            </summary>
            <param name="mat1">被除矩阵</param>
            <param name="mat2">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Division(`0,OpenGL.MAT4x3{`0})">
            <summary>
            一个数除以矩阵。一个数分别除以矩阵元素
            </summary>
            <param name="num">被除数</param>
            <param name="matrix">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_ExclusiveOr(`0,OpenGL.MAT4x3{`0})">
            <summary>
            一个数对矩阵求幂。一个分别对矩阵元素求幂
            </summary>
            <param name="num">底数</param>
            <param name="matrix">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_ExclusiveOr(OpenGL.MAT4x3{`0},`0)">
            <summary>
            一个矩阵对一个数求幂。矩阵元素分别对一个数求幂
            </summary>
            <param name="matrix">底数矩阵</param>
            <param name="num">指数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_ExclusiveOr(OpenGL.MAT4x3{`0},OpenGL.MAT4x3{`0})">
            <summary>
            矩阵对矩阵球求幂。矩阵对应元素分别求幂
            </summary>
            <param name="mat1">底数矩阵</param>
            <param name="mat2">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_UnaryNegation(OpenGL.MAT4x3{`0})">
            <summary>
            矩阵取负
            </summary>
            <param name="matrix">矩阵</param>
            <returns>返回负矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Equality(OpenGL.MAT4x3{`0},OpenGL.MAT4x3{`0})">
            <summary>
            判断矩阵是否相等。各对应元素相等，则视为相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果相等，则返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.MAT4x3`1.op_Inequality(OpenGL.MAT4x3{`0},OpenGL.MAT4x3{`0})">
            <summary>
            判断两个矩阵是否不相等.存在一个对应元素不相等，则视为不相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果不等，返回true,否则返回码false</returns>
        </member>
        <member name="P:OpenGL.MAT4x2`1.Rows">
            <summary>
            矩阵的行数
            </summary>
        </member>
        <member name="P:OpenGL.MAT4x2`1.Columns">
            <summary>
            矩阵的列数
            </summary>
        </member>
        <member name="P:OpenGL.MAT4x2`1.Item(System.Int32,System.Int32)">
            <summary>
            获取指定行列索引的矩阵元素
            </summary>
            <param name="i">行索引</param>
            <param name="j">列索引</param>
            <returns>指定的矩阵元素</returns>
        </member>
        <member name="P:OpenGL.MAT4x2`1.Item(System.Int32)">
            <summary>
            获取指定列，返回列向量
            </summary>
            <param name="i">列索引</param>
            <returns>列向量</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.#ctor">
            <summary>
            默认方式初始化矩阵，所有矩阵元素设为0
            </summary>
        </member>
        <member name="M:OpenGL.MAT4x2`1.#ctor(OpenGL.MAT4x2{`0})">
            <summary>
            用矩阵初始化矩阵
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT4x2`1.#ctor(OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            用列向量初始化矩阵
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
        </member>
        <member name="M:OpenGL.MAT4x2`1.#ctor(`0[0:,0:])">
            <summary>
            用二维数组初始化向量
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT4x2`1.#ctor(`0[])">
            <summary>
            用一维数组初始化向量
            </summary>
            <param name="array">一维数组，元素按列排放</param>
        </member>
        <member name="M:OpenGL.MAT4x2`1.GetRowToArray``1(System.Int32)">
            <summary>
            获取一行矩阵元素，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.GetRowToVEC2``1(System.Int32)">
            <summary>
            获取指定行，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.GetColumnToArray``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.GetColumnToVEC4``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.ToArray1D``1">
            <summary>
            矩阵转换为指定类型的一维数组
            </summary>
            <typeparam name="TOutput">数组类型</typeparam>
            <returns>指定类型的一维数组</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.ToArray2D``1">
            <summary>
            矩阵转换为指定类型的二维数组
            </summary>
            <typeparam name="TOutput">数组的类型</typeparam>
            <returns>指定类型的二维数组</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.ToMAT4x2``1">
            <summary>
            矩阵转换为指定类型的矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.SetElements(OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            用列向量来设置数组元素
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
        </member>
        <member name="M:OpenGL.MAT4x2`1.SetElements(OpenGL.MAT4x2{`0})">
            <summary>
            用矩阵设置矩阵元素
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT4x2`1.SetElements(`0[])">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">矩阵元素按列排放的一维数组</param>
        </member>
        <member name="M:OpenGL.MAT4x2`1.SetElements(`0[0:,0:])">
            <summary>
            用二维数组初设置矩阵元素
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT4x2`1.SetRow(OpenGL.VEC2{`0},System.Int32)">
            <summary>
            用向量设置矩阵的一行元素
            </summary>
            <param name="vec">向量</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT4x2`1.SetRow(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵的一行
            </summary>
            <param name="array">一维数组</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT4x2`1.SetColumn(OpenGL.VEC4{`0},System.Int32)">
            <summary>
            用向量设置矩阵一列
            </summary>
            <param name="vec">列向量</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT4x2`1.SetColumn(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">一维数组</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT4x2`1.SetElemsToZeros">
            <summary>
            将矩阵元素全部置零
            </summary>
        </member>
        <member name="M:OpenGL.MAT4x2`1.SetElemsToOnes">
            <summary>
            将矩阵元素全部置一
            </summary>
        </member>
        <member name="M:OpenGL.MAT4x2`1.Transpose">
            <summary>
            获取矩阵的转置矩阵
            </summary>
            <returns>转置矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Addition(OpenGL.MAT4x2{`0},OpenGL.MAT4x2{`0})">
            <summary>
            矩阵相加
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>返回矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Addition(`0,OpenGL.MAT4x2{`0})">
            <summary>
            一个数与矩阵相加。一个数分别与矩阵元素相加
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Addition(OpenGL.MAT4x2{`0},`0)">
            <summary>
            一个矩阵与一个数相加
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Subtraction(OpenGL.MAT4x2{`0},OpenGL.MAT4x2{`0})">
            <summary>
            两个矩阵相减
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Subtraction(`0,OpenGL.MAT4x2{`0})">
            <summary>
            一个数与矩阵相减。一个数分别减去矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Subtraction(OpenGL.MAT4x2{`0},`0)">
            <summary>
            一个矩阵与一个数相减。矩阵元素分别与数相减
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Multiply(OpenGL.MAT4x2{`0},OpenGL.MAT2{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Multiply(OpenGL.MAT4x2{`0},OpenGL.MAT2x3{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Multiply(OpenGL.MAT4x2{`0},OpenGL.MAT2x4{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Multiply(`0,OpenGL.MAT4x2{`0})">
            <summary>
            一个数与矩阵相乘。一个数分别乘以各矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Multiply(OpenGL.MAT4x2{`0},`0)">
            <summary>
            矩阵乘以一个数。矩阵元素分别乘以一个数
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.Multi(OpenGL.MAT4x2{`0})">
            <summary>
            矩阵对应的元素分别相乘
            </summary>
            <param name="m">乘矩阵</param>
            <returns>返回的矩阵行数和列数与原矩阵相同</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Division(OpenGL.MAT4x2{`0},`0)">
            <summary>
            矩阵除以一个数。矩阵元素分别除以一个数
            </summary>
            <param name="matrix">矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Division(OpenGL.MAT4x2{`0},OpenGL.MAT4x2{`0})">
            <summary>
            矩阵除以矩阵。矩阵相应的元素相除
            </summary>
            <param name="mat1">被除矩阵</param>
            <param name="mat2">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Division(`0,OpenGL.MAT4x2{`0})">
            <summary>
            一个数除以矩阵。一个数分别除以矩阵元素
            </summary>
            <param name="num">被除数</param>
            <param name="matrix">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_ExclusiveOr(`0,OpenGL.MAT4x2{`0})">
            <summary>
            一个数对矩阵求幂。一个分别对矩阵元素求幂
            </summary>
            <param name="num">底数</param>
            <param name="matrix">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_ExclusiveOr(OpenGL.MAT4x2{`0},`0)">
            <summary>
            一个矩阵对一个数求幂。矩阵元素分别对一个数求幂
            </summary>
            <param name="matrix">底数矩阵</param>
            <param name="num">指数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_ExclusiveOr(OpenGL.MAT4x2{`0},OpenGL.MAT4x2{`0})">
            <summary>
            矩阵对矩阵球求幂。矩阵对应元素分别求幂
            </summary>
            <param name="mat1">底数矩阵</param>
            <param name="mat2">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_UnaryNegation(OpenGL.MAT4x2{`0})">
            <summary>
            矩阵取负
            </summary>
            <param name="matrix">矩阵</param>
            <returns>返回负矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Equality(OpenGL.MAT4x2{`0},OpenGL.MAT4x2{`0})">
            <summary>
            判断矩阵是否相等。各对应元素相等，则视为相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果相等，则返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.MAT4x2`1.op_Inequality(OpenGL.MAT4x2{`0},OpenGL.MAT4x2{`0})">
            <summary>
            判断两个矩阵是否不相等.存在一个对应元素不相等，则视为不相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果不等，返回true,否则返回码false</returns>
        </member>
        <member name="P:OpenGL.MAT3x4`1.Rows">
            <summary>
            矩阵的行数
            </summary>
        </member>
        <member name="P:OpenGL.MAT3x4`1.Columns">
            <summary>
            矩阵的列数
            </summary>
        </member>
        <member name="P:OpenGL.MAT3x4`1.Item(System.Int32,System.Int32)">
            <summary>
            获取指定行列索引的矩阵元素
            </summary>
            <param name="i">行索引</param>
            <param name="j">列索引</param>
            <returns>指定的矩阵元素</returns>
        </member>
        <member name="P:OpenGL.MAT3x4`1.Item(System.Int32)">
            <summary>
            获取指定列，返回列向量
            </summary>
            <param name="i">列索引</param>
            <returns>列向量</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.#ctor">
            <summary>
            默认方式初始化矩阵，所有矩阵元素设为0
            </summary>
        </member>
        <member name="M:OpenGL.MAT3x4`1.#ctor(OpenGL.MAT3x4{`0})">
            <summary>
            用矩阵初始化矩阵
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT3x4`1.#ctor(OpenGL.VEC3{`0},OpenGL.VEC3{`0},OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            用列向量初始化矩阵
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
            <param name="col2">第2列向量</param>
            <param name="col3">第3列向量</param>
        </member>
        <member name="M:OpenGL.MAT3x4`1.#ctor(`0[0:,0:])">
            <summary>
            用二维数组初始化向量
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT3x4`1.#ctor(`0[])">
            <summary>
            用一维数组初始化向量
            </summary>
            <param name="array">一维数组，元素按列排放</param>
        </member>
        <member name="M:OpenGL.MAT3x4`1.GetRowToArray``1(System.Int32)">
            <summary>
            获取一行矩阵元素，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.GetRowToVEC4``1(System.Int32)">
            <summary>
            获取指定行，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.GetColumnToArray``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.GetColumnToVEC3``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.ToArray1D``1">
            <summary>
            矩阵转换为指定类型的一维数组
            </summary>
            <typeparam name="TOutput">数组类型</typeparam>
            <returns>指定类型的一维数组</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.ToArray2D``1">
            <summary>
            矩阵转换为指定类型的二维数组
            </summary>
            <typeparam name="TOutput">数组的类型</typeparam>
            <returns>指定类型的二维数组</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.ToMAT3x4``1">
            <summary>
            矩阵转换为指定类型的矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.SetElements(OpenGL.VEC3{`0},OpenGL.VEC3{`0},OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            用列向量来设置数组元素
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
            <param name="col2">第2列向量</param>
            <param name="col3">第3列向量</param>
        </member>
        <member name="M:OpenGL.MAT3x4`1.SetElements(OpenGL.MAT3x4{`0})">
            <summary>
            用矩阵设置矩阵元素
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT3x4`1.SetElements(`0[])">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">矩阵元素按列排放的一维数组</param>
        </member>
        <member name="M:OpenGL.MAT3x4`1.SetElements(`0[0:,0:])">
            <summary>
            用二维数组初设置矩阵元素
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT3x4`1.SetRow(OpenGL.VEC4{`0},System.Int32)">
            <summary>
            用向量设置矩阵的一行元素
            </summary>
            <param name="vec">向量</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT3x4`1.SetRow(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵的一行
            </summary>
            <param name="array">一维数组</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT3x4`1.SetColumn(OpenGL.VEC3{`0},System.Int32)">
            <summary>
            用向量设置矩阵一列
            </summary>
            <param name="vec">列向量</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT3x4`1.SetColumn(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">一维数组</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT3x4`1.SetElemsToZeros">
            <summary>
            将矩阵元素全部置零
            </summary>
        </member>
        <member name="M:OpenGL.MAT3x4`1.SetElemsToOnes">
            <summary>
            将矩阵元素全部置一
            </summary>
        </member>
        <member name="M:OpenGL.MAT3x4`1.Transpose">
            <summary>
            获取矩阵的转置矩阵
            </summary>
            <returns>转置矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Addition(OpenGL.MAT3x4{`0},OpenGL.MAT3x4{`0})">
            <summary>
            矩阵相加
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>返回矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Addition(`0,OpenGL.MAT3x4{`0})">
            <summary>
            一个数与矩阵相加。一个数分别与矩阵元素相加
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Addition(OpenGL.MAT3x4{`0},`0)">
            <summary>
            一个矩阵与一个数相加
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Subtraction(OpenGL.MAT3x4{`0},OpenGL.MAT3x4{`0})">
            <summary>
            两个矩阵相减
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Subtraction(`0,OpenGL.MAT3x4{`0})">
            <summary>
            一个数与矩阵相减。一个数分别减去矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Subtraction(OpenGL.MAT3x4{`0},`0)">
            <summary>
            一个矩阵与一个数相减。矩阵元素分别与数相减
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Multiply(OpenGL.MAT3x4{`0},OpenGL.MAT4x2{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Multiply(OpenGL.MAT3x4{`0},OpenGL.MAT4x3{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Multiply(OpenGL.MAT3x4{`0},OpenGL.MAT4{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Multiply(`0,OpenGL.MAT3x4{`0})">
            <summary>
            一个数与矩阵相乘。一个数分别乘以各矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Multiply(OpenGL.MAT3x4{`0},`0)">
            <summary>
            矩阵乘以一个数。矩阵元素分别乘以一个数
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.Multi(OpenGL.MAT3x4{`0})">
            <summary>
            矩阵对应的元素分别相乘
            </summary>
            <param name="m">乘矩阵</param>
            <returns>返回的矩阵行数和列数与原矩阵相同</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Division(OpenGL.MAT3x4{`0},`0)">
            <summary>
            矩阵除以一个数。矩阵元素分别除以一个数
            </summary>
            <param name="matrix">矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Division(OpenGL.MAT3x4{`0},OpenGL.MAT3x4{`0})">
            <summary>
            矩阵除以矩阵。矩阵相应的元素相除
            </summary>
            <param name="mat1">被除矩阵</param>
            <param name="mat2">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Division(`0,OpenGL.MAT3x4{`0})">
            <summary>
            一个数除以矩阵。一个数分别除以矩阵元素
            </summary>
            <param name="num">被除数</param>
            <param name="matrix">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_ExclusiveOr(`0,OpenGL.MAT3x4{`0})">
            <summary>
            一个数对矩阵求幂。一个分别对矩阵元素求幂
            </summary>
            <param name="num">底数</param>
            <param name="matrix">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_ExclusiveOr(OpenGL.MAT3x4{`0},`0)">
            <summary>
            一个矩阵对一个数求幂。矩阵元素分别对一个数求幂
            </summary>
            <param name="matrix">底数矩阵</param>
            <param name="num">指数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_ExclusiveOr(OpenGL.MAT3x4{`0},OpenGL.MAT3x4{`0})">
            <summary>
            矩阵对矩阵球求幂。矩阵对应元素分别求幂
            </summary>
            <param name="mat1">底数矩阵</param>
            <param name="mat2">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_UnaryNegation(OpenGL.MAT3x4{`0})">
            <summary>
            矩阵取负
            </summary>
            <param name="matrix">矩阵</param>
            <returns>返回负矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Equality(OpenGL.MAT3x4{`0},OpenGL.MAT3x4{`0})">
            <summary>
            判断矩阵是否相等。各对应元素相等，则视为相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果相等，则返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.MAT3x4`1.op_Inequality(OpenGL.MAT3x4{`0},OpenGL.MAT3x4{`0})">
            <summary>
            判断两个矩阵是否不相等.存在一个对应元素不相等，则视为不相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果不等，返回true,否则返回码false</returns>
        </member>
        <member name="P:OpenGL.MAT3x2`1.Rows">
            <summary>
            矩阵的行数
            </summary>
        </member>
        <member name="P:OpenGL.MAT3x2`1.Columns">
            <summary>
            矩阵的列数
            </summary>
        </member>
        <member name="P:OpenGL.MAT3x2`1.Item(System.Int32,System.Int32)">
            <summary>
            获取指定行列索引的矩阵元素
            </summary>
            <param name="i">行索引</param>
            <param name="j">列索引</param>
            <returns>指定的矩阵元素</returns>
        </member>
        <member name="P:OpenGL.MAT3x2`1.Item(System.Int32)">
            <summary>
            获取指定列，返回列向量
            </summary>
            <param name="i">列索引</param>
            <returns>列向量</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.#ctor">
            <summary>
            默认方式初始化矩阵，所有矩阵元素设为0
            </summary>
        </member>
        <member name="M:OpenGL.MAT3x2`1.#ctor(OpenGL.MAT3x2{`0})">
            <summary>
            用矩阵初始化矩阵
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT3x2`1.#ctor(OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            用列向量初始化矩阵
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
        </member>
        <member name="M:OpenGL.MAT3x2`1.#ctor(`0[0:,0:])">
            <summary>
            用二维数组初始化向量
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT3x2`1.#ctor(`0[])">
            <summary>
            用一维数组初始化向量
            </summary>
            <param name="array">一维数组，元素按列排放</param>
        </member>
        <member name="M:OpenGL.MAT3x2`1.GetRowToArray``1(System.Int32)">
            <summary>
            获取一行矩阵元素，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.GetRowToVEC2``1(System.Int32)">
            <summary>
            获取指定行，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.GetColumnToArray``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.GetColumnToVEC3``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.ToArray1D``1">
            <summary>
            矩阵转换为指定类型的一维数组
            </summary>
            <typeparam name="TOutput">数组类型</typeparam>
            <returns>指定类型的一维数组</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.ToArray2D``1">
            <summary>
            矩阵转换为指定类型的二维数组
            </summary>
            <typeparam name="TOutput">数组的类型</typeparam>
            <returns>指定类型的二维数组</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.ToMAT3x2``1">
            <summary>
            矩阵转换为指定类型的矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.SetElements(OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            用列向量来设置数组元素
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
        </member>
        <member name="M:OpenGL.MAT3x2`1.SetElements(OpenGL.MAT3x2{`0})">
            <summary>
            用矩阵设置矩阵元素
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT3x2`1.SetElements(`0[])">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">矩阵元素按列排放的一维数组</param>
        </member>
        <member name="M:OpenGL.MAT3x2`1.SetElements(`0[0:,0:])">
            <summary>
            用二维数组初设置矩阵元素
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT3x2`1.SetRow(OpenGL.VEC3{`0},System.Int32)">
            <summary>
            用向量设置矩阵的一行元素
            </summary>
            <param name="vec">向量</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT3x2`1.SetRow(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵的一行
            </summary>
            <param name="array">一维数组</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT3x2`1.SetColumn(OpenGL.VEC3{`0},System.Int32)">
            <summary>
            用向量设置矩阵一列
            </summary>
            <param name="vec">列向量</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT3x2`1.SetColumn(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">一维数组</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT3x2`1.SetElemsToZeros">
            <summary>
            将矩阵元素全部置零
            </summary>
        </member>
        <member name="M:OpenGL.MAT3x2`1.SetElemsToOnes">
            <summary>
            将矩阵元素全部置一
            </summary>
        </member>
        <member name="M:OpenGL.MAT3x2`1.Transpose">
            <summary>
            获取矩阵的转置矩阵
            </summary>
            <returns>转置矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Addition(OpenGL.MAT3x2{`0},OpenGL.MAT3x2{`0})">
            <summary>
            矩阵相加
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>返回矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Addition(`0,OpenGL.MAT3x2{`0})">
            <summary>
            一个数与矩阵相加。一个数分别与矩阵元素相加
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Addition(OpenGL.MAT3x2{`0},`0)">
            <summary>
            一个矩阵与一个数相加
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Subtraction(OpenGL.MAT3x2{`0},OpenGL.MAT3x2{`0})">
            <summary>
            两个矩阵相减
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Subtraction(`0,OpenGL.MAT3x2{`0})">
            <summary>
            一个数与矩阵相减。一个数分别减去矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Subtraction(OpenGL.MAT3x2{`0},`0)">
            <summary>
            一个矩阵与一个数相减。矩阵元素分别与数相减
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Multiply(OpenGL.MAT3x2{`0},OpenGL.MAT2{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Multiply(OpenGL.MAT3x2{`0},OpenGL.MAT2x3{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Multiply(OpenGL.MAT3x2{`0},OpenGL.MAT2x4{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Multiply(`0,OpenGL.MAT3x2{`0})">
            <summary>
            一个数与矩阵相乘。一个数分别乘以各矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Multiply(OpenGL.MAT3x2{`0},`0)">
            <summary>
            矩阵乘以一个数。矩阵元素分别乘以一个数
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.Multi(OpenGL.MAT3x2{`0})">
            <summary>
            矩阵对应的元素分别相乘
            </summary>
            <param name="m">乘矩阵</param>
            <returns>返回的矩阵行数和列数与原矩阵相同</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Division(OpenGL.MAT3x2{`0},`0)">
            <summary>
            矩阵除以一个数。矩阵元素分别除以一个数
            </summary>
            <param name="matrix">矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Division(OpenGL.MAT3x2{`0},OpenGL.MAT3x2{`0})">
            <summary>
            矩阵除以矩阵。矩阵相应的元素相除
            </summary>
            <param name="mat1">被除矩阵</param>
            <param name="mat2">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Division(`0,OpenGL.MAT3x2{`0})">
            <summary>
            一个数除以矩阵。一个数分别除以矩阵元素
            </summary>
            <param name="num">被除数</param>
            <param name="matrix">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_ExclusiveOr(`0,OpenGL.MAT3x2{`0})">
            <summary>
            一个数对矩阵求幂。一个分别对矩阵元素求幂
            </summary>
            <param name="num">底数</param>
            <param name="matrix">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_ExclusiveOr(OpenGL.MAT3x2{`0},`0)">
            <summary>
            一个矩阵对一个数求幂。矩阵元素分别对一个数求幂
            </summary>
            <param name="matrix">底数矩阵</param>
            <param name="num">指数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_ExclusiveOr(OpenGL.MAT3x2{`0},OpenGL.MAT3x2{`0})">
            <summary>
            矩阵对矩阵球求幂。矩阵对应元素分别求幂
            </summary>
            <param name="mat1">底数矩阵</param>
            <param name="mat2">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_UnaryNegation(OpenGL.MAT3x2{`0})">
            <summary>
            矩阵取负
            </summary>
            <param name="matrix">矩阵</param>
            <returns>返回负矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Equality(OpenGL.MAT3x2{`0},OpenGL.MAT3x2{`0})">
            <summary>
            判断矩阵是否相等。各对应元素相等，则视为相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果相等，则返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.MAT3x2`1.op_Inequality(OpenGL.MAT3x2{`0},OpenGL.MAT3x2{`0})">
            <summary>
            判断两个矩阵是否不相等.存在一个对应元素不相等，则视为不相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果不等，返回true,否则返回码false</returns>
        </member>
        <member name="P:OpenGL.MAT2x4`1.Rows">
            <summary>
            矩阵的行数
            </summary>
        </member>
        <member name="P:OpenGL.MAT2x4`1.Columns">
            <summary>
            矩阵的列数
            </summary>
        </member>
        <member name="P:OpenGL.MAT2x4`1.Item(System.Int32,System.Int32)">
            <summary>
            获取指定行列索引的矩阵元素
            </summary>
            <param name="i">行索引</param>
            <param name="j">列索引</param>
            <returns>指定的矩阵元素</returns>
        </member>
        <member name="P:OpenGL.MAT2x4`1.Item(System.Int32)">
            <summary>
            获取指定列，返回列向量
            </summary>
            <param name="i">列索引</param>
            <returns>列向量</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.#ctor">
            <summary>
            默认方式初始化矩阵，所有矩阵元素设为0
            </summary>
        </member>
        <member name="M:OpenGL.MAT2x4`1.#ctor(OpenGL.MAT2x4{`0})">
            <summary>
            用矩阵初始化矩阵
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT2x4`1.#ctor(OpenGL.VEC2{`0},OpenGL.VEC2{`0},OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            用列向量初始化矩阵
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
            <param name="col2">第2列向量</param>
            <param name="col3">第3列向量</param>
        </member>
        <member name="M:OpenGL.MAT2x4`1.#ctor(`0[0:,0:])">
            <summary>
            用二维数组初始化向量
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT2x4`1.#ctor(`0[])">
            <summary>
            用一维数组初始化向量
            </summary>
            <param name="array">一维数组，元素按列排放</param>
        </member>
        <member name="M:OpenGL.MAT2x4`1.GetRowToArray``1(System.Int32)">
            <summary>
            获取一行矩阵元素，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.GetRowToVEC4``1(System.Int32)">
            <summary>
            获取指定行，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.GetColumnToArray``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.GetColumnToVEC2``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.ToArray1D``1">
            <summary>
            矩阵转换为指定类型的一维数组
            </summary>
            <typeparam name="TOutput">数组类型</typeparam>
            <returns>指定类型的一维数组</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.ToArray2D``1">
            <summary>
            矩阵转换为指定类型的二维数组
            </summary>
            <typeparam name="TOutput">数组的类型</typeparam>
            <returns>指定类型的二维数组</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.ToMAT2x4``1">
            <summary>
            矩阵转换为指定类型的矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.SetElements(OpenGL.VEC2{`0},OpenGL.VEC2{`0},OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            用列向量来设置数组元素
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
            <param name="col2">第2列向量</param>
            <param name="col3">第3列向量</param>
        </member>
        <member name="M:OpenGL.MAT2x4`1.SetElements(OpenGL.MAT2x4{`0})">
            <summary>
            用矩阵设置矩阵元素
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT2x4`1.SetElements(`0[])">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">矩阵元素按列排放的一维数组</param>
        </member>
        <member name="M:OpenGL.MAT2x4`1.SetElements(`0[0:,0:])">
            <summary>
            用二维数组初设置矩阵元素
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT2x4`1.SetRow(OpenGL.VEC4{`0},System.Int32)">
            <summary>
            用向量设置矩阵的一行元素
            </summary>
            <param name="vec">向量</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT2x4`1.SetRow(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵的一行
            </summary>
            <param name="array">一维数组</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT2x4`1.SetColumn(OpenGL.VEC2{`0},System.Int32)">
            <summary>
            用向量设置矩阵一列
            </summary>
            <param name="vec">列向量</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT2x4`1.SetColumn(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">一维数组</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT2x4`1.SetElemsToZeros">
            <summary>
            将矩阵元素全部置零
            </summary>
        </member>
        <member name="M:OpenGL.MAT2x4`1.SetElemsToOnes">
            <summary>
            将矩阵元素全部置一
            </summary>
        </member>
        <member name="M:OpenGL.MAT2x4`1.Transpose">
            <summary>
            获取矩阵的转置矩阵
            </summary>
            <returns>转置矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Addition(OpenGL.MAT2x4{`0},OpenGL.MAT2x4{`0})">
            <summary>
            矩阵相加
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>返回矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Addition(`0,OpenGL.MAT2x4{`0})">
            <summary>
            一个数与矩阵相加。一个数分别与矩阵元素相加
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Addition(OpenGL.MAT2x4{`0},`0)">
            <summary>
            一个矩阵与一个数相加
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Subtraction(OpenGL.MAT2x4{`0},OpenGL.MAT2x4{`0})">
            <summary>
            两个矩阵相减
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Subtraction(`0,OpenGL.MAT2x4{`0})">
            <summary>
            一个数与矩阵相减。一个数分别减去矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Subtraction(OpenGL.MAT2x4{`0},`0)">
            <summary>
            一个矩阵与一个数相减。矩阵元素分别与数相减
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Multiply(OpenGL.MAT2x4{`0},OpenGL.MAT4x2{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Multiply(OpenGL.MAT2x4{`0},OpenGL.MAT4x3{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Multiply(OpenGL.MAT2x4{`0},OpenGL.MAT4{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Multiply(`0,OpenGL.MAT2x4{`0})">
            <summary>
            一个数与矩阵相乘。一个数分别乘以各矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Multiply(OpenGL.MAT2x4{`0},`0)">
            <summary>
            矩阵乘以一个数。矩阵元素分别乘以一个数
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.Multi(OpenGL.MAT2x4{`0})">
            <summary>
            矩阵对应的元素分别相乘
            </summary>
            <param name="m">乘矩阵</param>
            <returns>返回的矩阵行数和列数与原矩阵相同</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Division(OpenGL.MAT2x4{`0},`0)">
            <summary>
            矩阵除以一个数。矩阵元素分别除以一个数
            </summary>
            <param name="matrix">矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Division(OpenGL.MAT2x4{`0},OpenGL.MAT2x4{`0})">
            <summary>
            矩阵除以矩阵。矩阵相应的元素相除
            </summary>
            <param name="mat1">被除矩阵</param>
            <param name="mat2">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Division(`0,OpenGL.MAT2x4{`0})">
            <summary>
            一个数除以矩阵。一个数分别除以矩阵元素
            </summary>
            <param name="num">被除数</param>
            <param name="matrix">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_ExclusiveOr(`0,OpenGL.MAT2x4{`0})">
            <summary>
            一个数对矩阵求幂。一个分别对矩阵元素求幂
            </summary>
            <param name="num">底数</param>
            <param name="matrix">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_ExclusiveOr(OpenGL.MAT2x4{`0},`0)">
            <summary>
            一个矩阵对一个数求幂。矩阵元素分别对一个数求幂
            </summary>
            <param name="matrix">底数矩阵</param>
            <param name="num">指数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_ExclusiveOr(OpenGL.MAT2x4{`0},OpenGL.MAT2x4{`0})">
            <summary>
            矩阵对矩阵球求幂。矩阵对应元素分别求幂
            </summary>
            <param name="mat1">底数矩阵</param>
            <param name="mat2">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_UnaryNegation(OpenGL.MAT2x4{`0})">
            <summary>
            矩阵取负
            </summary>
            <param name="matrix">矩阵</param>
            <returns>返回负矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Equality(OpenGL.MAT2x4{`0},OpenGL.MAT2x4{`0})">
            <summary>
            判断矩阵是否相等。各对应元素相等，则视为相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果相等，则返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.MAT2x4`1.op_Inequality(OpenGL.MAT2x4{`0},OpenGL.MAT2x4{`0})">
            <summary>
            判断两个矩阵是否不相等.存在一个对应元素不相等，则视为不相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果不等，返回true,否则返回码false</returns>
        </member>
        <member name="P:OpenGL.MAT2x3`1.Rows">
            <summary>
            矩阵的行数
            </summary>
        </member>
        <member name="P:OpenGL.MAT2x3`1.Columns">
            <summary>
            矩阵的列数
            </summary>
        </member>
        <member name="P:OpenGL.MAT2x3`1.Item(System.Int32,System.Int32)">
            <summary>
            获取指定行列索引的矩阵元素
            </summary>
            <param name="i">行索引</param>
            <param name="j">列索引</param>
            <returns>指定的矩阵元素</returns>
        </member>
        <member name="P:OpenGL.MAT2x3`1.Item(System.Int32)">
            <summary>
            获取指定列，返回列向量
            </summary>
            <param name="i">列索引</param>
            <returns>列向量</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.#ctor">
            <summary>
            默认方式初始化矩阵，所有矩阵元素设为0
            </summary>
        </member>
        <member name="M:OpenGL.MAT2x3`1.#ctor(OpenGL.MAT2x3{`0})">
            <summary>
            用矩阵初始化矩阵
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT2x3`1.#ctor(OpenGL.VEC2{`0},OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            用列向量初始化矩阵
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
            <param name="col2">第2列向量</param>
        </member>
        <member name="M:OpenGL.MAT2x3`1.#ctor(`0[0:,0:])">
            <summary>
            用二维数组初始化向量
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT2x3`1.#ctor(`0[])">
            <summary>
            用一维数组初始化向量
            </summary>
            <param name="array">一维数组，元素按列排放</param>
        </member>
        <member name="M:OpenGL.MAT2x3`1.GetRowToArray``1(System.Int32)">
            <summary>
            获取一行矩阵元素，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.GetRowToVEC3``1(System.Int32)">
            <summary>
            获取指定行，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.GetColumnToArray``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.GetColumnToVEC2``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.ToArray1D``1">
            <summary>
            矩阵转换为指定类型的一维数组
            </summary>
            <typeparam name="TOutput">数组类型</typeparam>
            <returns>指定类型的一维数组</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.ToArray2D``1">
            <summary>
            矩阵转换为指定类型的二维数组
            </summary>
            <typeparam name="TOutput">数组的类型</typeparam>
            <returns>指定类型的二维数组</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.ToMAT2x3``1">
            <summary>
            矩阵转换为指定类型的矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.SetElements(OpenGL.VEC2{`0},OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            用列向量来设置数组元素
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
            <param name="col2">第2列向量</param>
        </member>
        <member name="M:OpenGL.MAT2x3`1.SetElements(OpenGL.MAT2x3{`0})">
            <summary>
            用矩阵设置矩阵元素
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT2x3`1.SetElements(`0[])">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">矩阵元素按列排放的一维数组</param>
        </member>
        <member name="M:OpenGL.MAT2x3`1.SetElements(`0[0:,0:])">
            <summary>
            用二维数组初设置矩阵元素
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT2x3`1.SetRow(OpenGL.VEC3{`0},System.Int32)">
            <summary>
            用向量设置矩阵的一行元素
            </summary>
            <param name="vec">向量</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT2x3`1.SetRow(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵的一行
            </summary>
            <param name="array">一维数组</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT2x3`1.SetColumn(OpenGL.VEC2{`0},System.Int32)">
            <summary>
            用向量设置矩阵一列
            </summary>
            <param name="vec">列向量</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT2x3`1.SetColumn(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">一维数组</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT2x3`1.SetElemsToZeros">
            <summary>
            将矩阵元素全部置零
            </summary>
        </member>
        <member name="M:OpenGL.MAT2x3`1.SetElemsToOnes">
            <summary>
            将矩阵元素全部置一
            </summary>
        </member>
        <member name="M:OpenGL.MAT2x3`1.Transpose">
            <summary>
            获取矩阵的转置矩阵
            </summary>
            <returns>转置矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Addition(OpenGL.MAT2x3{`0},OpenGL.MAT2x3{`0})">
            <summary>
            矩阵相加
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>返回矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Addition(`0,OpenGL.MAT2x3{`0})">
            <summary>
            一个数与矩阵相加。一个数分别与矩阵元素相加
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Addition(OpenGL.MAT2x3{`0},`0)">
            <summary>
            一个矩阵与一个数相加
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Subtraction(OpenGL.MAT2x3{`0},OpenGL.MAT2x3{`0})">
            <summary>
            两个矩阵相减
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Subtraction(`0,OpenGL.MAT2x3{`0})">
            <summary>
            一个数与矩阵相减。一个数分别减去矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Subtraction(OpenGL.MAT2x3{`0},`0)">
            <summary>
            一个矩阵与一个数相减。矩阵元素分别与数相减
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Multiply(OpenGL.MAT2x3{`0},OpenGL.MAT3x2{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Multiply(OpenGL.MAT2x3{`0},OpenGL.MAT3{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Multiply(OpenGL.MAT2x3{`0},OpenGL.MAT3x4{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Multiply(`0,OpenGL.MAT2x3{`0})">
            <summary>
            一个数与矩阵相乘。一个数分别乘以各矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Multiply(OpenGL.MAT2x3{`0},`0)">
            <summary>
            矩阵乘以一个数。矩阵元素分别乘以一个数
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.Multi(OpenGL.MAT2x3{`0})">
            <summary>
            矩阵对应的元素分别相乘
            </summary>
            <param name="m">乘矩阵</param>
            <returns>返回的矩阵行数和列数与原矩阵相同</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Division(OpenGL.MAT2x3{`0},`0)">
            <summary>
            矩阵除以一个数。矩阵元素分别除以一个数
            </summary>
            <param name="matrix">矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Division(OpenGL.MAT2x3{`0},OpenGL.MAT2x3{`0})">
            <summary>
            矩阵除以矩阵。矩阵相应的元素相除
            </summary>
            <param name="mat1">被除矩阵</param>
            <param name="mat2">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Division(`0,OpenGL.MAT2x3{`0})">
            <summary>
            一个数除以矩阵。一个数分别除以矩阵元素
            </summary>
            <param name="num">被除数</param>
            <param name="matrix">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_ExclusiveOr(`0,OpenGL.MAT2x3{`0})">
            <summary>
            一个数对矩阵求幂。一个分别对矩阵元素求幂
            </summary>
            <param name="num">底数</param>
            <param name="matrix">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_ExclusiveOr(OpenGL.MAT2x3{`0},`0)">
            <summary>
            一个矩阵对一个数求幂。矩阵元素分别对一个数求幂
            </summary>
            <param name="matrix">底数矩阵</param>
            <param name="num">指数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_ExclusiveOr(OpenGL.MAT2x3{`0},OpenGL.MAT2x3{`0})">
            <summary>
            矩阵对矩阵球求幂。矩阵对应元素分别求幂
            </summary>
            <param name="mat1">底数矩阵</param>
            <param name="mat2">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_UnaryNegation(OpenGL.MAT2x3{`0})">
            <summary>
            矩阵取负
            </summary>
            <param name="matrix">矩阵</param>
            <returns>返回负矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Equality(OpenGL.MAT2x3{`0},OpenGL.MAT2x3{`0})">
            <summary>
            判断矩阵是否相等。各对应元素相等，则视为相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果相等，则返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.MAT2x3`1.op_Inequality(OpenGL.MAT2x3{`0},OpenGL.MAT2x3{`0})">
            <summary>
            判断两个矩阵是否不相等.存在一个对应元素不相等，则视为不相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果不等，返回true,否则返回码false</returns>
        </member>
        <member name="M:OpenGL.Cube.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            生成立方体
            </summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="depth">深度</param>
        </member>
        <member name="M:OpenGL.Cylinder.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            生成圆柱形
            </summary>
            <param name="halfExtend">半高度</param>
            <param name="radius">半径</param>
            <param name="numberSlices">面片数量</param>
        </member>
        <member name="M:OpenGL.Disk.#ctor(System.Single,System.Int32)">
            <summary>
            生成圆盘形
            </summary>
            <param name="radius">半径</param>
            <param name="numberSectors">扇区数量</param>
        </member>
        <member name="M:OpenGL.Dome.#ctor(System.Single,System.Int32)">
            <summary>
            生成圆顶状物体
            </summary>
            <param name="radius">半径</param>
            <param name="numberSlices">面片数量</param>
        </member>
        <member name="M:OpenGL.Plane.#ctor(System.Single,System.Single)">
            <summary>
            生成平面
            </summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
        </member>
        <member name="P:OpenGL.Shader.shaderID">
            <summary>
            着色器识别号（编号）,如果创建成功，则是一个非零的值
            </summary>
        </member>
        <member name="M:OpenGL.Shader.#ctor(System.UInt32)">
            <summary>
            仅创建一个空的着色器对象。
            </summary>
            <param name="shaderType">着色器类型，只能是顶点着色器（GLCONST.GL_VERTEX_SHADER）、片元着色器（GLCONST.GL_FRAGMENT_SHADER）和几何着色器（GLCONST.GL_GEOMETRY_SHADER）</param>
        </member>
        <member name="M:OpenGL.Shader.#ctor(System.UInt32,System.String[])">
            <summary>
            创建一个非空的着色器对象
            </summary>
            <param name="shaderType">着色器类型，只能是顶点着色器（GLCONST.GL_VERTEX_SHADER）、片元着色器（GLCONST.GL_FRAGMENT_SHADER）和几何着色器（GLCONST.GL_GEOMETRY_SHADER）</param>
            <param name="source">包含着色器源代码的字符串数组</param>
        </member>
        <member name="M:OpenGL.Shader.#ctor(System.UInt32,System.String)">
            <summary>
             创建一个非空的着色器对象
            </summary>
            <param name="shaderType">着色器类型，只能是顶点着色器（GLCONST.GL_VERTEX_SHADER）、片元着色器（GLCONST.GL_FRAGMENT_SHADER）和几何着色器（GLCONST.GL_GEOMETRY_SHADER）</param>
            <param name="filename">着色器代码源文件</param>
        </member>
        <member name="M:OpenGL.Shader.GenerateShaderCode(System.String)">
            <summary>
            生成（编译）着色器代码
            </summary>
            <param name="fileNmae">着色器源文件</param>
        </member>
        <member name="M:OpenGL.Shader.GenerateShaderCode(System.String[])">
            <summary>
            生成（编译）着色器代码
            </summary>
            <param name="source">>包含着色器源代码的字符串数组</param>
        </member>
        <member name="M:OpenGL.Shader.GetShaderCompileInfo(System.Int32)">
            <summary>
            获取着色器编译信息
            </summary>
            <param name="infoLenght">指定信息字符串的长度</param>
            <returns>如果编译失败，则返回色器编译失败的信息</returns>
        </member>
        <member name="M:OpenGL.Shader.IsPassCompile">
            <summary>
            判断该着色器是否编译成功
            </summary>
            <returns>如果成功，则返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.Shader.DeleteShader">
            <summary>
            删除着色器
            </summary>
        </member>
        <member name="P:OpenGL.ShaderProgram.ProgramHandle">
            <summary>
            着色器程序对象句柄（编号）
            </summary>
        </member>
        <member name="M:OpenGL.ShaderProgram.#ctor">
            <summary>
            仅创建一个空的着色器程序对象
            </summary>
        </member>
        <member name="M:OpenGL.ShaderProgram.#ctor(OpenGL.Shader)">
            <summary>
            创建一个着色器程序对象，该程序对象只包含顶点着色器
            </summary>
            <param name="vertexShader">顶点着色器</param>
        </member>
        <member name="M:OpenGL.ShaderProgram.#ctor(OpenGL.Shader,OpenGL.Shader)">
            <summary>
            创建一个着色器程序对象，该程序对象包含顶点着色器和片元着色器
            </summary>
            <param name="vertexShader">顶点着色器</param>
            <param name="fragmentShader">片元着色器</param>
        </member>
        <member name="M:OpenGL.ShaderProgram.#ctor(OpenGL.Shader,OpenGL.Shader,OpenGL.Shader)">
            <summary>
            创建一个着色器程序对象，该程序对象包含顶点着色器、片元着色器和几何着色器
            </summary>
            <param name="vertexShader">顶点着色器</param>
            <param name="fragmentShader">片元着色器</param>
            <param name="geometryShader">几何着色器</param>
        </member>
        <member name="M:OpenGL.ShaderProgram.IsPassLink">
            <summary>
            着色器程序连接是否成功
            </summary>
            <returns>连接成功则返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.ShaderProgram.GetLinkInfo(System.Int32)">
            <summary>
            获取着色器程序连接信息
            </summary>
            <param name="InfoLenght">指定返回的信息字符串长度</param>
            <returns>如果连接失败，则返回连接失败的信息</returns>
        </member>
        <member name="M:OpenGL.ShaderProgram.UseProgram">
            <summary>
            在当前渲染阶段使用本着色器程序
            </summary>
        </member>
        <member name="M:OpenGL.ShaderProgram.GenerateProgram(OpenGL.Shader)">
            <summary>
            生成一个只包含顶点着色器的程序
            </summary>
            <param name="vertexShader">顶点着色器</param>
        </member>
        <member name="M:OpenGL.ShaderProgram.GenerateProgram(OpenGL.Shader,OpenGL.Shader)">
            <summary>
            生成一个包含了顶点着色器、片元着色器的程序
            </summary>
            <param name="vertexShader">顶点着色器</param>
            <param name="fragmentShader">片元着色器</param>
        </member>
        <member name="M:OpenGL.ShaderProgram.GenerateProgram(OpenGL.Shader,OpenGL.Shader,OpenGL.Shader)">
            <summary>
            生成一个包含了顶点着色器、片元着色器和几何着色器的程序
            </summary>
            <param name="vertexShader">顶点着色器</param>
            <param name="fragmentShader">片元着色器</param>
            <param name="geometryShader">几何着色器</param>
        </member>
        <member name="P:OpenGL.Geometry.NumberOfVertices">
            <summary>
            顶点的数目
            </summary>
        </member>
        <member name="P:OpenGL.Geometry.NumberOfIndices">
            <summary>
            顶点索引的数目
            </summary>
        </member>
        <member name="P:OpenGL.Geometry.NumberOfTangents">
            <summary>
            切线的数目
            </summary>
        </member>
        <member name="P:OpenGL.Geometry.NumberOfNormals">
            <summary>
            法线的数目
            </summary>
        </member>
        <member name="P:OpenGL.Geometry.NumberOfBitangents">
            <summary>
            二次切线的数目
            </summary>
        </member>
        <member name="P:OpenGL.Geometry.NumberOfTexCoords">
            <summary>
            纹理坐标的数目
            </summary>
        </member>
        <member name="P:OpenGL.Geometry.vertices">
            <summary>
            顶点数组
            </summary>
        </member>
        <member name="P:OpenGL.Geometry.normals">
            <summary>
            法线数组
            </summary>
        </member>
        <member name="P:OpenGL.Geometry.texCoords">
            <summary>
            纹理坐标数组
            </summary>
        </member>
        <member name="P:OpenGL.Geometry.indices">
            <summary>
            顶点索引数组
            </summary>
        </member>
        <member name="P:OpenGL.Geometry.tangents">
            <summary>
            切线数组
            </summary>
        </member>
        <member name="P:OpenGL.Geometry.bitangents">
            <summary>
            二次切线数组
            </summary>
        </member>
        <member name="M:OpenGL.Geometry.Draw">
            <summary>
            绘制图形
            </summary>
        </member>
        <member name="M:OpenGL.Sphere.#ctor(System.Single,System.Int32)">
            <summary>
            生成球体
            </summary>
            <param name="radius">半径</param>
            <param name="numSlices">面片数目</param>
        </member>
        <member name="P:OpenGL.STL.vertices">
            <summary>
            顶点数组
            </summary>
        </member>
        <member name="P:OpenGL.STL.normals">
            <summary>
            法线数组
            </summary>
        </member>
        <member name="P:OpenGL.STL.NumberOfVertics">
            <summary>
            顶点数目
            </summary>
        </member>
        <member name="P:OpenGL.STL.NumberOfNormal">
            <summary>
            法线数目
            </summary>
        </member>
        <member name="P:OpenGL.STL.NumberOfTriangles">
            <summary>
            三角面数目
            </summary>
        </member>
        <member name="M:OpenGL.STL.#ctor(System.String)">
            <summary>
            加载STL文件的数据
            </summary>
            <param name="fileName">文件名称</param>
        </member>
        <member name="M:OpenGL.STL.LoadSTL(System.String)">
            <summary>
            载入STL文件
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.Torus.#ctor(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            生成圆环体
            </summary>
            <param name="innerRadius">内径</param>
            <param name="outerRadius">外径</param>
            <param name="numberSlices">面片数目</param>
            <param name="numberStacks">层数</param>
        </member>
        <member name="P:OpenGL.MAT2`1.Rows">
            <summary>
            矩阵的行数
            </summary>
        </member>
        <member name="P:OpenGL.MAT2`1.Columns">
            <summary>
            矩阵的列数
            </summary>
        </member>
        <member name="P:OpenGL.MAT2`1.Item(System.Int32,System.Int32)">
            <summary>
            获取指定行列索引的矩阵元素
            </summary>
            <param name="i">行索引</param>
            <param name="j">列索引</param>
            <returns>指定的矩阵元素</returns>
        </member>
        <member name="P:OpenGL.MAT2`1.Item(System.Int32)">
            <summary>
            获取指定列，返回列向量
            </summary>
            <param name="i">列索引</param>
            <returns>列向量</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.#ctor">
            <summary>
            默认方式初始化矩阵，所有矩阵元素设为0
            </summary>
        </member>
        <member name="M:OpenGL.MAT2`1.#ctor(OpenGL.MAT2{`0})">
            <summary>
            用矩阵初始化矩阵
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT2`1.#ctor(OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            用列向量初始化矩阵
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
        </member>
        <member name="M:OpenGL.MAT2`1.#ctor(`0[0:,0:])">
            <summary>
            用二维数组初始化向量
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT2`1.#ctor(`0[])">
            <summary>
            用一维数组初始化向量
            </summary>
            <param name="array">一维数组，元素按列排放</param>
        </member>
        <member name="M:OpenGL.MAT2`1.GetRowToArray``1(System.Int32)">
            <summary>
            获取一行矩阵元素，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.GetRowToVEC2``1(System.Int32)">
            <summary>
            获取指定行，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.GetColumnToArray``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.GetColumnToVEC2``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.ToArray1D``1">
            <summary>
            矩阵转换为指定类型的一维数组
            </summary>
            <typeparam name="TOutput">数组类型</typeparam>
            <returns>指定类型的一维数组</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.ToArray2D``1">
            <summary>
            矩阵转换为指定类型的二维数组
            </summary>
            <typeparam name="TOutput">数组的类型</typeparam>
            <returns>指定类型的二维数组</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.ToMAT2``1">
            <summary>
            矩阵转换为指定类型的矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.ToMAT3``1">
            <summary>
            2x2矩阵扩展为指定类型的3x3矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的3x3矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.ToMAT4``1">
            <summary>
            2x2矩阵扩展为指定类型的4x4矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的4x4矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.SetElements(OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            用列向量来设置数组元素
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
        </member>
        <member name="M:OpenGL.MAT2`1.SetElements(OpenGL.MAT2{`0})">
            <summary>
            用矩阵设置矩阵元素
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT2`1.SetElements(`0[])">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">矩阵元素按列排放的一维数组</param>
        </member>
        <member name="M:OpenGL.MAT2`1.SetElements(`0[0:,0:])">
            <summary>
            用二维数组初设置矩阵元素
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT2`1.SetRow(OpenGL.VEC2{`0},System.Int32)">
            <summary>
            用向量设置矩阵的一行元素
            </summary>
            <param name="vec">向量</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT2`1.SetRow(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵的一行
            </summary>
            <param name="array">一维数组</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT2`1.SetColumn(OpenGL.VEC2{`0},System.Int32)">
            <summary>
            用向量设置矩阵一列
            </summary>
            <param name="vec">列向量</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT2`1.SetColumn(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">一维数组</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT2`1.SetElemsToZeros">
            <summary>
            将矩阵元素全部置零
            </summary>
        </member>
        <member name="M:OpenGL.MAT2`1.SetElemsToOnes">
            <summary>
            将矩阵元素全部置一
            </summary>
        </member>
        <member name="M:OpenGL.MAT2`1.LoadIdentity">
            <summary>
            将矩阵设为单位矩阵
            </summary>
        </member>
        <member name="M:OpenGL.MAT2`1.Det">
            <summary>
            计算矩阵行列式的值
            </summary>
            <returns>矩阵行列式的值</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.Inverse">
            <summary>
            获取矩阵的逆矩阵
            </summary>
            <returns>如果存在逆矩阵，则返回逆矩阵，否则返回null</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.Transpose">
            <summary>
            获取矩阵的转置矩阵
            </summary>
            <returns>转置矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Addition(OpenGL.MAT2{`0},OpenGL.MAT2{`0})">
            <summary>
            矩阵相加
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>返回矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Addition(`0,OpenGL.MAT2{`0})">
            <summary>
            一个数与矩阵相加。一个数分别与矩阵元素相加
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Addition(OpenGL.MAT2{`0},`0)">
            <summary>
            一个矩阵与一个数相加
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Subtraction(OpenGL.MAT2{`0},OpenGL.MAT2{`0})">
            <summary>
            两个矩阵相减
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Subtraction(`0,OpenGL.MAT2{`0})">
            <summary>
            一个数与矩阵相减。一个数分别减去矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Subtraction(OpenGL.MAT2{`0},`0)">
            <summary>
            一个矩阵与一个数相减。矩阵元素分别与数相减
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Multiply(OpenGL.MAT2{`0},OpenGL.MAT2{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.Multi(OpenGL.MAT2{`0})">
            <summary>
            矩阵对应的元素分别相乘
            </summary>
            <param name="m">乘矩阵</param>
            <returns>返回的矩阵行数和列数与原矩阵相同</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Multiply(`0,OpenGL.MAT2{`0})">
            <summary>
            一个数与矩阵相乘。一个数分别乘以各矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Multiply(OpenGL.MAT2{`0},`0)">
            <summary>
            矩阵乘以一个数。矩阵元素分别乘以一个数
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Division(OpenGL.MAT2{`0},`0)">
            <summary>
            矩阵除以一个数。矩阵元素分别除以一个数
            </summary>
            <param name="matrix">矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Division(OpenGL.MAT2{`0},OpenGL.MAT2{`0})">
            <summary>
            矩阵除以矩阵。矩阵相应的元素相除
            </summary>
            <param name="mat1">被除矩阵</param>
            <param name="mat2">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Division(`0,OpenGL.MAT2{`0})">
            <summary>
            一个数除以矩阵。一个数分别除以矩阵元素
            </summary>
            <param name="num">被除数</param>
            <param name="matrix">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_ExclusiveOr(`0,OpenGL.MAT2{`0})">
            <summary>
            一个数对矩阵求幂。一个分别对矩阵元素求幂
            </summary>
            <param name="num">底数</param>
            <param name="matrix">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_ExclusiveOr(OpenGL.MAT2{`0},`0)">
            <summary>
            一个矩阵对一个数求幂。矩阵元素分别对一个数求幂
            </summary>
            <param name="matrix">底数矩阵</param>
            <param name="num">指数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_ExclusiveOr(OpenGL.MAT2{`0},OpenGL.MAT2{`0})">
            <summary>
            矩阵对矩阵球求幂。矩阵对应元素分别求幂
            </summary>
            <param name="mat1">底数矩阵</param>
            <param name="mat2">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_UnaryNegation(OpenGL.MAT2{`0})">
            <summary>
            矩阵取负
            </summary>
            <param name="matrix">矩阵</param>
            <returns>返回负矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Multiply(OpenGL.MAT2{`0},OpenGL.VEC2{`0})">
            <summary>
            矩阵乘以向量
            </summary>
            <param name="matrix">左矩阵</param>
            <param name="vector">右向量</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Equality(OpenGL.MAT2{`0},OpenGL.MAT2{`0})">
            <summary>
            判断矩阵是否相等。各对应元素相等，则视为相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果相等，则返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.MAT2`1.op_Inequality(OpenGL.MAT2{`0},OpenGL.MAT2{`0})">
            <summary>
            判断两个矩阵是否不相等.存在一个对应元素不相等，则视为不相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果不等，返回true,否则返回码false</returns>
        </member>
        <member name="P:OpenGL.MAT3`1.Rows">
            <summary>
            矩阵的行数
            </summary>
        </member>
        <member name="P:OpenGL.MAT3`1.Columns">
            <summary>
            矩阵的列数
            </summary>
        </member>
        <member name="P:OpenGL.MAT3`1.Item(System.Int32,System.Int32)">
            <summary>
            获取指定行列索引的矩阵元素
            </summary>
            <param name="i">行索引</param>
            <param name="j">列索引</param>
            <returns>指定的矩阵元素</returns>
        </member>
        <member name="P:OpenGL.MAT3`1.Item(System.Int32)">
            <summary>
            获取指定列，返回列向量
            </summary>
            <param name="i">列索引</param>
            <returns>列向量</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.#ctor">
            <summary>
            默认方式初始化矩阵，所有矩阵元素设为0
            </summary>
        </member>
        <member name="M:OpenGL.MAT3`1.#ctor(OpenGL.MAT3{`0})">
            <summary>
            用矩阵初始化矩阵
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT3`1.#ctor(OpenGL.VEC3{`0},OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            用列向量初始化矩阵
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
            <param name="col2">第2列向量</param>
        </member>
        <member name="M:OpenGL.MAT3`1.#ctor(`0[0:,0:])">
            <summary>
            用二维数组初始化向量
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT3`1.#ctor(`0[])">
            <summary>
            用一维数组初始化向量
            </summary>
            <param name="array">一维数组，元素按列排放</param>
        </member>
        <member name="M:OpenGL.MAT3`1.GetRowToArray``1(System.Int32)">
            <summary>
            获取一行矩阵元素，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.GetRowToVEC3``1(System.Int32)">
            <summary>
            获取指定行，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.GetColumnToArray``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.GetColumnToVEC3``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.ToArray1D``1">
            <summary>
            矩阵转换为指定类型的一维数组
            </summary>
            <typeparam name="TOutput">数组类型</typeparam>
            <returns>指定类型的一维数组</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.ToArray2D``1">
            <summary>
            矩阵转换为指定类型的二维数组
            </summary>
            <typeparam name="TOutput">数组的类型</typeparam>
            <returns>指定类型的二维数组</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.ToMAT2``1">
            <summary>
            3x3矩阵收缩为指定类型的2x2矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的2x2矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.ToMAT3``1">
            <summary>
            矩阵转换为指定类型的矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.ToMAT4``1">
            <summary>
            3x3矩阵扩展为指定类型的4x4矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的4x4矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.SetElements(OpenGL.VEC3{`0},OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            用列向量来设置数组元素
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
            <param name="col2">第2列向量</param>
        </member>
        <member name="M:OpenGL.MAT3`1.SetElements(OpenGL.MAT3{`0})">
            <summary>
            用矩阵设置矩阵元素
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT3`1.SetElements(`0[])">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">矩阵元素按列排放的一维数组</param>
        </member>
        <member name="M:OpenGL.MAT3`1.SetElements(`0[0:,0:])">
            <summary>
            用二维数组初设置矩阵元素
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT3`1.SetRow(OpenGL.VEC3{`0},System.Int32)">
            <summary>
            用向量设置矩阵的一行元素
            </summary>
            <param name="vec">向量</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT3`1.SetRow(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵的一行
            </summary>
            <param name="array">一维数组</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT3`1.SetColumn(OpenGL.VEC3{`0},System.Int32)">
            <summary>
            用向量设置矩阵一列
            </summary>
            <param name="vec">列向量</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT3`1.SetColumn(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">一维数组</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT3`1.SetElemsToZeros">
            <summary>
            将矩阵元素全部置零
            </summary>
        </member>
        <member name="M:OpenGL.MAT3`1.SetElemsToOnes">
            <summary>
            将矩阵元素全部置一
            </summary>
        </member>
        <member name="M:OpenGL.MAT3`1.LoadIdentity">
            <summary>
            将矩阵设为单位矩阵
            </summary>
        </member>
        <member name="M:OpenGL.MAT3`1.Det">
            <summary>
            计算矩阵行列式的值
            </summary>
            <returns>矩阵行列式的值</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.Inverse">
            <summary>
            获取矩阵的逆矩阵
            </summary>
            <returns>如果存在逆矩阵，则返回逆矩阵，否则返回null</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.Transpose">
            <summary>
            获取矩阵的转置矩阵
            </summary>
            <returns>转置矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Addition(OpenGL.MAT3{`0},OpenGL.MAT3{`0})">
            <summary>
            矩阵相加
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>返回矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Addition(`0,OpenGL.MAT3{`0})">
            <summary>
            一个数与矩阵相加。一个数分别与矩阵元素相加
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Addition(OpenGL.MAT3{`0},`0)">
            <summary>
            一个矩阵与一个数相加
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Subtraction(OpenGL.MAT3{`0},OpenGL.MAT3{`0})">
            <summary>
            两个矩阵相减
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Subtraction(`0,OpenGL.MAT3{`0})">
            <summary>
            一个数与矩阵相减。一个数分别减去矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Subtraction(OpenGL.MAT3{`0},`0)">
            <summary>
            一个矩阵与一个数相减。矩阵元素分别与数相减
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Multiply(OpenGL.MAT3{`0},OpenGL.MAT3{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.Multi(OpenGL.MAT3{`0})">
            <summary>
            矩阵对应的元素分别相乘
            </summary>
            <param name="m">乘矩阵</param>
            <returns>返回的矩阵行数和列数与原矩阵相同</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Multiply(`0,OpenGL.MAT3{`0})">
            <summary>
            一个数与矩阵相乘。一个数分别乘以各矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Multiply(OpenGL.MAT3{`0},`0)">
            <summary>
            矩阵乘以一个数。矩阵元素分别乘以一个数
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Division(OpenGL.MAT3{`0},`0)">
            <summary>
            矩阵除以一个数。矩阵元素分别除以一个数
            </summary>
            <param name="matrix">矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Division(OpenGL.MAT3{`0},OpenGL.MAT3{`0})">
            <summary>
            矩阵除以矩阵。矩阵相应的元素相除
            </summary>
            <param name="mat1">被除矩阵</param>
            <param name="mat2">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Division(`0,OpenGL.MAT3{`0})">
            <summary>
            一个数除以矩阵。一个数分别除以矩阵元素
            </summary>
            <param name="num">被除数</param>
            <param name="matrix">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_ExclusiveOr(`0,OpenGL.MAT3{`0})">
            <summary>
            一个数对矩阵求幂。一个分别对矩阵元素求幂
            </summary>
            <param name="num">底数</param>
            <param name="matrix">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_ExclusiveOr(OpenGL.MAT3{`0},`0)">
            <summary>
            一个矩阵对一个数求幂。矩阵元素分别对一个数求幂
            </summary>
            <param name="matrix">底数矩阵</param>
            <param name="num">指数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_ExclusiveOr(OpenGL.MAT3{`0},OpenGL.MAT3{`0})">
            <summary>
            矩阵对矩阵球求幂。矩阵对应元素分别求幂
            </summary>
            <param name="mat1">底数矩阵</param>
            <param name="mat2">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_UnaryNegation(OpenGL.MAT3{`0})">
            <summary>
            矩阵取负
            </summary>
            <param name="matrix">矩阵</param>
            <returns>返回负矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Multiply(OpenGL.MAT3{`0},OpenGL.VEC3{`0})">
            <summary>
            矩阵乘以向量
            </summary>
            <param name="matrix">左矩阵</param>
            <param name="vector">右向量</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Equality(OpenGL.MAT3{`0},OpenGL.MAT3{`0})">
            <summary>
            判断矩阵是否相等。各对应元素相等，则视为相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果相等，则返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.MAT3`1.op_Inequality(OpenGL.MAT3{`0},OpenGL.MAT3{`0})">
            <summary>
            判断两个矩阵是否不相等.存在一个对应元素不相等，则视为不相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果不等，返回true,否则返回码false</returns>
        </member>
        <member name="P:OpenGL.MAT4`1.Rows">
            <summary>
            矩阵的行数
            </summary>
        </member>
        <member name="P:OpenGL.MAT4`1.Columns">
            <summary>
            矩阵的列数
            </summary>
        </member>
        <member name="P:OpenGL.MAT4`1.Item(System.Int32,System.Int32)">
            <summary>
            获取指定行列索引的矩阵元素
            </summary>
            <param name="i">行索引</param>
            <param name="j">列索引</param>
            <returns>指定的矩阵元素</returns>
        </member>
        <member name="P:OpenGL.MAT4`1.Item(System.Int32)">
            <summary>
            获取指定列，返回列向量
            </summary>
            <param name="i">列索引</param>
            <returns>列向量</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.#ctor">
            <summary>
            默认方式初始化矩阵，所有矩阵元素设为0
            </summary>
        </member>
        <member name="M:OpenGL.MAT4`1.#ctor(OpenGL.MAT4{`0})">
            <summary>
            用矩阵初始化矩阵
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT4`1.#ctor(OpenGL.VEC4{`0},OpenGL.VEC4{`0},OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            用列向量初始化矩阵
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
            <param name="col2">第2列向量</param>
            <param name="col3">第3列向量</param>
        </member>
        <member name="M:OpenGL.MAT4`1.#ctor(`0[0:,0:])">
            <summary>
            用二维数组初始化向量
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT4`1.#ctor(`0[])">
            <summary>
            用一维数组初始化向量
            </summary>
            <param name="array">一维数组，元素按列排放</param>
        </member>
        <member name="M:OpenGL.MAT4`1.GetRowToArray``1(System.Int32)">
            <summary>
            获取一行矩阵元素，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.GetRowToVEC4``1(System.Int32)">
            <summary>
            获取指定行，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="rowIndex">行索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.GetColumnToArray``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数组类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.GetColumnToVEC4``1(System.Int32)">
            <summary>
            获取指定列，并转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">输出的向量类型</typeparam>
            <param name="columnIndex">列索引</param>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.ToArray1D``1">
            <summary>
            矩阵转换为指定类型的一维数组
            </summary>
            <typeparam name="TOutput">数组类型</typeparam>
            <returns>指定类型的一维数组</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.ToArray2D``1">
            <summary>
            矩阵转换为指定类型的二维数组
            </summary>
            <typeparam name="TOutput">数组的类型</typeparam>
            <returns>指定类型的二维数组</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.ToMAT2``1">
            <summary>
            4x4矩阵收缩为指定类型的2x2矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的2x2矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.ToMAT3``1">
            <summary>
            4x4矩阵收缩为指定类型的3x3矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的3x3矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.ToMAT4``1">
            <summary>
            矩阵转换为指定类型的矩阵
            </summary>
            <typeparam name="TOutput">矩阵的类型</typeparam>
            <returns>指定类型的矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.SetElements(OpenGL.VEC4{`0},OpenGL.VEC4{`0},OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            用列向量来设置数组元素
            </summary>
            <param name="col0">第0列向量</param>
            <param name="col1">第1列向量</param>
            <param name="col2">第2列向量</param>
            <param name="col3">第3列向量</param>
        </member>
        <member name="M:OpenGL.MAT4`1.SetElements(OpenGL.MAT4{`0})">
            <summary>
            用矩阵设置矩阵元素
            </summary>
            <param name="m">非空的矩阵</param>
        </member>
        <member name="M:OpenGL.MAT4`1.SetElements(`0[])">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">矩阵元素按列排放的一维数组</param>
        </member>
        <member name="M:OpenGL.MAT4`1.SetElements(`0[0:,0:])">
            <summary>
            用二维数组初设置矩阵元素
            </summary>
            <param name="array">二维数组</param>
        </member>
        <member name="M:OpenGL.MAT4`1.SetRow(OpenGL.VEC4{`0},System.Int32)">
            <summary>
            用向量设置矩阵的一行元素
            </summary>
            <param name="vec">向量</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT4`1.SetRow(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵的一行
            </summary>
            <param name="array">一维数组</param>
            <param name="row">行索引</param>
        </member>
        <member name="M:OpenGL.MAT4`1.SetColumn(OpenGL.VEC4{`0},System.Int32)">
            <summary>
            用向量设置矩阵一列
            </summary>
            <param name="vec">列向量</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT4`1.SetColumn(`0[],System.Int32)">
            <summary>
            用一维数组设置矩阵元素
            </summary>
            <param name="array">一维数组</param>
            <param name="column">列索引</param>
        </member>
        <member name="M:OpenGL.MAT4`1.SetElemsToZeros">
            <summary>
            将矩阵元素全部置零
            </summary>
        </member>
        <member name="M:OpenGL.MAT4`1.SetElemsToOnes">
            <summary>
            将矩阵元素全部置一
            </summary>
        </member>
        <member name="M:OpenGL.MAT4`1.LoadIdentity">
            <summary>
            将矩阵设为单位矩阵
            </summary>
        </member>
        <member name="M:OpenGL.MAT4`1.Det">
            <summary>
            计算矩阵行列式的值
            </summary>
            <returns>矩阵行列式的值</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.Inverse">
            <summary>
            获取矩阵的逆矩阵
            </summary>
            <returns>如果存在逆矩阵，则返回逆矩阵，否则返回null</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.Transpose">
            <summary>
            获取矩阵的转置矩阵
            </summary>
            <returns>转置矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Addition(OpenGL.MAT4{`0},OpenGL.MAT4{`0})">
            <summary>
            矩阵相加
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>返回矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Addition(`0,OpenGL.MAT4{`0})">
            <summary>
            一个数与矩阵相加。一个数分别与矩阵元素相加
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Addition(OpenGL.MAT4{`0},`0)">
            <summary>
            一个矩阵与一个数相加
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Subtraction(OpenGL.MAT4{`0},OpenGL.MAT4{`0})">
            <summary>
            两个矩阵相减
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Subtraction(`0,OpenGL.MAT4{`0})">
            <summary>
            一个数与矩阵相减。一个数分别减去矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Subtraction(OpenGL.MAT4{`0},`0)">
            <summary>
            一个矩阵与一个数相减。矩阵元素分别与数相减
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Multiply(OpenGL.MAT4{`0},OpenGL.MAT4{`0})">
            <summary>
            两个矩阵相乘
            </summary>
            <param name="mat1">左矩阵</param>
            <param name="mat2">右矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.Multi(OpenGL.MAT4{`0})">
            <summary>
            矩阵对应的元素分别相乘
            </summary>
            <param name="m">乘矩阵</param>
            <returns>返回的矩阵行数和列数与原矩阵相同</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Multiply(`0,OpenGL.MAT4{`0})">
            <summary>
            一个数与矩阵相乘。一个数分别乘以各矩阵元素
            </summary>
            <param name="num">一个数</param>
            <param name="matrix">一个矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Multiply(OpenGL.MAT4{`0},`0)">
            <summary>
            矩阵乘以一个数。矩阵元素分别乘以一个数
            </summary>
            <param name="matrix">一个矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Division(OpenGL.MAT4{`0},`0)">
            <summary>
            矩阵除以一个数。矩阵元素分别除以一个数
            </summary>
            <param name="matrix">矩阵</param>
            <param name="num">一个数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Division(OpenGL.MAT4{`0},OpenGL.MAT4{`0})">
            <summary>
            矩阵除以矩阵。矩阵相应的元素相除
            </summary>
            <param name="mat1">被除矩阵</param>
            <param name="mat2">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Division(`0,OpenGL.MAT4{`0})">
            <summary>
            一个数除以矩阵。一个数分别除以矩阵元素
            </summary>
            <param name="num">被除数</param>
            <param name="matrix">除矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_ExclusiveOr(`0,OpenGL.MAT4{`0})">
            <summary>
            一个数对矩阵求幂。一个分别对矩阵元素求幂
            </summary>
            <param name="num">底数</param>
            <param name="matrix">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_ExclusiveOr(OpenGL.MAT4{`0},`0)">
            <summary>
            一个矩阵对一个数求幂。矩阵元素分别对一个数求幂
            </summary>
            <param name="matrix">底数矩阵</param>
            <param name="num">指数</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_ExclusiveOr(OpenGL.MAT4{`0},OpenGL.MAT4{`0})">
            <summary>
            矩阵对矩阵球求幂。矩阵对应元素分别求幂
            </summary>
            <param name="mat1">底数矩阵</param>
            <param name="mat2">指数矩阵</param>
            <returns>结果为矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_UnaryNegation(OpenGL.MAT4{`0})">
            <summary>
            矩阵取负
            </summary>
            <param name="matrix">矩阵</param>
            <returns>返回负矩阵</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Multiply(OpenGL.MAT4{`0},OpenGL.VEC4{`0})">
            <summary>
            矩阵乘以向量
            </summary>
            <param name="matrix">左矩阵</param>
            <param name="vector">右向量</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Equality(OpenGL.MAT4{`0},OpenGL.MAT4{`0})">
            <summary>
            判断矩阵是否相等。各对应元素相等，则视为相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果相等，则返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.MAT4`1.op_Inequality(OpenGL.MAT4{`0},OpenGL.MAT4{`0})">
            <summary>
            判断两个矩阵是否不相等.存在一个对应元素不相等，则视为不相等
            </summary>
            <param name="mat1">矩阵1</param>
            <param name="mat2">矩阵2</param>
            <returns>如果不等，返回true,否则返回码false</returns>
        </member>
        <member name="P:OpenGL.VEC2`1.dim">
            <summary>
            向量维度
            </summary>
        </member>
        <member name="P:OpenGL.VEC2`1.x">
            <summary>
            坐标x
            </summary>
        </member>
        <member name="P:OpenGL.VEC2`1.y">
            <summary>
            坐标y
            </summary>
        </member>
        <member name="P:OpenGL.VEC2`1.s">
            <summary>
            纹理坐标s
            </summary>
        </member>
        <member name="P:OpenGL.VEC2`1.t">
            <summary>
            纹理坐标t
            </summary>
        </member>
        <member name="P:OpenGL.VEC2`1.i">
            <summary>
            向量坐标i
            </summary>
        </member>
        <member name="P:OpenGL.VEC2`1.j">
            <summary>
            向量坐标j
            </summary>
        </member>
        <member name="P:OpenGL.VEC2`1.Item(System.Int32)">
            <summary>
            向量数据索引器
            </summary>
            <param name="i">下标</param>
            <returns>返回指定索引的数据</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.#ctor(`0[])">
            <summary>
            用数组初始化向量
            </summary>
            <param name="array">包含两个元素的数组</param>
        </member>
        <member name="M:OpenGL.VEC2`1.#ctor(`0,`0)">
            <summary>
            用两个参数初始化向量
            </summary>
            <param name="x">第一个元素</param>
            <param name="y">第二个元素</param>
        </member>
        <member name="M:OpenGL.VEC2`1.#ctor(OpenGL.VEC2{`0})">
            <summary>
            用向量来初始化向量
            </summary>
            <param name="vec">非空的向量</param>
        </member>
        <member name="M:OpenGL.VEC2`1.#ctor">
            <summary>
            默认向量初始化，所有元素初始化为0
            </summary>
        </member>
        <member name="M:OpenGL.VEC2`1.ToArray``1">
            <summary>
            转换为指定类型的数组
            </summary>
            <typeparam name="TOutput">元素输出数值类型</typeparam>
            <returns>指定数值类型的数组</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.ToVEC2``1">
            <summary>
            转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">元素输出数值类型</typeparam>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.ToVEC3``1">
            <summary>
            二维向量扩展为三维向量
            </summary>
            <typeparam name="TOutput">元素输出数值类型</typeparam>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.ToVEC4``1">
            <summary>
            二维向量扩展为四维向量
            </summary>
            <typeparam name="TOutput">元素输出数值类型</typeparam>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Equality(OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            判断两个向量是否相等，如果相对应的值相等，即认为相等
            </summary>
            <param name="v1">向量1</param>
            <param name="v2">向量2</param>
            <returns>相等为true，否则为false</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Inequality(OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            判断两个向量是否不等，有一个对应值不等，视为不等
            </summary>
            <param name="v1">向量1</param>
            <param name="v2">向量2</param>
            <returns>不等为true,否则为false</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Addition(OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            两个向量相加。对应的元素相加
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">向量2</param>
            <returns>相加后的向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Addition(`0,OpenGL.VEC2{`0})">
            <summary>
            数和向量相加。一个数与向量个元素分别相加
            </summary>
            <param name="scalar">一个数</param>
            <param name="vector">一个向量</param>
            <returns>数和向量相加后结果是向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Addition(OpenGL.VEC2{`0},`0)">
            <summary>
            向量和数相加，向量元素分别与数相加
            </summary>
            <param name="vector">向量</param>
            <param name="scalar">数</param>
            <returns>向量与数相加后仍然是向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Subtraction(OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            两个向量相减。两向量项对应的元素相减
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">向量2</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Subtraction(`0,OpenGL.VEC2{`0})">
            <summary>
            数与向量相减 。数分别与向量元素相减。
            </summary>
            <param name="scalar">数</param>
            <param name="vector">向量</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Subtraction(OpenGL.VEC2{`0},`0)">
            <summary>
            向量与数相减。向量元素分别减去一个数
            </summary>
            <param name="vector">向量</param>
            <param name="scalar">数</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Multiply(OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            两个向量相乘。向量的元素分别相乘
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">向量2</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Multiply(`0,OpenGL.VEC2{`0})">
            <summary>
            数与向量相乘。数分别与向量元素相乘
            </summary>
            <param name="scalar">数</param>
            <param name="vector">向量</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Multiply(OpenGL.VEC2{`0},`0)">
            <summary>
            向量与数相乘。向量的元素分贝与数相乘
            </summary>
            <param name="vector">向量</param>
            <param name="scalar">数</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Division(OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            两个向量相除。向量的元素分别相除
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">响亮</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Division(OpenGL.VEC2{`0},`0)">
            <summary>
            向量与数相除。向量元素分别与数相除
            </summary>
            <param name="vector">向量</param>
            <param name="scalar">数</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_Division(`0,OpenGL.VEC2{`0})">
            <summary>
            数与向量相除。数分别与向量元素相除
            </summary>
            <param name="scalar">数</param>
            <param name="vector">向量</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_ExclusiveOr(OpenGL.VEC2{`0},`0)">
            <summary>
            向量对标量乘幂。向量元素分别对标量取幂
            </summary>
            <param name="vector">向量为底数</param>
            <param name="scalar">标量为指数</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_ExclusiveOr(OpenGL.VEC2{`0},OpenGL.VEC2{`0})">
            <summary>
            向量对向量乘幂。向量对应元素乘幂
            </summary>
            <param name="vec1">向量1位底数</param>
            <param name="vec2">向量2为指数</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.op_UnaryNegation(OpenGL.VEC2{`0})">
            <summary>
            向量取反方向
            </summary>
            <param name="vector">向量</param>
            <returns>反方向的向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.Dot(OpenGL.VEC2{`0})">
            <summary>
            向量点乘
            </summary>
            <param name="vector">向量</param>
            <returns>一个数值</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.Length">
            <summary>
            计算向量的模
            </summary>
            <returns>向量的模，一个数值</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.Reflect(OpenGL.VEC2{`0})">
            <summary>
            计算该向量的反射向量
            </summary>
            <param name="normal">法线向量</param>
            <returns>反射向量</returns>
        </member>
        <member name="M:OpenGL.VEC2`1.Normalize">
            <summary>
            生成单位向量
            </summary>
            <returns>返回单位向量</returns>
        </member>
        <member name="P:OpenGL.VEC3`1.dim">
            <summary>
            向量维度
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.x">
            <summary>
            坐标x
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.y">
            <summary>
            坐标y
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.z">
            <summary>
            坐标z
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.r">
            <summary>
            颜色分量r
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.g">
            <summary>
            颜色分量g
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.b">
            <summary>
            颜色分量b
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.s">
            <summary>
            第一个纹理坐标s
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.t">
            <summary>
            第二个纹理坐标t
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.u">
            <summary>
            第三个纹理坐标u
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.i">
            <summary>
            第一个向量坐标i
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.j">
            <summary>
            第二个向量坐标j
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.k">
            <summary>
            第三个向量坐标k
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.Item(System.Int32)">
            <summary>
            下标索引器
            </summary>
            <param name="i">下标值</param>
            <returns>相应下标的值</returns>
        </member>
        <member name="P:OpenGL.VEC3`1.xy">
            <summary>
            返回/设置向量的前两个分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.st">
            <summary>
            返回/设置向量的前两个分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC3`1.ij">
            <summary>
            返回/设置向量的前两个分量
            </summary>
        </member>
        <member name="M:OpenGL.VEC3`1.#ctor(`0[])">
            <summary>
            用数组初始化三维向量
            </summary>
            <param name="array">三个元素的数组</param>
        </member>
        <member name="M:OpenGL.VEC3`1.#ctor">
            <summary>
            默认方式初始化三维向量，所有元素初始化为零
            </summary>
        </member>
        <member name="M:OpenGL.VEC3`1.#ctor(`0,`0,`0)">
            <summary>
            用三个参数初始化三维向量
            </summary>
            <param name="x">参数1</param>
            <param name="y">参数2</param>
            <param name="z">参数3</param>
        </member>
        <member name="M:OpenGL.VEC3`1.#ctor(`0,OpenGL.VEC2{`0})">
            <summary>
            一个标量和一个二维向量初始化三维向量
            </summary>
            <param name="x">一个标量</param>
            <param name="vector">一个二维向量</param>
        </member>
        <member name="M:OpenGL.VEC3`1.#ctor(OpenGL.VEC2{`0},`0)">
            <summary>
            一个二维向量和一个标量初始化三维数组
            </summary>
            <param name="vector">一个二维向量</param>
            <param name="z">一个标量</param>
        </member>
        <member name="M:OpenGL.VEC3`1.#ctor(OpenGL.VEC3{`0})">
            <summary>
            一个三维向量初始化三维向量
            </summary>
            <param name="vector">一个三维相向量</param>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Addition(OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            两个向量相加。对应的元素相加
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">向量2</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Addition(`0,OpenGL.VEC3{`0})">
            <summary>
            一个标量和向量相加。数与向量元素分别相加
            </summary>
            <param name="scalar">一个标量</param>
            <param name="vector">一个向量</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Addition(OpenGL.VEC3{`0},`0)">
            <summary>
            一个向量与一个标量相加。向量的元素分别与标量相加
            </summary>
            <param name="vector">一个向量</param>
            <param name="scalar">一个标量</param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Subtraction(OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            两个向量相减。向量元素分别相减
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">向量2</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Subtraction(`0,OpenGL.VEC3{`0})">
            <summary>
            标量与向量相减。标量分别与向量元素相减
            </summary>
            <param name="scalar">一个标量</param>
            <param name="vector">一个向量</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Subtraction(OpenGL.VEC3{`0},`0)">
            <summary>
            向量与标量相减。向量元素分别与标量相减
            </summary>
            <param name="vector">向量</param>
            <param name="scalar">标量</param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Multiply(OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            两个向量相乘。向量对应元素相乘
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">向量2</param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Multiply(`0,OpenGL.VEC3{`0})">
            <summary>
            标量与向量相乘。标量分别与向量元素相乘
            </summary>
            <param name="scalar">标量</param>
            <param name="vector">向量</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Multiply(OpenGL.VEC3{`0},`0)">
            <summary>
            向量与标量相乘。向量元素分别与标量相乘
            </summary>
            <param name="vector">向量</param>
            <param name="scalar">标量</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Division(OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            两个向量相除。向量对应元素相除
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">向量2</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Division(`0,OpenGL.VEC3{`0})">
            <summary>
            标量除以向量。标量分别除以向量元素
            </summary>
            <param name="scalar">标量</param>
            <param name="vector">向量</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Division(OpenGL.VEC3{`0},`0)">
            <summary>
            向量除以标量。向量的元素分别除以标量
            </summary>
            <param name="vector">向量</param>
            <param name="scalar">标量</param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Equality(OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            判断两个向量是否相等。对应元素相等，视为相等
            </summary>
            <param name="v1">向量1</param>
            <param name="v2">向量2</param>
            <returns>相等返回true,否则false</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_Inequality(OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            判断两个向量是否不等，有一个对应元素不等，则视为不等
            </summary>
            <param name="v1">向量1</param>
            <param name="v2">向量2</param>
            <returns>不等返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_ExclusiveOr(`0,OpenGL.VEC3{`0})">
            <summary>
            一个标量对向量乘幂。标量分别对向量元素取幂
            </summary>
            <param name="scalar">标量为底数</param>
            <param name="vector">向量为指数</param>
            <returns>返回值为向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_ExclusiveOr(OpenGL.VEC3{`0},`0)">
            <summary>
            向量对标量乘幂。向量元素分别对标量取幂
            </summary>
            <param name="vector">向量为底数</param>
            <param name="scalar">标量为指数</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_ExclusiveOr(OpenGL.VEC3{`0},OpenGL.VEC3{`0})">
            <summary>
            向量对向量乘幂。向量对应元素乘幂
            </summary>
            <param name="vec1">向量1位底数</param>
            <param name="vec2">向量2为指数</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.op_UnaryNegation(OpenGL.VEC3{`0})">
            <summary>
            向量取反方向
            </summary>
            <param name="vector">向量</param>
            <returns>反方向的向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.Dot(OpenGL.VEC3{`0})">
            <summary>
            向量点乘另一个向量
            </summary>
            <param name="vector">另一个向量</param>
            <returns>一个数值</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.Cross(OpenGL.VEC3{`0})">
            <summary>
            向量叉乘另一个向量
            </summary>
            <param name="vector">另一个向量</param>
            <returns>叉乘结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.Length">
            <summary>
            计算向量的模
            </summary>
            <returns>向量的模</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.Normalize">
            <summary>
            转换为单位向量
            </summary>
            <returns>返回单位向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.Reflect(OpenGL.VEC3{`0})">
            <summary>
            计算该向量的反射向量
            </summary>
            <param name="normal">法线向量</param>
            <returns>反射向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.ToArray``1">
            <summary>
            向量转换为指定数值类型的数组
            </summary>
            <typeparam name="TOutput">数组的类型</typeparam>
            <returns>指定类型的数组</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.ToVEC3``1">
            <summary>
            转换输出为指定数值类型的向量
            </summary>
            <typeparam name="TOutput">输出的类型</typeparam>
            <returns>指定类型的向量</returns>
        </member>
        <member name="M:OpenGL.VEC3`1.ToVEC4``1">
            <summary>
            三维向量扩展为四维向量
            </summary>
            <typeparam name="TOutput">元素输出数值类型</typeparam>
            <returns>指定类型的向量</returns>
        </member>
        <member name="P:OpenGL.VEC4`1.dim">
            <summary>
            向量维度
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.x">
            <summary>
            坐标x。第一个分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.y">
            <summary>
            坐标y。第二个分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.z">
            <summary>
            坐标z。第三个分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.w">
            <summary>
            坐标w。第四个分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.r">
            <summary>
            红色分量。第一个颜色分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.g">
            <summary>
            绿色分量。第二个颜色分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.b">
            <summary>
            蓝色分量。第三个颜色分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.a">
            <summary>
            透明度分量。第四个颜色分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.s">
            <summary>
            第一个纹理坐标
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.t">
            <summary>
            第二个纹理坐标
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.q">
            <summary>
            第四个纹理坐标
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="i">向量分量下标</param>
            <returns>获得指定下标的分量</returns>
        </member>
        <member name="P:OpenGL.VEC4`1.xy">
            <summary>
            返回/设置向量的前两个分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.ij">
            <summary>
            返回/设置向量的前两个分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.st">
            <summary>
            返回/设置向量的前两个分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.xyz">
            <summary>
            返回/设置向量前三个分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.ijk">
            <summary>
            返回/设置向量前三个分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.rgb">
            <summary>
            返回/设置向量前三个分量
            </summary>
        </member>
        <member name="P:OpenGL.VEC4`1.stu">
            <summary>
            返回/设置向量前三个分量
            </summary>
        </member>
        <member name="M:OpenGL.VEC4`1.#ctor(`0[])">
            <summary>
            用数组初始化向量
            </summary>
            <param name="array">四个元素的数组</param>
        </member>
        <member name="M:OpenGL.VEC4`1.#ctor">
            <summary>
            默认方式初始化向量，所有分量初始化为0
            </summary>
        </member>
        <member name="M:OpenGL.VEC4`1.#ctor(`0,`0,`0,`0)">
            <summary>
            用四个参数初始化向量
            </summary>
            <param name="x">第一个分量</param>
            <param name="y">第二个分量</param>
            <param name="z">第三个分量</param>
            <param name="w">第四个分量</param>
        </member>
        <member name="M:OpenGL.VEC4`1.#ctor(`0,`0,OpenGL.VEC2{`0})">
            <summary>
            用两个标量和一个二维向量初始化四维向量
            </summary>
            <param name="x">第一个分量</param>
            <param name="y">第二个分量</param>
            <param name="vec">二维向量</param>
        </member>
        <member name="M:OpenGL.VEC4`1.#ctor(`0,OpenGL.VEC3{`0})">
            <summary>
            用一个标量和一个三维向量初始化四维向量
            </summary>
            <param name="x">第一个分量</param>
            <param name="vec">三维向量</param>
        </member>
        <member name="M:OpenGL.VEC4`1.#ctor(OpenGL.VEC2{`0},`0,`0)">
            <summary>
            一个向量和两个标量初始化四维向量
            </summary>
            <param name="vec">二维向量</param>
            <param name="z">第三个分量</param>
            <param name="w">第四个分量</param>
        </member>
        <member name="M:OpenGL.VEC4`1.#ctor(OpenGL.VEC3{`0},`0)">
            <summary>
            一个三维向量和一个标量初始化四维向量
            </summary>
            <param name="vec">三维向量</param>
            <param name="w">第四个分量</param>
        </member>
        <member name="M:OpenGL.VEC4`1.#ctor(OpenGL.VEC4{`0})">
            <summary>
            用四维向量初始化四维向量
            </summary>
            <param name="vec">四维向量</param>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Addition(OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            两个向量相加。向量相应的元素相加
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">向量2</param>
            <returns>返回一个向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Addition(`0,OpenGL.VEC4{`0})">
            <summary>
            标量与向量相加。标量分别约向量分量相加；
            </summary>
            <param name="scalar">标量</param>
            <param name="vector">向量</param>
            <returns>返回一个向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Addition(OpenGL.VEC4{`0},`0)">
            <summary>
            向量与标量相加。向量分量分别与标量相加
            </summary>
            <param name="vector">向量</param>
            <param name="scalar">标量</param>
            <returns></returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Subtraction(OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            两个向量相减。向量分量分别相减
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">向量2</param>
            <returns>返回一个向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Subtraction(`0,OpenGL.VEC4{`0})">
            <summary>
            标量与向量相减。标量分别与向量分量相减
            </summary>
            <param name="scalar">标量</param>
            <param name="vector">向量</param>
            <returns>返回一个向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Subtraction(OpenGL.VEC4{`0},`0)">
            <summary>
            向量与标量相减。向量分量分别与标量相减
            </summary>
            <param name="vector">向量</param>
            <param name="scalar">标量</param>
            <returns>返回一个向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Multiply(OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            两个向量相乘。向量分量分别相乘
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">向量2</param>
            <returns>返回一个向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Multiply(`0,OpenGL.VEC4{`0})">
            <summary>
            标量与向量相乘。标量分别与向量分量相乘
            </summary>
            <param name="scalar">标量</param>
            <param name="vector">向量</param>
            <returns>返回一个向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Multiply(OpenGL.VEC4{`0},`0)">
            <summary>
            向量与标量相乘。向量分量分别与标量相乘
            </summary>
            <param name="vector">向量</param>
            <param name="scalar">标量</param>
            <returns>返回一个向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Division(OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            两个向量相除。向量分量分别相除
            </summary>
            <param name="vec1">向量1</param>
            <param name="vec2">向量2</param>
            <returns>返回一个向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Division(`0,OpenGL.VEC4{`0})">
            <summary>
            标量除以向量。标量分别除以向量分量
            </summary>
            <param name="scalar">标量</param>
            <param name="vector">向量</param>
            <returns>返回一个向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Division(OpenGL.VEC4{`0},`0)">
            <summary>
            向量除以标量。向量分量分别除以标量
            </summary>
            <param name="vector">向量</param>
            <param name="scalar">标量</param>
            <returns>返回一个向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Equality(OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            判断两个向量是否相等。各分量相等，则视为相等
            </summary>
            <param name="v1">向量1</param>
            <param name="v2">向量2</param>
            <returns>相等返回true,否则返回false</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_Inequality(OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            判断两个向量是否不等。至少有一个元素不等，则视为不等
            </summary>
            <param name="v1">向量1</param>
            <param name="v2">向量2</param>
            <returns>返回一个向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_ExclusiveOr(OpenGL.VEC4{`0},`0)">
            <summary>
            向量对标量乘幂。向量元素分别对标量取幂
            </summary>
            <param name="vector">向量为底数</param>
            <param name="scalar">标量为指数</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_ExclusiveOr(OpenGL.VEC4{`0},OpenGL.VEC4{`0})">
            <summary>
            向量对向量乘幂。向量对应元素乘幂
            </summary>
            <param name="vec1">向量1位底数</param>
            <param name="vec2">向量2为指数</param>
            <returns>结果为向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.op_UnaryNegation(OpenGL.VEC4{`0})">
            <summary>
            向量取反方向
            </summary>
            <param name="vector">向量</param>
            <returns>反方向的向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.Dot(OpenGL.VEC4{`0})">
            <summary>
            向量点乘另一个向量
            </summary>
            <param name="vector">另一个向量</param>
            <returns>一个数值</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.Length">
            <summary>
            计算向量的模
            </summary>
            <returns>向量的模</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.Normalize">
            <summary>
            转换为单位向量
            </summary>
            <returns>返回单位向量</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.ToArray``1">
            <summary>
            将向量转换成指定类型的数组
            </summary>
            <typeparam name="TOutput">输出的数据类型</typeparam>
            <returns>指定数据类型的数组</returns>
        </member>
        <member name="M:OpenGL.VEC4`1.ToVEC4``1">
            <summary>
            将向量转换为指定类型的向量
            </summary>
            <typeparam name="TOutput">向量分量的数据类型</typeparam>
            <returns>指定数据类型的向量</returns>
        </member>
        <member name="F:OpenGL.PIXELFORMATDESCRIPTOR.nSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenGL.wgl.CreateContext(System.IntPtr)">
            <summary>
            <para>The wglCreateContext function creates a new OpenGL rendering context,which is suitable for drawing on the device referenced by hdc.</para>
            <para>The rendering context has the same pixel format as the device context.</para>
            </summary>
            <param name="hdc">
            Handle to a device context for which the function creates a suitable OpenGL rendering context.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a valid handle to an OpenGL rendering context.</para>
            <para>If the function fails, the return value is NULL. </para>
            </returns>
        </member>
        <member name="M:OpenGL.wgl.MakeCurrent(System.IntPtr,System.IntPtr)">
            <summary>
            <para>the wglMakeCurrent function makes a specified OpenGL rendering context the calling thread's current rendering context.</para>
            <para> All subsequent OpenGL calls made by the thread are drawn on the device identified by hdc. </para>
            <para>You can also use wglMakeCurrent to change the calling thread's current rendering context so it's no longer current.</para>
            </summary>
            <param name="hdc">
            <para>Handle to a device context. </para>
            <para>Subsequent OpenGL calls made by the calling thread are drawn on the device identified by hdc.</para>
            </param>
            <param name="hglrc">
            <para>Subsequent OpenGL calls made by the calling thread are drawn on the device identified by hdc.</para>
            <para>Handle to an OpenGL rendering context that the function sets as the calling thread's rendering context.</para>
            <para>Subsequent OpenGL calls made by the calling thread are drawn on the device identified by hdc.</para>
            <para>Subsequent OpenGL calls made by the calling thread are drawn on the device identified by hdc.</para>
            <para>If hglrc is NULL, the function makes the calling thread's current rendering context no longer current, </para>
            <para>and releases the device context that is used by the rendering context. </para>
            <para>In this case, hdc is ignored.</para>
            </param>
            <returns>
            <para>When the wglMakeCurrent function succeeds, the return value is TRUE; </para>
            <para>otherwise the return value is FALSE.</para>
            </returns>
        </member>
        <member name="M:OpenGL.wgl.GetProcAddress(System.String)">
            <summary>
            The wglGetProcAddress function returns the address of an OpenGL extension function for use with the current OpenGL rendering context.
            </summary>
            <param name="funcName">
            <para>Points to a null-terminated string that is the name of the extension function. </para>
            <para>The name of the extension function must be identical to a corresponding function implemented by OpenGL.</para>
            </param>
            <returns>
            <para>When the function succeeds, the return value is the address of the extension function.</para>
            <para>When no current rendering context exists or the function fails, the return value is NULL.</para>
            </returns>
        </member>
        <member name="M:OpenGL.wgl.CopyContext(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            The wglCopyContext function copies selected groups of rendering states from one OpenGL rendering context to another.
            </summary>
            <param name="hglrcSrc">
            Specifies the source OpenGL rendering context whose state information is to be copied.
            </param>
            <param name="hglrcDst">
            Specifies the destination OpenGL rendering context to which state information is to be copied.
            </param>
            <param name="mask">
            <para>Specifies which groups of the hglrcSrc rendering state are to be copied to hglrcDst. </para>
            <para>It contains the bitwise-OR of the same symbolic names that are passed to the glPushAttrib function.</para> 
            <para>You can use GL_ALL_ATTRIB_BITS to copy all the rendering state information.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is TRUE. </para>
            <para>If the function fails, the return value is FALSE.</para>
            </returns>
        </member>
        <member name="M:OpenGL.wgl.CreateLayerContext(System.IntPtr,System.UInt32)">
            <summary>
            The wglCreateLayerContext function creates a new OpenGL rendering context for drawing to a specified layer plane on a device context.
            </summary>
            <param name="hdc">
            Specifies the device context for a new rendering context.
            </param>
            <param name="iLayerPlane">
            <para>Specifies the layer plane to which you want to bind a rendering context. </para>
            <para>The value 0 identifies the main plane. </para>
            <para> values of iLayerPlane identify overlay planes,</para>
            <para>where 1 is the first overlay plane over the main plane, 2 is the second overlay plane over the first overlay plane, and so on.</para>
            <para>Negative values identify underlay planes, </para>
            <para>where 1 is the first underlay plane under the main plane, 2 is the second underlay plane under the first underlay plane, and so on.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to an OpenGL rendering context.</para>
            <para>If the function fails, the return value is NULL.</para>
            </returns>
        </member>
        <member name="M:OpenGL.wgl.DeleteContext(System.IntPtr)">
            <summary>
            The wglDeleteContext function deletes a specified OpenGL rendering context.
            </summary>
            <param name="hglrc">
            Handle to an OpenGL rendering context that the function will delete.
            </param>
            <returns>
            <para>If the function succeeds, the return value is TRUE.</para>
            <para>If the function fails, the return value is FALSE.</para>
            </returns>
        </member>
        <member name="M:OpenGL.wgl.DescribeLayerPlane(System.IntPtr,System.Int32,System.Int32,System.UInt32,OpenGL.LPLAYERPLANEDESCRIPTOR@)">
             <summary>
            The wglDescribeLayerPlane function obtains information about the layer planes of a given pixel format. 
             </summary>
             <param name="hdc">
             Specifies the device context of a window whose layer planes are to be described.
             </param>
             <param name="iPixelFormat">
             Specifies which layer planes of a pixel format are being described.
             </param>
             <param name="iLayerPlane">
             <para>Specifies the overlay or underlay plane. </para>
             <para>Positive values of iLayerPlane identify overlay planes, </para>
             <para>where 1 is the first overlay plane over the main plane,2 is the second overlay plane over the first overlay plane, and so on. </para>
             <para>Negative values identify underlay planes, </para>
             <para>where 1 is the first underlay plane under the main plane, 2 is the second underlay plane under the first underlay plane, and so on.</para>
             </param>
             <param name="uBytes">
             Specifies the size, in bytes, of the structure pointed to by plpd.
             </param>
             <param name="plpd">
             <para>Points to a LAYERPLANEDESCRIPTOR structure.</para>
             <para>The wglDescribeLayerPlane function sets the value of the structure's data members. </para>
             <para>The function stores the number of bytes of data copied to the structure in the nSize member.</para>
             </param>
             <returns>
             <para>If the function succeeds, the return value is TRUE. </para>
             <para>If the function fails, the return value is FALSE.</para>
             </returns>
        </member>
        <member name="M:OpenGL.wgl.GetCurrentContext">
            <summary>
            The wglGetCurrentContext function obtains a handle to the current OpenGL rendering context of the calling thread.
            </summary>
            <returns>
            <para>if the calling thread has a current OpenGL rendering context, wglGetCurrentContext returns a handle to that rendering context. </para>
            <para>Otherwise, the return value is NULL.</para>
            </returns>
        </member>
        <member name="M:OpenGL.wgl.GetCurrentDC">
            <summary>
            The wglGetCurrentDC function obtains a handle to the device context that is associated with the current OpenGL rendering context of the calling thread.
            </summary>
            <returns>
            <para>If the calling thread has a current OpenGL rendering context, </para>
            <para>the function returns a handle to the device context associated with that rendering context by means of the wglMakeCurrent function.</para>
            <para>Otherwise, the return value is NULL.</para>
            </returns>
        </member>
        <member name="M:OpenGL.wgl.GetLayerPaletteEntries(System.IntPtr,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            The wglGetLayerPaletteEntries function retrieves the palette entries  from a given color-index layer plane for a specified device context.
            </summary>
            <param name="hdc">
            Specifies the device context of a window whose layer planes are to be described.
            </param>
            <param name="iLayerPlane">Specifies the overlay or underlay plane. 
            <para>Positive values of iLayerPlane identify overlay planes, </para>
            <para>where 1 is the first overlay plane over the main plane,2 is the second overlay plane over the first overlay plane, and so on. </para>
            <para>Negative values identify underlay planes,</para>
            <para>where 1 is the first underlay plane under the main plane, 2 is the second underlay plane under the first underlay plane, and so on</para>
            </param>
            <param name="iStart">
            Specifies the first palette entry to be retrieved.
            </param>
            <param name="cEntries">
            Specifies the number of palette entries to be retrieved.
            </param>
            <param name="pcr">
            <para>Points to an array of COLORREF structures that contain palette RGB color values. </para>
            <para>The array must contain at least as many structures as specified by cEntries.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the number of entries that were set in the palette in the specified layer plane of the window.</para>
            <para>If the function fails or when no pixel format is selected, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:OpenGL.wgl.RealizeLayerPalette(System.IntPtr,System.Int32,System.Boolean)">
             <summary>
             <para>The wglRealizeLayerPalette function maps palette entries  from a given color-index layer plane into the physical palette </para>
             <para>or initializes the palette of an RGBA layer plane.</para>
             </summary>
             <param name="hdc">
             ecifies the device context of a window whose layer plane palette is to be realized into the physical palette.
             </param>
             <param name="iLayerPlane">
             <para>Specifies the overlay or underlay plane.</para>
             <para>Positive values of iLayerPlane identify overlay planes, </para>
            <para> where 1 is the first overlay plane over the main plane, 2 is the second overlay plane over the first overlay plane, and so on.</para>
            <para> Negative values identify underlay planes, </para>
             <para>where 1 is the first underlay plane under the main plane, 2 is the second underlay plane under the first underlay plane, and so on. </para>
             </param>
             <param name="bRealize">
             <para>Indicates whether the palette is to be realized into the physical palette.</para>
             <para>When bRealize is TRUE, the palette entries are mapped into the physical palette where available.</para>
             <para>When bRealize is FALSE, the palette entries for the layer plane of the window are no longer needed and might be released for use by another foreground window.</para>
             </param>
             <returns>
             <para>If the function succeeds, the return value is TRUE, even if bRealize is TRUE and the physical palette is not available.</para>
             <para>If the function fails or when no pixel format is selected, the return value is FALSE.</para>
             </returns>
        </member>
        <member name="M:OpenGL.wgl.SetLayerPaletteEntries(System.IntPtr,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            The wglSetLayerPaletteEntries function sets the palette entries in a given color-index layer plane for a specified device context.
            </summary>
            <param name="hdc">
            Specifies the device context of a window whose layer palette is to be set.
            </param>
            <param name="iLayerPlane">
            <para>Specifies an overlay or underlay plane. </para>
            <para>Positive values of iLayerPlane identify overlay planes, </para>
            <para>where 1 is the first overlay plane over the main plane, 2 is the second overlay plane over the first overlay plane, and so on. </para>
            <para>Negative values identify underlay planes, </para>
            <para>where 1 is the first underlay plane under the main plane, 2 is the second underlay plane under the first underlay plane, and so on. </para>
            </param>
            <param name="iStart">
            Specifies the first palette entry to be set.
            </param>
            <param name="cEntries">
            Specifies the number of palette entries to be set.
            </param>
            <param name="pcr">
            Points to the first member of an array of cEntries COLORREF structure that contain RGB color information.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the number of entries that were set in the palette in the specified layer plane of the window.</para>
            <para>If the function fails or no pixel format is selected, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:OpenGL.wgl.ShareLists(System.IntPtr,System.IntPtr)">
            <summary>
            The wglShareLists function enables multiple OpenGL rendering contexts to share a single display-list space.
            </summary>
            <param name="hglrc1">
            Specifies the OpenGL rendering context with which to share display lists.
            </param>
            <param name="hglrc2">
            <para>Specifies the OpenGL rendering context to share display lists with hglrc1. </para>
            <para>The hglrc2 parameter should not contain any existing display lists when wglShareLists is called.</para>
            </param>
            <returns>
            <para>When the function succeeds, the return value is TRUE.</para>
            <para>When the function fails, the return value is FALSE and the display lists are not shared.</para>
            </returns>
        </member>
        <member name="M:OpenGL.wgl.SwapLayerBuffers(System.IntPtr,System.UInt32)">
            <summary>
            The wglSwapLayerBuffers function swaps the front and back buffers in the overlay, underlay, and main planes of the window referenced by a specified device context.
            </summary>
            <param name="hdc">
            Specifies the device context of a window whose layer plane palette is to be realized into the physical palette.
            </param>
            <param name="fuPlanes">
            <para>Specifies the overlay, underlay, and main planes whose front and back buffers are to be swapped.</para>
            <para>The fuPlanes parameter is a bitwise combination of the following values.</para>
            <para>WGL_SWAP_MAIN_PLANE、WGL_SWAP_OVERLAYi、WGL_SWAP_UNDERLAYi</para>
            </param>
            <returns>
            If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE.
            </returns>
        </member>
        <member name="M:OpenGL.wgl.SwapMultipleBuffers(System.IntPtr,System.UInt32)">
            <summary>
            <para>wglSwapMultipleBuffer would allow to swap more than one window at one time.</para>
            <para>For example if you have four views like in a CAD application, </para>
            <para>if you call wglSwapBuffer in sequence for eachof them there is a small delay because it's a blocking call.</para>
            <para>It's annoying during playback of animation, because the contexts can be seen to swaping clockwise,for example(thoughit can be minimized). </para>
            <para>It's probably not implemented, like the DirectDraw flag(good intension only).</para>
            <para>The layer API already allows multiple layers in a single call.</para>
            </summary>
            <param name="hdc">
            Specifies the device context of a window
            </param>
            <param name="uiFlags"></param>
            <returns>
            If the function succeeds, the return value is TRUE. If the function fails, the return value is FALSE.
            </returns>
        </member>
        <member name="M:OpenGL.wgl.UseFontBitmaps(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            <para>The wglUseFontBitmaps function creates a set of bitmap display lists for use in the current OpenGL rendering context.</para>
            <para> The set of bitmap display lists is based on the glyphs in the currently selected font in the device context.</para>
            <para>You can then use bitmaps to draw characters in an OpenGL image.</para>
            </summary>
            <param name="hdc">
            Specifies the device context whose currently selected font will be used to form the glyph bitmap display lists in the current OpenGL rendering context.
            </param>
            <param name="firstGlyph">
            Specifies the first glyph in the run of glyphs that will be used to form glyph bitmap display lists.
            </param>
            <param name="glyphsNum">
            <para>Specifies the number of glyphs in the run of glyphs that will be used to form glyph bitmap display lists.</para>
            <para>The function creates count display lists, one for each glyph in the run</para>
            </param>
            <param name="displayList">
            Specifies a starting display list.
            </param>
            <returns>
            If the function succeeds, the return value is TRUE.If the function fails, the return value is FALSE.
            </returns>
        </member>
        <member name="M:OpenGL.wgl.UseFontOutlines(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.Single,System.Single,System.Int32,OpenGL.LPLAYERPLANEDESCRIPTOR)">
            <summary>
            <para>The wglUseFontOutlines function creates a set of display lists, one for each glyph of the currently selected outline font of a device context, </para>
            <para>for use with the current rendering context. </para>
            <para>The display lists are used to draw 3-D characters of TrueType fonts. Each display list describes a glyph outline in floating-point coordinates.</para>
            </summary>
            <param name="hdc">
            <para>Specifies the device context with the desired outline font. </para>
            <para>The outline font of hdc is used to create the display lists in the current rendering context.</para>
            </param>
            <param name="firstGlyph">
            <para>Specifies the first of the set of glyphs that form the font outline display lists</para>
            </param>
            <param name="glyphsNum">
            <para>Specifies the number of glyphs in the set of glyphs used to form the font outline display lists. </para>
            <para>The wglUseFontOutlines function creates count display lists, one display list for each glyph in a set of glyphs.</para>
            </param>
            <param name="displayList">
            Specifies a starting display list.
            </param>
            <param name="deviation">
            <para>Specifies the maximum chordal deviation from the original outlines.</para>
            <para>When deviation is zero, the chordal deviation is equivalent to one design unit of the original font.</para>
            <para>The value of deviation must be equal to or greater than 0.</para>
            </param>
            <param name="extrusion">
            <para>Specifies how much a font is extruded in the negative z direction.</para>
            <para>The value must be equal to or greater than 0. When extrusion is 0, the display lists are not extruded.</para>
            </param>
            <param name="format">
            <para>Specifies the format, either WGL_FONT_LINES or WGL_FONT_POLYGONS, to use in the display lists. </para>
            <para>When format is WGL_FONT_LINES, the wglUseFontOutlines function creates fonts with line segments. </para>
            <para>When format is WGL_FONT_POLYGONS, wglUseFontOutlines creates fonts with polygons.</para>
            </param>
            <param name="lpgmf">
            <para>Points to an array of countGLYPHMETRICSFLOAT structures that is to receive the metrics of the glyphs.  </para>
            <para>When lpgmf is NULL, no glyph metrics are returned.</para>
            </param>
            <returns>
            <para>When the function succeeds, the return value is TRUE.</para>
            <para>When the function fails, the return value is FALSE and no display lists are generated.</para>
            </returns>
        </member>
        <member name="M:OpenGL.winapi.ChoosePixelFormat(System.IntPtr,System.IntPtr)">
            <summary>
            The ChoosePixelFormat function attempts to match an appropriate pixel format supported by a device context to a given pixel format specification.
            </summary>
            <param name="hdc">
            Specifies the device context that the function examines to determine the best match for the pixel format descriptor pointed to by ppfd.
            </param>
            <param name="ppfd">
            Pointer to a PIXELFORMATDESCRIPTOR structure that specifies the requested pixel format.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a pixel format index (one-based) that is the closest match to the given pixel format descriptor.</para>
            <para>If the function fails, the return value is zero.</para>
            </returns>
        </member>
        <member name="M:OpenGL.winapi.SetPixelFormat(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            The SetPixelFormat function sets the pixel format of the specified device context to the format specified by the iPixelFormat index.
            </summary>
            <param name="hdc">
            Specifies the device context whose pixel format the function attempts to set.</param>
            <param name="format">
            <para>Index that identifies the pixel format to set. </para>
            <para>The various pixel formats supported by a device context are identified by one-based indexes.</para>
            </param>
            <param name="ppfd">
            <para>Pointer to a PIXELFORMATDESCRIPTOR structure that contains the logical pixel format specification.</para>
            <para>The system's metafile component uses this structure to record the logical pixel format specification.</para>
            </param>
            <returns>
            If the function succeeds, the return value is TRUE.If the function fails, the return value is FALSE.
            </returns>
        </member>
        <member name="M:OpenGL.winapi.GetDC(System.IntPtr)">
            <summary>
            <para>The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or for the entire screen.</para>
            <para>You can use the returned handle in subsequent GDI functions to draw in the DC.</para>
            </summary>
            <param name="hwnd">
            A handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the DC for the specified window's client area.</para>
            <para>If the function fails, the return value is NULL.</para>
            </returns>
        </member>
        <member name="M:OpenGL.winapi.SwapBuffers(System.IntPtr)">
            <summary>
            The SwapBuffers function exchanges the front and back buffers if the current pixel format for the window referenced by the specified device context includes a back buffer.
            </summary>
            <param name="hdc">
            <para>Specifies a device context.</para>
            <para> If the current pixel format for the window referenced by this device context includes a back buffer,</para>
            <para>the function exchanges the front and back buffers.</para>
            </param>
            <returns>
            If the function succeeds, the return value is TRUE.If the function fails, the return value is FALSE. 
            </returns>
        </member>
        <member name="M:OpenGL.winapi.GetConsoleWindow">
            <summary>
            获取当前线程的控制台窗口句柄
            </summary>
            <returns>当前线程控制台句柄</returns>
        </member>
    </members>
</doc>
